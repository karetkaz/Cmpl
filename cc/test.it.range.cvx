struct range {	int min;	int max;}struct rangeIterator {	int pos;	int max;	int Value;}// range is iterable using the rangeiterator structure.define iterator(range ^r) = rangeIterator(r.min, r.max, 0);	// start at min, and end at maxvoid printIT(int ri) {	print("iterator {%d}\n", int64(ri));}bool next(rangeIterator &it) {	result = it.pos < it.max;	if (result != false) {		it.Value = it.pos;		it.pos += 1;	}	return result;}for (rangeIterator it : range(10, 13)) {	printIT(it.Value);}bool next(rangeIterator &it, int &val) {	result = it.pos < it.max;	if (result != false) {		val = it.pos;		it.pos += 1;	}	return result;}for (int it : range(10, 13)) {	printIT(it);}//~ for (int it : range(10, 13)){ ... } => for ({int it; rangeIterator .it = iterator(range(10, 13))}; next(.it, &it); ) { ... }/+ enable iterating an iteratordefine iterator(rangeIterator ^r) = (r);for (rangeIterator it : rangeIterator(10, 13, 8)) {	printIT(it.Value);}//~ +/