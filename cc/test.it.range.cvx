// iterating ...struct range {	int min;	int max;}struct rangeIterator {	int Value;	int max;}// make range iterable using the rangeIterator structure.define iterator(range r) = rangeIterator(r.min - 1, r.max);	// start at min - 1, and end at maxvoid printIT(int ri) {	print("iterator {%d}\n", int64(ri));}bool next(rangeIterator &it) {	result = it.Value < it.max;	if (result != false) {		it.Value += 1;	}	return result;}bool next(rangeIterator &it, int &val) {	result = it.Value < it.max;	if (result != false) {		it.Value += 1;		val = it.Value;	}	return result;}// iterate using: next(rangeIterator &it)for (rangeIterator it : range(10, 13)) {	printIT(it.Value);}// iterate using: next(rangeIterator &it, int &val)for (int it : range(10, 13)) {	printIT(it);}//~ Iterator expansion://~    for (int it : range(10, 13)) { ... } //~ => for ({int it; rangeIterator .it = iterator(range(10, 13))}; next(.it, &it); ) { ... }