// iterating through files ...// make files iterable :)inline iterator(File &file) = (file);void print(string str) {	static File stdOut = File.DbgOut;	char slice[] = emit(struct, string(str), strlen(str));	File.Write(stdOut, slice);}void print(char chr) {	char str[2] = {chr, 0};	print(string(str));}// iterating by charsbool next(File &file, char &value) {	int ch = File.Read(file);	result = ch != -1;	if (result) {		value = ch;	}}// iterating by linesbool next(File &file, char buff[]) {	int max = buff.length - 1;	int pos = 0;	//~ TODO: put this back: assert(max > 0);	result = false; // by default	for (; pos < max; pos += 1) {		int chr = File.Read(file);		buff[pos] = chr;		if (chr == '\n' || chr == '\r') {			if (chr == '\r') {				chr = File.Peek(file);				if (chr == '\n') {					File.Read(file);				}			}			// end of line			buff[pos + 1] = 0;			return true;		}		if (chr < 0) {			// end of file			buff[pos] = 0;			return result;		}		result = true;	}	// end of buff (line is splitted)	buff[pos] = 0;	trace("this line did not fit in the buffer", variant(string(buff)));	return true;}inline testFile = "test.it.files.cvx";inline printin = !false;//~ /+ iterate file by charsFile file1 = File.Open(testFile);for (char chr : file1) {	static if (printin) {		print('(');	}	print(chr);	static if (printin) {		print(')');	}}File.Close(file1);//~ +///~ /+ iterate file by linesFile file2 = File.Open(testFile);File out = File.StdOut;for (char str[70] : file2) {	static if (printin) {		print('[');	}	print(string(str));	static if (printin) {		print(']');	}}File.Close(file2);//~ +//+ copy file with iteratorFile file3 = File.Open(testFile);File fileO = File.Create("out.txt");for (char chr : file3) {	File.Write(fileO, chr);}File.Close(fileO);File.Close(file3);//~ +/