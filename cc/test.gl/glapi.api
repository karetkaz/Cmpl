
>==-- tags:
#api: replace(`^([^:)<#>]*([)]+[:][^:]+)?).*$`, `\1`)
typename: typename: [@000004, size: 0, kind: static const typename, cast: .ref]
typename.line: int32: [+000008, size: 4, kind: const variable]
typename.size: int32: [+000014, size: 4, kind: const variable]
typename.offset: int32: [+000018, size: 4, kind: const variable]
typename.file: string: [+025050, size: 28, kind: alias]
typename.name: string: [+02506c, size: 28, kind: alias]
typename.base(typename type): typename: [+025088, size: 28, kind: alias]
void: typename: [@000064, size: 0, kind: static const typename, cast: .vid]
bool: typename: [@0000bc, size: 4, kind: static const typename, cast: .bit]
int8: typename: [@000114, size: 1, kind: static const typename, cast: .i32]
int16: typename: [@00016c, size: 2, kind: static const typename, cast: .i32]
int32: typename: [@0001c4, size: 4, kind: static const typename, cast: .i32]
int64: typename: [@00021c, size: 8, kind: static const typename, cast: .i64]
int64.Not(int64 Value): int64: [@0251bc, size: 28, kind: static alias]
int64.And(int64 Lhs, int64 Rhs): int64: [@0251d8, size: 28, kind: static alias]
int64.Or(int64 Lhs, int64 Rhs): int64: [@0251f4, size: 28, kind: static alias]
int64.Xor(int64 Lhs, int64 Rhs): int64: [@025210, size: 28, kind: static alias]
int64.Shl(int64 Value, int32 Count): int64: [@02522c, size: 28, kind: static alias]
int64.Shr(int64 Value, int32 Count): int64: [@025248, size: 28, kind: static alias]
int64.Sar(int64 Value, int32 Count): int64: [@025264, size: 28, kind: static alias]
uint8: typename: [@000274, size: 1, kind: static const typename, cast: .u32]
uint16: typename: [@0002cc, size: 2, kind: static const typename, cast: .u32]
uint32: typename: [@000324, size: 4, kind: static const typename, cast: .u32]
float32: typename: [@00037c, size: 4, kind: static const typename, cast: .f32]
float64: typename: [@0003d4, size: 8, kind: static const typename, cast: .f64]
float64.sin(float64 x): float64: [@025280, size: 28, kind: static alias]
float64.cos(float64 x): float64: [@02529c, size: 28, kind: static alias]
float64.tan(float64 x): float64: [@0252b8, size: 28, kind: static alias]
float64.log(float64 x): float64: [@0252d4, size: 28, kind: static alias]
float64.exp(float64 x): float64: [@0252f0, size: 28, kind: static alias]
float64.pow(float64 x, float64 y): float64: [@02530c, size: 28, kind: static alias]
float64.sqrt(float64 x): float64: [@025328, size: 28, kind: static alias]
float64.atan2(float64 x, float64 y): float64: [@025344, size: 28, kind: static alias]
pointer: typename: [@00042c, size: 4, kind: static const typename, cast: .ref]
null: pointer: [@000000, size: 4, kind: static const variable]
object: typename: [@0004dc, size: 0, kind: static const typename, cast: .ref]
variant: typename: [@000534, size: 8, kind: static const typename, cast: .rec]
variant.null: variant: [@000000, size: 8, kind: static const alias]
int: int32: [@000000, size: 0, kind: static const alias]
long: int64: [@000000, size: 0, kind: static const alias]
float: float32: [@000000, size: 0, kind: static const alias]
double: float64: [@000000, size: 0, kind: static const alias]
true: bool: [@000000, size: 0, kind: static const alias]
false: bool: [@000000, size: 0, kind: static const alias]
char: typename: [@00079c, size: 1, kind: static const typename, cast: .u32]
string: char: [@0007f4, size: 4, kind: static const typename, cast: .ref]
var: variant: [@000000, size: 0, kind: static const alias]
emit: [@000000, size: 0, kind: static opcode]
Halt(int32 Code): void: [@025034, size: 28, kind: static alias]
CLOCKS_PER_SEC: int32: [@000000, size: 0, kind: static alias, cast: .i64]
RAND_MAX: int32: [@000000, size: 0, kind: static alias, cast: .i64]
debug(string message, variant inspect, int32 level, int32 maxTrace): void: [@0250a4, size: 28, kind: static alias]
memmgr(pointer ptr, int32 size): pointer: [@0250c0, size: 28, kind: static alias]
memcpy(pointer dest, pointer src, int32 size): pointer: [@0250dc, size: 28, kind: static alias]
memset(pointer dest, int32 value, int32 size): pointer: [@0250f8, size: 28, kind: static alias]
System: void: [@008d04, size: 0, kind: static const typename, cast: .vid]
System.exit(int32 code): void: [@025114, size: 28, kind: static alias]
System.srand(int32 seed): void: [@025130, size: 28, kind: static alias]
System.rand(void): int32: [@02514c, size: 28, kind: static alias]
System.time(void): int32: [@025168, size: 28, kind: static alias]
System.clock(void): int32: [@025184, size: 28, kind: static alias]
System.millis(void): int64: [@0251a0, size: 28, kind: static alias]
rand(int32 min, int32 max): int32: [@000000, size: 0, kind: static alias]
rand(float64 min, float64 max): float64: [@000000, size: 0, kind: static alias]
Math: typename: [@00a52c, size: 0, kind: static const typename, cast: .vid]
Math.pi: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.e: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.ln2: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.log2E: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.ln10: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.log10E: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.phi: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.sqrt2: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.sqrtE: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.sqrtPi: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.sqrtPhi: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.nan: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.inf: float64: [@000000, size: 0, kind: static const alias, cast: .f64]
Math.modf(float64 x, float64 &intPart): float64: [@0258a0, size: 103, kind: static variable, cast: .f64]
Math.isNan(float64 x): bool: [@000000, size: 0, kind: static alias]
Math.isNan(float32 x): bool: [@000000, size: 0, kind: static alias]
Math.isInf(float64 x): bool: [@000000, size: 0, kind: static alias]
Math.isInf(float32 x): bool: [@000000, size: 0, kind: static alias]
Math.isFinite(float64 x): bool: [@000000, size: 0, kind: static alias]
Math.isFinite(float32 x): bool: [@000000, size: 0, kind: static alias]
Math.abs(int32 x): int32: [@000000, size: 0, kind: static alias]
Math.abs(int64 x): int64: [@000000, size: 0, kind: static alias]
Math.abs(uint32 x): uint32: [@000000, size: 0, kind: static alias]
Math.abs(float32 x): float32: [@000000, size: 0, kind: static alias]
Math.abs(float64 x): float64: [@000000, size: 0, kind: static alias]
Math.sign(int32 x): int32: [@000000, size: 0, kind: static alias]
Math.sign(int64 x): int32: [@000000, size: 0, kind: static alias]
Math.sign(uint32 x): int32: [@000000, size: 0, kind: static alias]
Math.sign(float32 x): int32: [@000000, size: 0, kind: static alias]
Math.sign(float64 x): int32: [@000000, size: 0, kind: static alias]
Math.floor(float64 x): float64: [@025907, size: 30, kind: static variable, cast: .f64]
Math.floor(float32 x): float32: [@000000, size: 0, kind: static alias]
Math.ceil(float64 x): float64: [@000000, size: 0, kind: static alias]
Math.ceil(float32 x): float32: [@000000, size: 0, kind: static alias]
Math.round(float64 x): float64: [@000000, size: 0, kind: static alias]
Math.round(float32 x): float32: [@000000, size: 0, kind: static alias]
Math.max(int32 a, int32 b): int32: [@000000, size: 0, kind: static alias]
Math.max(int64 a, int64 b): int64: [@000000, size: 0, kind: static alias]
Math.max(uint32 a, uint32 b): uint32: [@000000, size: 0, kind: static alias]
Math.max(float32 a, float32 b): float32: [@000000, size: 0, kind: static alias]
Math.max(float64 a, float64 b): float64: [@000000, size: 0, kind: static alias]
Math.min(int32 a, int32 b): int32: [@000000, size: 0, kind: static alias]
Math.min(int64 a, int64 b): int64: [@000000, size: 0, kind: static alias]
Math.min(uint32 a, uint32 b): uint32: [@000000, size: 0, kind: static alias]
Math.min(float32 a, float32 b): float32: [@000000, size: 0, kind: static alias]
Math.min(float64 a, float64 b): float64: [@000000, size: 0, kind: static alias]
Math.clamp(int32 t, int32 a, int32 b): int32: [@000000, size: 0, kind: static alias]
Math.clamp(float32 t, float32 a, float32 b): float32: [@000000, size: 0, kind: static alias]
Math.clamp(float64 t, float64 a, float64 b): float64: [@000000, size: 0, kind: static alias]
Math.lerp(float32 t, float32 a, float32 b): float32: [@000000, size: 0, kind: static alias]
Math.lerp(float64 t, float64 a, float64 b): float64: [@000000, size: 0, kind: static alias]
Math.smooth(float32 t): float32: [@000000, size: 0, kind: static alias]
Math.smooth(float64 t): float64: [@000000, size: 0, kind: static alias]
Math.smooth(float32 t, float32 a, float32 b): float32: [@000000, size: 0, kind: static alias]
Math.smooth(float64 t, float64 a, float64 b): float64: [@000000, size: 0, kind: static alias]
Math.absMod(int32 val, int32 mod): int32: [@000000, size: 0, kind: static alias]
Math.absMod(float32 val, float32 mod): float32: [@000000, size: 0, kind: static alias]
Math.absMod(float64 val, float64 mod): float64: [@000000, size: 0, kind: static alias]
Math.nz(float64 val1, float64 val2): float64: [@000000, size: 0, kind: static alias]
Math.hypot(float64 x, float64 y): float64: [@000000, size: 0, kind: static alias]
Math.eval(float64 x, float64 a0, float64 a1): float64: [@000000, size: 0, kind: static alias]
Math.eval(float64 x, float64 a0, float64 a1, float64 a2): float64: [@000000, size: 0, kind: static alias]
Math.eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3): float64: [@000000, size: 0, kind: static alias]
Math.eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3, float64 a4): float64: [@000000, size: 0, kind: static alias]
Math.eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3, float64 a4, float64 a5): float64: [@000000, size: 0, kind: static alias]
Math.eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3, float64 a4, float64 a5, float64 a6): float64: [@000000, size: 0, kind: static alias]
Math.eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3, float64 a4, float64 a5, float64 a6, float64 a7): float64: [@000000, size: 0, kind: static alias]
Math.Min(float64[] data): float64: [@025925, size: 64, kind: static variable, cast: .f64]
Math.Max(float64[] data): float64: [@025965, size: 64, kind: static variable, cast: .f64]
Math.Sum(float64[] data): float64: [@0259a5, size: 57, kind: static variable, cast: .f64]
Math.Mean(float64[] data): float64: [@0259de, size: 24, kind: static variable, cast: .f64]
Math.Cmp(float32 a, float32 b, float32 eps): int32: [@0259f6, size: 62, kind: static variable, cast: .i32]
Math.Cmp(float64 a, float64 b, float64 eps): int32: [@025a34, size: 62, kind: static variable, cast: .i32]
Math.sincos(float64 arg, int32 quad): float64: [@025a72, size: 377, kind: static variable, cast: .f64]
Math.Sin(float64 arg): float64: [@000000, size: 0, kind: static alias]
Math.Cos(float64 arg): float64: [@000000, size: 0, kind: static alias]
Math.Tan(float64 arg): float64: [@025beb, size: 392, kind: static variable, cast: .f64]
Math.Sinh(float64 x): float64: [@025d73, size: 243, kind: static variable, cast: .f64]
Math.Cosh(float64 x): float64: [@025e66, size: 86, kind: static variable, cast: .f64]
Math.Asin(float64 x): float64: [@025ebc, size: 183, kind: static variable, cast: .f64]
Math.Acos(float64 x): float64: [@000000, size: 0, kind: static alias]
Math.deg2rad(float64 x): float64: [@000000, size: 0, kind: static alias]
Math.rad2deg(float64 x): float64: [@000000, size: 0, kind: static alias]
Perlin: typename: [@01094c, size: 0, kind: static const typename, cast: .vid]
Perlin.B: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Perlin.BM: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Perlin.N: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Perlin.NP: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Perlin.NM: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Perlin.p: int32[B + B + 2]: [@025f7c, size: 2056, kind: static variable]
Perlin.g3: float32[B + B + 2][3]: [@02678c, size: 6168, kind: static variable]
Perlin.g2: float32[B + B + 2][2]: [@027fac, size: 4112, kind: static variable]
Perlin.g1: float32[B + B + 2]: [@028fbc, size: 2056, kind: static variable]
Perlin.start: bool: [@0297c4, size: 4, kind: static variable, cast: .bit]
Perlin.init(void): void: [@0297c8, size: 887, kind: static variable, cast: .vid]
Perlin.setup(float32 vec_i, int32 &b0, int32 &b1, float32 &r0, float32 &r1): void: [@029b3f, size: 61, kind: static variable, cast: .vid]
Perlin.smooth(float32 t): float32: [@000000, size: 0, kind: static alias]
Perlin.lerp(float32 t, float32 a, float32 b): float32: [@000000, size: 0, kind: static alias]
Perlin.Noise1f(float32 x): float32: [@029b7c, size: 181, kind: static variable, cast: .f32]
Perlin.Noise2f(float32 x, float32 y): float32: [@029c31, size: 443, kind: static variable, cast: .f32]
Perlin.Noise3f(float32 x, float32 y, float32 z): float32: [@029dec, size: 971, kind: static variable, cast: .f32]
Perlin.Noise(float32 x): float32: [@000000, size: 0, kind: static alias]
Perlin.Noise(float32 x, float32 y): float32: [@000000, size: 0, kind: static alias]
Perlin.Noise(float32 x, float32 y, float32 z): float32: [@000000, size: 0, kind: static alias]
Date: typename: [@013804, size: 8, kind: static const typename, cast: .rec]
Date.days: int64: [+000000, size: 8, kind: variable, cast: .i64]
Date.MillisPerSecond: int64: [@000000, size: 0, kind: static const alias, cast: .i64]
Date.MillisPerMinute: int64: [@000000, size: 0, kind: static const alias, cast: .i64]
Date.MillisPerHour: int64: [@000000, size: 0, kind: static const alias, cast: .i64]
Date.MillisPerDay: int64: [@000000, size: 0, kind: static const alias, cast: .i64]
Date.MillisPerWeek: int64: [@000000, size: 0, kind: static const alias, cast: .i64]
Date.DaysPerYear: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Date.DaysPer4Years: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Date.DaysPer100Years: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Date.DaysPer400Years: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Date.HoursPerDay: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Date.MinutesPerDay: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Date.SecondsPerDay: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Date.Duration: typename: [@013d3c, size: 8, kind: static const typename, cast: .rec]
Date.Duration.value: int64: [+000000, size: 8, kind: variable, cast: .i64]
Date.Duration.millis(int64 value): int64: [+000000, size: 0, kind: alias]
Date.Duration.seconds(int64 value): int64: [+000000, size: 0, kind: alias]
Date.Duration.minutes(int64 value): int64: [+000000, size: 0, kind: alias]
Date.Duration.hours(int64 value): int64: [+000000, size: 0, kind: alias]
Date.Duration.days(int64 value): int64: [+000000, size: 0, kind: alias]
Date.Duration.weeks(int64 value): int64: [+000000, size: 0, kind: alias]
Date.Duration(int64 value): Date.Duration: [+000000, size: 0, kind: const alias]
Date.DaysToMonth365: int32[13]: [@02a1bc, size: 52, kind: static const variable]
Date.DaysToMonth366: int32[13]: [@02a1fc, size: 52, kind: static const variable]
Date.IsLeapYear(int32 year): bool: [@02a230, size: 79, kind: static variable, cast: .bit]
Date.ToDays(int32 year, int32 month, int32 day): int64: [@02a27f, size: 241, kind: static const variable, cast: .i64]
Date.Parts: typename: [@014964, size: 20, kind: static const typename, cast: .rec]
Date.Parts.year: int32: [+000000, size: 4, kind: variable, cast: .i32]
Date.Parts.month: int32: [+000004, size: 4, kind: variable, cast: .i32]
Date.Parts.dayOfYear: int32: [+000008, size: 4, kind: variable, cast: .i32]
Date.Parts.dayOfMonth: int32: [+00000c, size: 4, kind: variable, cast: .i32]
Date.Parts.dayOfWeek: int32: [+000010, size: 4, kind: variable, cast: .i32]
Date.Parts(int32 year, int32 month, int32 dayOfYear, int32 dayOfMonth, int32 dayOfWeek): Date.Parts: [+000000, size: 0, kind: const alias]
Date.Parts2: typename: [@014d5c, size: 20, kind: static const typename, cast: .rec]
Date.Parts2.year: int32: [+000000, size: 4, kind: variable, cast: .i32]
Date.Parts2.month: int32: [+000004, size: 4, kind: variable, cast: .i32]
Date.Parts2.dayOfYear: int32: [+000008, size: 4, kind: variable, cast: .i32]
Date.Parts2.dayOfMonth: int32: [+00000c, size: 4, kind: variable, cast: .i32]
Date.Parts2.dayOfWeek: int32: [+000010, size: 4, kind: variable, cast: .i32]
Date.Parts2(int32 year, int32 month, int32 dayOfYear, int32 dayOfMonth, int32 dayOfWeek): Date.Parts2: [+000000, size: 0, kind: const alias]
Date.ToParts(int32 n): Date.Parts: [@02a370, size: 345, kind: static variable, cast: .rec]
Date.ToParts(int64 days, int32 &year, int32 &month, int32 &day): void: [@02a4c9, size: 37, kind: static variable, cast: .vid]
Date.Parts(int32 n): Date.Parts: [+000000, size: 0, kind: alias]
Date(int64 days): Date: [@000000, size: 0, kind: static const alias]
Date(int32 year, int32 month, int32 day): Date: [@000000, size: 0, kind: static alias]
DateFromTime(int32 time): Date: [@02a4f4, size: 17, kind: static variable, cast: .rec]
importstd: bool: [@015bd4, size: 4, kind: static const typename, cast: enum]
importstd.print: bool: [@000000, size: 0, kind: static const alias, cast: .bit]
importstd.bits2: bool: [@000000, size: 0, kind: static const alias, cast: .bit]
importstd.complex: bool: [@000000, size: 0, kind: static const alias, cast: .bit]
importstd.vec2d: bool: [@000000, size: 0, kind: static const alias, cast: .bit]
importstd.vec4f: bool: [@000000, size: 0, kind: static const alias, cast: .bit]
importstd.mat4f: bool: [@000000, size: 0, kind: static const alias, cast: .bit]
importstd.strUtils: bool: [@000000, size: 0, kind: static const alias, cast: .bit]
Lo32(int64 a): int32: [@000000, size: 0, kind: static alias]
Hi32(int64 a): int32: [@000000, size: 0, kind: static alias]
Lo16(int32 a): int32: [@000000, size: 0, kind: static alias]
Hi16(int32 a): int32: [@000000, size: 0, kind: static alias]
Lo8(int32 a): int32: [@000000, size: 0, kind: static alias]
Hi8(int32 a): int32: [@000000, size: 0, kind: static alias]
bitsr(uint32 x): int32: [@02a505, size: 153, kind: static variable, cast: .i32]
bitsf(uint32 x): int32: [@02a59e, size: 163, kind: static variable, cast: .i32]
bithi(uint32 x): int32: [@02a641, size: 56, kind: static variable, cast: .i32]
bitlo(uint32 x): int32: [@02a679, size: 10, kind: static variable, cast: .i32]
bitcnt(uint32 x): int32: [@02a683, size: 73, kind: static variable, cast: .i32]
bitswp(uint32 x): int32: [@02a6cc, size: 105, kind: static variable, cast: .i32]
Complex: typename: [@016a3c, size: 16, kind: static const typename, cast: .rec]
Complex.re: float64: [+000000, size: 8, kind: const variable, cast: .f64]
Complex.im: float64: [+000008, size: 8, kind: const variable, cast: .f64]
Complex(float64 re, float64 im): Complex: [@000000, size: 0, kind: static const alias]
Complex(float64 re): Complex: [@000000, size: 0, kind: static alias]
neg(Complex a): Complex: [@000000, size: 0, kind: static alias]
add(Complex a, Complex b): Complex: [@000000, size: 0, kind: static alias]
add(Complex a, float64 b): Complex: [@000000, size: 0, kind: static alias]
add(float64 a, Complex b): Complex: [@000000, size: 0, kind: static alias]
sub(Complex a, Complex b): Complex: [@000000, size: 0, kind: static alias]
sub(Complex a, float64 b): Complex: [@000000, size: 0, kind: static alias]
sub(float64 a, Complex b): Complex: [@000000, size: 0, kind: static alias]
mul(Complex a, Complex b): Complex: [@000000, size: 0, kind: static alias]
mul(Complex a, float64 b): Complex: [@000000, size: 0, kind: static alias]
mul(float64 a, Complex b): Complex: [@000000, size: 0, kind: static alias]
div(Complex a, Complex b): Complex: [@02a735, size: 158, kind: static variable, cast: .rec]
abs(Complex a): float64: [@000000, size: 0, kind: static alias]
arg(Complex a): float64: [@000000, size: 0, kind: static alias]
re(Complex a): float64: [@000000, size: 0, kind: static alias]
im(Complex a): float64: [@000000, size: 0, kind: static alias]
inv(Complex a): Complex: [@02a7d3, size: 34, kind: static variable, cast: .rec]
conj(Complex a): Complex: [@000000, size: 0, kind: static alias]
exp(Complex a): Complex: [@000000, size: 0, kind: static alias]
log(Complex a): Complex: [@000000, size: 0, kind: static alias]
pow(Complex a, Complex b): Complex: [@02a7f5, size: 97, kind: static variable, cast: .rec]
pow(Complex a, float64 b): Complex: [@000000, size: 0, kind: static alias]
sin(Complex a): Complex: [@000000, size: 0, kind: static alias]
cos(Complex a): Complex: [@000000, size: 0, kind: static alias]
tan(Complex a): Complex: [@000000, size: 0, kind: static alias]
vec2d: typename: [@01863c, size: 16, kind: static const typename, cast: .rec]
vec2d.x: float64: [+000000, size: 8, kind: const variable, cast: .f64]
vec2d.y: float64: [+000008, size: 8, kind: const variable, cast: .f64]
vec2d(float64 x, float64 y): vec2d: [@000000, size: 0, kind: static const alias]
add(vec2d x, vec2d y): vec2d: [@000000, size: 0, kind: static alias]
sub(vec2d x, vec2d y): vec2d: [@000000, size: 0, kind: static alias]
mul(vec2d x, vec2d y): vec2d: [@000000, size: 0, kind: static alias]
div(vec2d x, vec2d y): vec2d: [@000000, size: 0, kind: static alias]
min(vec2d x, vec2d y): vec2d: [@000000, size: 0, kind: static alias]
max(vec2d x, vec2d y): vec2d: [@000000, size: 0, kind: static alias]
ceq(vec2d x, vec2d y): bool: [@000000, size: 0, kind: static alias]
dot(vec2d x, vec2d y): float64: [@000000, size: 0, kind: static alias]
vec4f: typename: [@018fa4, size: 16, kind: static const typename, cast: .rec]
vec4f.x: float32: [+000000, size: 4, kind: variable, cast: .f32]
vec4f.y: float32: [+000004, size: 4, kind: variable, cast: .f32]
vec4f.z: float32: [+000008, size: 4, kind: variable, cast: .f32]
vec4f.w: float32: [+00000c, size: 4, kind: variable, cast: .f32]
vec4f(float32 x, float32 y, float32 z, float32 w): vec4f: [@000000, size: 0, kind: static const alias]
vec4f(float32 x, float32 y, float32 z): vec4f: [@000000, size: 0, kind: static alias]
vec4f(float32 val): vec4f: [@000000, size: 0, kind: static alias]
neg(vec4f rhs): vec4f: [@000000, size: 0, kind: static alias]
add(vec4f lhs, vec4f rhs): vec4f: [@000000, size: 0, kind: static alias]
add(float32 a, vec4f b): vec4f: [@000000, size: 0, kind: static alias]
add(vec4f a, float32 b): vec4f: [@000000, size: 0, kind: static alias]
sub(vec4f lhs, vec4f rhs): vec4f: [@000000, size: 0, kind: static alias]
sub(float32 a, vec4f b): vec4f: [@000000, size: 0, kind: static alias]
sub(vec4f a, float32 b): vec4f: [@000000, size: 0, kind: static alias]
mul(vec4f lhs, vec4f rhs): vec4f: [@000000, size: 0, kind: static alias]
mul(float32 a, vec4f b): vec4f: [@000000, size: 0, kind: static alias]
mul(vec4f a, float32 b): vec4f: [@000000, size: 0, kind: static alias]
div(vec4f lhs, vec4f rhs): vec4f: [@000000, size: 0, kind: static alias]
div(float32 a, vec4f b): vec4f: [@000000, size: 0, kind: static alias]
div(vec4f a, float32 b): vec4f: [@000000, size: 0, kind: static alias]
min(vec4f x, vec4f y): vec4f: [@000000, size: 0, kind: static alias]
max(vec4f x, vec4f y): vec4f: [@000000, size: 0, kind: static alias]
ceq(vec4f x, vec4f y): bool: [@000000, size: 0, kind: static alias]
mad(vec4f a, vec4f b, vec4f c): vec4f: [@000000, size: 0, kind: static alias]
dp3(vec4f lhs, vec4f rhs): float32: [@000000, size: 0, kind: static alias]
dp4(vec4f lhs, vec4f rhs): float32: [@000000, size: 0, kind: static alias]
dph(vec4f lhs, vec4f rhs): float32: [@000000, size: 0, kind: static alias]
cross(vec4f a, vec4f b): vec4f: [@000000, size: 0, kind: static alias]
lerp(float32 t, vec4f lhs, vec4f rhs): vec4f: [@000000, size: 0, kind: static alias]
len(vec4f v): float64: [@000000, size: 0, kind: static alias]
eval(vec4f v, float32 x): float32: [@000000, size: 0, kind: static alias]
normalize(vec4f a): vec4f: [@000000, size: 0, kind: static alias]
float32(vec4f vec): float32: [@000000, size: 0, kind: static alias]
mat4f: typename: [@01acac, size: 64, kind: static const typename, cast: .rec]
mat4f.x: vec4f: [+000000, size: 16, kind: variable, cast: .rec]
mat4f.y: vec4f: [+000010, size: 16, kind: variable, cast: .rec]
mat4f.z: vec4f: [+000020, size: 16, kind: variable, cast: .rec]
mat4f.w: vec4f: [+000030, size: 16, kind: variable, cast: .rec]
mat4f(vec4f x, vec4f y, vec4f z, vec4f w): mat4f: [@000000, size: 0, kind: static const alias]
mat4f(float64 m11, float64 m12, float64 m13, float64 m14, float64 m21, float64 m22, float64 m23, float64 m24, float64 m31, float64 m32, float64 m33, float64 m34, float64 m41, float64 m42, float64 m43, float64 m44): mat4f: [@000000, size: 0, kind: static alias]
dp3(mat4f mat, vec4f vec): vec4f: [@000000, size: 0, kind: static alias]
dp4(mat4f mat, vec4f vec): vec4f: [@000000, size: 0, kind: static alias]
dph(mat4f mat, vec4f vec): vec4f: [@000000, size: 0, kind: static alias]
mul(mat4f &lhs, mat4f &rhs): mat4f: [@02a856, size: 313, kind: static variable, cast: .rec]
transpose(mat4f &mat): mat4f: [@02a98f, size: 141, kind: static variable, cast: .rec]
transpose2(mat4f &mat): void: [@02aa2f, size: 133, kind: static variable, cast: .vid]
variant(typename type, pointer value): variant: [@000000, size: 0, kind: static alias]
Debug: typename: [@01c07c, size: 0, kind: static const typename, cast: .vid]
Debug.abort: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Debug.debug: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Debug.notrace: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
Debug.deftrace: int32: [@000000, size: 0, kind: static const alias, cast: .i32]
debug(string message): void: [@000000, size: 0, kind: static alias]
debug(variant inspect): void: [@000000, size: 0, kind: static alias]
debug(string message, variant inspect): void: [@000000, size: 0, kind: static alias]
trace(string message): void: [@000000, size: 0, kind: static alias]
trace(string message, variant inspect): void: [@000000, size: 0, kind: static alias]
abort(void): void: [@000000, size: 0, kind: static alias]
abort(string message): void: [@000000, size: 0, kind: static alias]
assert(bool condition): void: [@000000, size: 0, kind: static alias]
assert(bool condition, string message): void: [@000000, size: 0, kind: static alias]
assert(bool condition, string message, variant inspect): void: [@000000, size: 0, kind: static alias]
strlen(string str): int32: [@02aab4, size: 30, kind: static variable, cast: .i32]
umin(uint32 a, uint32 b): uint32: [@000000, size: 0, kind: static alias]
strchr(string str, int32 chr): int32: [@02aad2, size: 60, kind: static variable, cast: .i32]
strchr(string str, int32 chr, int32 max): int32: [@02ab0e, size: 102, kind: static variable, cast: .i32]
strrchr(string str, int32 chr): int32: [@02ab74, size: 56, kind: static variable, cast: .i32]
strrchr(string str, int32 chr, int32 max): int32: [@02abac, size: 98, kind: static variable, cast: .i32]
compare(string a, string b): int32: [@02ac0e, size: 95, kind: static variable, cast: .i32]
compare2(string a, string b): int32: [@02ac6d, size: 81, kind: static variable, cast: .i32]
equals(string a, string b): bool: [@000000, size: 0, kind: static alias]
FormatFlags: typename: [@01dbc4, size: 20, kind: static const typename, cast: .rec]
FormatFlags.sgnChr: int32: [+000000, size: 4, kind: const variable, cast: .i32]
FormatFlags.padChr: int32: [+000004, size: 4, kind: const variable, cast: .i32]
FormatFlags.padLen: int32: [+000008, size: 4, kind: const variable, cast: .i32]
FormatFlags.maxLen: int32: [+00000c, size: 4, kind: const variable, cast: .i32]
FormatFlags.fmtChr: int32: [+000010, size: 4, kind: const variable, cast: .i32]
FormatFlags(int32 sgnChr, int32 padChr, int32 padLen, int32 maxLen, int32 fmtChr): FormatFlags: [@000000, size: 0, kind: static const alias]
format(char[] output, int32 pos, FormatFlags &flags, int32 rad, uint32 value): int32: [@02acec, size: 401, kind: static variable, cast: .i32]
format(char[] output, string format, int32 value): int32: [@02ae7d, size: 670, kind: static variable, cast: .i32]
format(char[] output, string format, Date value): void: [@02b19f, size: 2273, kind: static variable, cast: .vid]
string(char[] arr): string: [@000000, size: 0, kind: static alias]
variant(string str): variant: [@000000, size: 0, kind: static alias]
realloc(pointer ptr, int32 size): pointer: [@000000, size: 0, kind: static alias]
malloc(int32 size): pointer: [@000000, size: 0, kind: static alias]
free(pointer ptr): pointer: [@000000, size: 0, kind: static alias]
sizeof(typename type): int32: [@000000, size: 0, kind: static alias]
File: typename: [@01ffa4, size: 4, kind: static const typename, cast: .rec]
File.Open(char[] path): File: [@025360, size: 28, kind: static alias]
File.Create(char[] path): File: [@02537c, size: 28, kind: static alias]
File.Append(char[] path): File: [@025398, size: 28, kind: static alias]
File.Peek(File file): int32: [@0253b4, size: 28, kind: static alias]
File.Read(File file): int32: [@0253d0, size: 28, kind: static alias]
File.Read(File file, uint8[] buff): int32: [@0253ec, size: 28, kind: static alias]
File.ReadLine(File file, uint8[] buff): int32: [@025408, size: 28, kind: static alias]
File.Write(File file, uint8 byte): int32: [@025424, size: 28, kind: static alias]
File.Write(File file, uint8[] buff): int32: [@025440, size: 28, kind: static alias]
File.Flush(File file): void: [@02545c, size: 28, kind: static alias]
File.Close(File file): void: [@025478, size: 28, kind: static alias]
File.StdIn: File: [@025494, size: 28, kind: static alias]
File.StdOut: File: [@0254b0, size: 28, kind: static alias]
File.StdErr: File: [@0254cc, size: 28, kind: static alias]
testFunction(void cb(pointer args), pointer args): void: [@0254e8, size: 28, kind: static alias]
gl: void: [@02135c, size: 0, kind: static const typename, cast: .vid]
gl.DepthTest: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.LineSmooth: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.CullFace: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Front: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Back: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.FrontAndBack: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Flat: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Smooth: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.ColorBuffer: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.DepthBuffer: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.AccumBuffer: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.StencilBuffer: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Modelview: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Projection: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Texture: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Color: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Points: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Lines: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.LineStrip: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.LineLoop: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Triangles: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.TriangleStrip: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.TriangleFan: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Quads: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.QuadStrip: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Polygon: int32: [@000000, size: 0, kind: static alias, cast: .i64]
gl.Viewport(int32 x, int32 y, int32 width, int32 height): void: [@025504, size: 28, kind: static alias]
gl.Enable(int32 mode): void: [@025520, size: 28, kind: static alias]
gl.Disable(int32 mode): void: [@02553c, size: 28, kind: static alias]
gl.ShadeModel(int32 mode): void: [@025558, size: 28, kind: static alias]
gl.CullFace(int32 mode): void: [@025574, size: 28, kind: static alias]
gl.Clear(int32 Buffer): void: [@025590, size: 28, kind: static alias]
gl.Begin(int32 Primitive): void: [@0255ac, size: 28, kind: static alias]
gl.End(void): void: [@0255c8, size: 28, kind: static alias]
gl.Flush(void): void: [@0255e4, size: 28, kind: static alias]
gl.Vertex(float32 x, float32 y, float32 z, float32 w): void: [@025600, size: 28, kind: static alias]
gl.Normal(float32 x, float32 y, float32 z): void: [@02561c, size: 28, kind: static alias]
gl.Color(float32 r, float32 g, float32 b, float32 a): void: [@025638, size: 28, kind: static alias]
gl.MatrixMode(int32 mode): void: [@025654, size: 28, kind: static alias]
gl.LoadMatrix(float64[16] x): void: [@025670, size: 28, kind: static alias]
gl.MultMatrix(float64[16] x): void: [@02568c, size: 28, kind: static alias]
gl.LoadIdentity(void): void: [@0256a8, size: 28, kind: static alias]
gl.PushMatrix(void): void: [@0256c4, size: 28, kind: static alias]
gl.PopMatrix(void): void: [@0256e0, size: 28, kind: static alias]
gl.Rotate(float64 angle, float64 x, float64 y, float64 z): void: [@0256fc, size: 28, kind: static alias]
gl.Scale(float64 angle, float64 x, float64 y, float64 z): void: [@025718, size: 28, kind: static alias]
gl.Translate(float64 angle, float64 x, float64 y, float64 z): void: [@025734, size: 28, kind: static alias]
gl.Frustum(float64 left, float64 right, float64 bottom, float64 top, float64 znear, float64 zfar): void: [@025750, size: 28, kind: static alias]
gl.Ortho(float64 left, float64 right, float64 bottom, float64 top, float64 znear, float64 zfar): void: [@02576c, size: 28, kind: static alias]
gl.Vertex(float32 x, float32 y, float32 z): void: [@000000, size: 0, kind: static alias]
gl.Color(float32 r, float32 g, float32 b): void: [@000000, size: 0, kind: static alias]
glu: void: [@023f9c, size: 0, kind: static const typename, cast: .vid]
glu.LookAt(float64 eyeX, float64 eyeY, float64 eyeZ, float64 centerX, float64 centerY, float64 centerZ, float64 upX, float64 upY, float64 upZ): void: [@025788, size: 28, kind: static alias]
glut: void: [@0243b4, size: 0, kind: static const typename, cast: .vid]
glut.OnDisplay(void callback(void)): void: [@0257a4, size: 28, kind: static alias]
glut.OnReshape(void callback(int32 x, int32 y)): void: [@0257c0, size: 28, kind: static alias]
glut.OnMouse(void callback(int32 btn, int32 x, int32 y)): void: [@0257dc, size: 28, kind: static alias]
glut.OnMotion(void callback(int32 btn, int32 x, int32 y)): void: [@0257f8, size: 28, kind: static alias]
glut.OnKeyboard(void callback(int32 btn)): void: [@025814, size: 28, kind: static alias]
glut.PostRedisplay(void): void: [@025830, size: 28, kind: static alias]
glut.Reshape(int32 width, int32 height): void: [@02584c, size: 28, kind: static alias]
glut.MainLoop(int32 width, int32 height): void: [@025868, size: 28, kind: static alias]
glut.LeaveMainLoop(void): void: [@025884, size: 28, kind: static alias]
<init>(): typename: [@02ba80, size: 338, kind: static const variable, cast: .rec]
