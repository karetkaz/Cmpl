typename
typename.line
typename.size
typename.offset
typename.file
typename.name
typename.base(type: typename): typename
void
bool
int8
int16
int32
int64
int64.Not(Value: int64): int64
int64.And(Lhs: int64, Rhs: int64): int64
int64.Or(Lhs: int64, Rhs: int64): int64
int64.Xor(Lhs: int64, Rhs: int64): int64
int64.Shl(Value: int64, Count: int32): int64
int64.Shr(Value: int64, Count: int32): int64
int64.Sar(Value: int64, Count: int32): int64
uint8
uint16
uint32
float32
float32.sin(x: float32): float32
float32.cos(x: float32): float32
float32.tan(x: float32): float32
float32.log(x: float32): float32
float32.exp(x: float32): float32
float32.pow(x: float32, y: float32): float32
float32.sqrt(x: float32): float32
float32.atan2(x: float32, y: float32): float32
float64
float64.sin(x: float64): float64
float64.cos(x: float64): float64
float64.tan(x: float64): float64
float64.log(x: float64): float64
float64.exp(x: float64): float64
float64.pow(x: float64, y: float64): float64
float64.sqrt(x: float64): float64
float64.atan2(x: float64, y: float64): float64
char
pointer
variant
object
null
int
long
float
double
true
false
string
emit
emit.nop
emit.not
emit.set(1)
emit.join(1)
emit.call
emit.p4x
emit.p4x.dp3
emit.p4x.dp4
emit.p4x.dph
emit.p4x.xxxx(0)
emit.p4x.yxxx(1)
emit.p4x.zxxx(2)
emit.p4x.wxxx(3)
emit.p4x.xyxx(4)
emit.p4x.yyxx(5)
emit.p4x.zyxx(6)
emit.p4x.wyxx(7)
emit.p4x.xzxx(8)
emit.p4x.yzxx(9)
emit.p4x.zzxx(10)
emit.p4x.wzxx(11)
emit.p4x.xwxx(12)
emit.p4x.ywxx(13)
emit.p4x.zwxx(14)
emit.p4x.wwxx(15)
emit.p4x.xxyx(16)
emit.p4x.yxyx(17)
emit.p4x.zxyx(18)
emit.p4x.wxyx(19)
emit.p4x.xyyx(20)
emit.p4x.yyyx(21)
emit.p4x.zyyx(22)
emit.p4x.wyyx(23)
emit.p4x.xzyx(24)
emit.p4x.yzyx(25)
emit.p4x.zzyx(26)
emit.p4x.wzyx(27)
emit.p4x.xwyx(28)
emit.p4x.ywyx(29)
emit.p4x.zwyx(30)
emit.p4x.wwyx(31)
emit.p4x.xxzx(32)
emit.p4x.yxzx(33)
emit.p4x.zxzx(34)
emit.p4x.wxzx(35)
emit.p4x.xyzx(36)
emit.p4x.yyzx(37)
emit.p4x.zyzx(38)
emit.p4x.wyzx(39)
emit.p4x.xzzx(40)
emit.p4x.yzzx(41)
emit.p4x.zzzx(42)
emit.p4x.wzzx(43)
emit.p4x.xwzx(44)
emit.p4x.ywzx(45)
emit.p4x.zwzx(46)
emit.p4x.wwzx(47)
emit.p4x.xxwx(48)
emit.p4x.yxwx(49)
emit.p4x.zxwx(50)
emit.p4x.wxwx(51)
emit.p4x.xywx(52)
emit.p4x.yywx(53)
emit.p4x.zywx(54)
emit.p4x.wywx(55)
emit.p4x.xzwx(56)
emit.p4x.yzwx(57)
emit.p4x.zzwx(58)
emit.p4x.wzwx(59)
emit.p4x.xwwx(60)
emit.p4x.ywwx(61)
emit.p4x.zwwx(62)
emit.p4x.wwwx(63)
emit.p4x.xxxy(64)
emit.p4x.yxxy(65)
emit.p4x.zxxy(66)
emit.p4x.wxxy(67)
emit.p4x.xyxy(68)
emit.p4x.yyxy(69)
emit.p4x.zyxy(70)
emit.p4x.wyxy(71)
emit.p4x.xzxy(72)
emit.p4x.yzxy(73)
emit.p4x.zzxy(74)
emit.p4x.wzxy(75)
emit.p4x.xwxy(76)
emit.p4x.ywxy(77)
emit.p4x.zwxy(78)
emit.p4x.wwxy(79)
emit.p4x.xxyy(80)
emit.p4x.yxyy(81)
emit.p4x.zxyy(82)
emit.p4x.wxyy(83)
emit.p4x.xyyy(84)
emit.p4x.yyyy(85)
emit.p4x.zyyy(86)
emit.p4x.wyyy(87)
emit.p4x.xzyy(88)
emit.p4x.yzyy(89)
emit.p4x.zzyy(90)
emit.p4x.wzyy(91)
emit.p4x.xwyy(92)
emit.p4x.ywyy(93)
emit.p4x.zwyy(94)
emit.p4x.wwyy(95)
emit.p4x.xxzy(96)
emit.p4x.yxzy(97)
emit.p4x.zxzy(98)
emit.p4x.wxzy(99)
emit.p4x.xyzy(100)
emit.p4x.yyzy(101)
emit.p4x.zyzy(102)
emit.p4x.wyzy(103)
emit.p4x.xzzy(104)
emit.p4x.yzzy(105)
emit.p4x.zzzy(106)
emit.p4x.wzzy(107)
emit.p4x.xwzy(108)
emit.p4x.ywzy(109)
emit.p4x.zwzy(110)
emit.p4x.wwzy(111)
emit.p4x.xxwy(112)
emit.p4x.yxwy(113)
emit.p4x.zxwy(114)
emit.p4x.wxwy(115)
emit.p4x.xywy(116)
emit.p4x.yywy(117)
emit.p4x.zywy(118)
emit.p4x.wywy(119)
emit.p4x.xzwy(120)
emit.p4x.yzwy(121)
emit.p4x.zzwy(122)
emit.p4x.wzwy(123)
emit.p4x.xwwy(124)
emit.p4x.ywwy(125)
emit.p4x.zwwy(126)
emit.p4x.wwwy(127)
emit.p4x.xxxz(128)
emit.p4x.yxxz(129)
emit.p4x.zxxz(130)
emit.p4x.wxxz(131)
emit.p4x.xyxz(132)
emit.p4x.yyxz(133)
emit.p4x.zyxz(134)
emit.p4x.wyxz(135)
emit.p4x.xzxz(136)
emit.p4x.yzxz(137)
emit.p4x.zzxz(138)
emit.p4x.wzxz(139)
emit.p4x.xwxz(140)
emit.p4x.ywxz(141)
emit.p4x.zwxz(142)
emit.p4x.wwxz(143)
emit.p4x.xxyz(144)
emit.p4x.yxyz(145)
emit.p4x.zxyz(146)
emit.p4x.wxyz(147)
emit.p4x.xyyz(148)
emit.p4x.yyyz(149)
emit.p4x.zyyz(150)
emit.p4x.wyyz(151)
emit.p4x.xzyz(152)
emit.p4x.yzyz(153)
emit.p4x.zzyz(154)
emit.p4x.wzyz(155)
emit.p4x.xwyz(156)
emit.p4x.ywyz(157)
emit.p4x.zwyz(158)
emit.p4x.wwyz(159)
emit.p4x.xxzz(160)
emit.p4x.yxzz(161)
emit.p4x.zxzz(162)
emit.p4x.wxzz(163)
emit.p4x.xyzz(164)
emit.p4x.yyzz(165)
emit.p4x.zyzz(166)
emit.p4x.wyzz(167)
emit.p4x.xzzz(168)
emit.p4x.yzzz(169)
emit.p4x.zzzz(170)
emit.p4x.wzzz(171)
emit.p4x.xwzz(172)
emit.p4x.ywzz(173)
emit.p4x.zwzz(174)
emit.p4x.wwzz(175)
emit.p4x.xxwz(176)
emit.p4x.yxwz(177)
emit.p4x.zxwz(178)
emit.p4x.wxwz(179)
emit.p4x.xywz(180)
emit.p4x.yywz(181)
emit.p4x.zywz(182)
emit.p4x.wywz(183)
emit.p4x.xzwz(184)
emit.p4x.yzwz(185)
emit.p4x.zzwz(186)
emit.p4x.wzwz(187)
emit.p4x.xwwz(188)
emit.p4x.ywwz(189)
emit.p4x.zwwz(190)
emit.p4x.wwwz(191)
emit.p4x.xxxw(192)
emit.p4x.yxxw(193)
emit.p4x.zxxw(194)
emit.p4x.wxxw(195)
emit.p4x.xyxw(196)
emit.p4x.yyxw(197)
emit.p4x.zyxw(198)
emit.p4x.wyxw(199)
emit.p4x.xzxw(200)
emit.p4x.yzxw(201)
emit.p4x.zzxw(202)
emit.p4x.wzxw(203)
emit.p4x.xwxw(204)
emit.p4x.ywxw(205)
emit.p4x.zwxw(206)
emit.p4x.wwxw(207)
emit.p4x.xxyw(208)
emit.p4x.yxyw(209)
emit.p4x.zxyw(210)
emit.p4x.wxyw(211)
emit.p4x.xyyw(212)
emit.p4x.yyyw(213)
emit.p4x.zyyw(214)
emit.p4x.wyyw(215)
emit.p4x.xzyw(216)
emit.p4x.yzyw(217)
emit.p4x.zzyw(218)
emit.p4x.wzyw(219)
emit.p4x.xwyw(220)
emit.p4x.ywyw(221)
emit.p4x.zwyw(222)
emit.p4x.wwyw(223)
emit.p4x.xxzw(224)
emit.p4x.yxzw(225)
emit.p4x.zxzw(226)
emit.p4x.wxzw(227)
emit.p4x.xyzw(228)
emit.p4x.yyzw(229)
emit.p4x.zyzw(230)
emit.p4x.wyzw(231)
emit.p4x.xzzw(232)
emit.p4x.yzzw(233)
emit.p4x.zzzw(234)
emit.p4x.wzzw(235)
emit.p4x.xwzw(236)
emit.p4x.ywzw(237)
emit.p4x.zwzw(238)
emit.p4x.wwzw(239)
emit.p4x.xxww(240)
emit.p4x.yxww(241)
emit.p4x.zxww(242)
emit.p4x.wxww(243)
emit.p4x.xyww(244)
emit.p4x.yyww(245)
emit.p4x.zyww(246)
emit.p4x.wyww(247)
emit.p4x.xzww(248)
emit.p4x.yzww(249)
emit.p4x.zzww(250)
emit.p4x.wzww(251)
emit.p4x.xwww(252)
emit.p4x.ywww(253)
emit.p4x.zwww(254)
emit.p4x.wwww(255)
emit.dupp
emit.dupp.x1(0)
emit.dupp.x2(0)
emit.dupp.x4(0)
emit.load
emit.load.z32
emit.load.z64
emit.load.z128
emit.load.i8
emit.load.i16
emit.load.i32
emit.load.i64
emit.load.i128
emit.store
emit.store.i8
emit.store.i16
emit.store.i32
emit.store.i64
emit.store.i128
emit.cmt
emit.cmt.u32
emit.and
emit.and.u32
emit.or
emit.or.u32
emit.xor
emit.xor.u32
emit.shl
emit.shl.u32
emit.shr
emit.shr.u32
emit.shr.i32
emit.neg
emit.neg.i32
emit.neg.i64
emit.neg.f32
emit.neg.f64
emit.neg.p4f
emit.neg.p2d
emit.add
emit.add.i32
emit.add.i64
emit.add.f32
emit.add.f64
emit.add.p4f
emit.add.p2d
emit.sub
emit.sub.i32
emit.sub.i64
emit.sub.f32
emit.sub.f64
emit.sub.p4f
emit.sub.p2d
emit.mul
emit.mul.u32
emit.mul.i32
emit.mul.i64
emit.mul.f32
emit.mul.f64
emit.mul.p4f
emit.mul.p2d
emit.div
emit.div.u32
emit.div.i32
emit.div.i64
emit.div.f32
emit.div.f64
emit.div.p4f
emit.div.p2d
emit.mod
emit.mod.u32
emit.mod.i32
emit.mod.i64
emit.mod.f32
emit.mod.f64
emit.ceq
emit.ceq.i32
emit.ceq.i64
emit.ceq.f32
emit.ceq.f64
emit.ceq.p4f
emit.ceq.p2d
emit.clt
emit.clt.u32
emit.clt.i32
emit.clt.i64
emit.clt.f32
emit.clt.f64
emit.cgt
emit.cgt.u32
emit.cgt.i32
emit.cgt.i64
emit.cgt.f32
emit.cgt.f64
emit.min
emit.min.p4f
emit.min.p2d
emit.max
emit.max.p4f
emit.max.p2d
Halt(Code: int32): void
CLOCKS_PER_SEC
RAND_MAX
raise(level: int32, message: string, inspect: variant, maxTrace: int32): void
raise
raise.error
raise.skip
raise.warn
raise.info
raise.debug
raise.verbose
raise.noTrace
raise.defTrace
tryExec(args: pointer, action(args: pointer): void): int32
memmgr(ptr: pointer, size: int32): pointer
memset(dest: pointer, value: int32, size: int32): pointer
memcpy(dest: pointer, src: pointer, size: int32): pointer
System
System.exit(code: int32): void
System.srand(seed: int32): void
System.rand(): int32
System.time(): int32
System.clock(): int32
System.millis(): int64
System.sleep(millis: int64): void
rand(min: int32, max: int32): int32
rand(min: float64, max: float64): float64
Math
Math.pi
Math.e
Math.ln2
Math.log2E
Math.ln10
Math.log10E
Math.phi
Math.sqrt2
Math.sqrtE
Math.sqrtPi
Math.sqrtPhi
Math.nan
Math.inf
Math.modf(x: float64, intPart: float64): float64
Math.isNan(x: float64): bool
Math.isNan(x: float32): bool
Math.isInf(x: float64): bool
Math.isInf(x: float32): bool
Math.isFinite(x: float64): bool
Math.isFinite(x: float32): bool
Math.abs(x: int32): int32
Math.abs(x: int64): int64
Math.abs(x: uint32): uint32
Math.abs(x: float32): float32
Math.abs(x: float64): float64
Math.sign(x: int32): int32
Math.sign(x: int64): int32
Math.sign(x: uint32): int32
Math.sign(x: float32): int32
Math.sign(x: float64): int32
Math.mod(x: float32, y: float32): float32
Math.floor(x: float64): float64
Math.floor(x: float32): float32
Math.ceil(x: float64): float64
Math.ceil(x: float32): float32
Math.round(x: float64): float64
Math.round(x: float32): float32
Math.max(a: int32, b: int32): int32
Math.max(a: int64, b: int64): int64
Math.max(a: uint32, b: uint32): uint32
Math.max(a: float32, b: float32): float32
Math.max(a: float64, b: float64): float64
Math.min(a: int32, b: int32): int32
Math.min(a: int64, b: int64): int64
Math.min(a: uint32, b: uint32): uint32
Math.min(a: float32, b: float32): float32
Math.min(a: float64, b: float64): float64
Math.clamp(t: int32, a: int32, b: int32): int32
Math.clamp(t: float32, a: float32, b: float32): float32
Math.clamp(t: float64, a: float64, b: float64): float64
Math.lerp(t: float32, a: float32, b: float32): float32
Math.lerp(t: float64, a: float64, b: float64): float64
Math.smooth(t: float32): float32
Math.smooth(t: float64): float64
Math.smooth(t: float32, a: float32, b: float32): float32
Math.smooth(t: float64, a: float64, b: float64): float64
Math.absMod(val: int32, mod: int32): int32
Math.absMod(val: float32, mod: float32): float32
Math.absMod(val: float64, mod: float64): float64
Math.nz(val1: float64, val2: float64): float64
Math.hypot(x: float64, y: float64): float64
Math.eval(x: float64, a0: float64, a1: float64): float64
Math.eval(x: float64, a0: float64, a1: float64, a2: float64): float64
Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64
Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64): float64
Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64): float64
Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64): float64
Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64): float64
Math.Min(data: float64[]): float64
Math.Max(data: float64[]): float64
Math.Sum(data: float64[]): float64
Math.Mean(data: float64[]): float64
Math.Cmp(a: float32, b: float32, eps: float32): int32
Math.Cmp(a: float64, b: float64, eps: float64): int32
Math.sincos(arg: float64, quad: int32): float64
Math.Sin(arg: float64): float64
Math.Cos(arg: float64): float64
Math.Tan(arg: float64): float64
Math.Sinh(x: float64): float64
Math.Cosh(x: float64): float64
Math.Asin(x: float64): float64
Math.Acos(x: float64): float64
Math.deg2rad(x: float64): float64
Math.rad2deg(x: float64): float64
Perlin
Perlin.B
Perlin.BM
Perlin.N
Perlin.NP
Perlin.NM
Perlin.p
Perlin.g3
Perlin.g2
Perlin.g1
Perlin.start
Perlin.init(): void
Perlin.setup(vec_i: float32, b0: int32, b1: int32, r0: float32, r1: float32): void
Perlin.smooth(t: float32): float32
Perlin.lerp(t: float32, a: float32, b: float32): float32
Perlin.Noise1f(x: float32): float32
Perlin.Noise2f(x: float32, y: float32): float32
Perlin.Noise3f(x: float32, y: float32, z: float32): float32
Perlin.Noise(x: float32): float32
Perlin.Noise(x: float32, y: float32): float32
Perlin.Noise(x: float32, y: float32, z: float32): float32
Date
Date.days
Date.MillisPerSecond
Date.MillisPerMinute
Date.MillisPerHour
Date.MillisPerDay
Date.MillisPerWeek
Date.DaysPerYear
Date.DaysPer4Years
Date.DaysPer100Years
Date.DaysPer400Years
Date.HoursPerDay
Date.MinutesPerDay
Date.SecondsPerDay
Date.Duration
Date.Duration.value
Date.Duration.millis(value: int64): int64
Date.Duration.seconds(value: int64): int64
Date.Duration.minutes(value: int64): int64
Date.Duration.hours(value: int64): int64
Date.Duration.days(value: int64): int64
Date.Duration.weeks(value: int64): int64
Date.Duration(value: int64): Duration
Date.DaysToMonth365
Date.DaysToMonth366
Date.IsLeapYear(year: int32): bool
Date.ToDays(year: int32, month: int32, day: int32): int64
Date.Parts
Date.Parts.year
Date.Parts.month
Date.Parts.dayOfYear
Date.Parts.dayOfMonth
Date.Parts.dayOfWeek
Date.Parts(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32): Parts
Date.Parts2
Date.Parts2.year
Date.Parts2.month
Date.Parts2.dayOfYear
Date.Parts2.dayOfMonth
Date.Parts2.dayOfWeek
Date.Parts2(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32): Parts2
Date.ToParts(n: int32): Parts
Date.ToParts(days: int64, year: int32, month: int32, day: int32): void
Date.Parts(n: int32): Parts
Date(days: int64): Date
Date(year: int32, month: int32, day: int32): Date
DateFromTime(time: int32): Date
importstd
importstd.print
importstd.bits2
importstd.complex
importstd.vec2d
importstd.vec4f
importstd.mat4f
importstd.strUtils
variant(type: typename, value: pointer): variant
Lo32(a: int64): int32
Hi32(a: int64): int32
Lo16(a: int32): int32
Hi16(a: int32): int32
Lo8(a: int32): int32
Hi8(a: int32): int32
bitsr(x: uint32): int32
bitsf(x: uint32): int32
bithi(x: uint32): int32
bitlo(x: uint32): int32
bitcnt(x: uint32): int32
bitswp(x: uint32): int32
Complex
Complex.re
Complex.im
Complex(re: float64, im: float64): Complex
Complex(re: float64): Complex
neg(a: Complex): Complex
add(a: Complex, b: Complex): Complex
add(a: Complex, b: float64): Complex
add(a: float64, b: Complex): Complex
sub(a: Complex, b: Complex): Complex
sub(a: Complex, b: float64): Complex
sub(a: float64, b: Complex): Complex
mul(a: Complex, b: Complex): Complex
mul(a: Complex, b: float64): Complex
mul(a: float64, b: Complex): Complex
div(a: Complex, b: Complex): Complex
abs(a: Complex): float64
arg(a: Complex): float64
re(a: Complex): float64
im(a: Complex): float64
inv(a: Complex): Complex
conj(a: Complex): Complex
exp(a: Complex): Complex
log(a: Complex): Complex
pow(a: Complex, b: Complex): Complex
pow(a: Complex, b: float64): Complex
sin(a: Complex): Complex
cos(a: Complex): Complex
tan(a: Complex): Complex
vec2d
vec2d.x
vec2d.y
vec2d(x: float64, y: float64): vec2d
add(x: vec2d, y: vec2d): vec2d
sub(x: vec2d, y: vec2d): vec2d
mul(x: vec2d, y: vec2d): vec2d
div(x: vec2d, y: vec2d): vec2d
min(x: vec2d, y: vec2d): vec2d
max(x: vec2d, y: vec2d): vec2d
ceq(x: vec2d, y: vec2d): bool
dot(x: vec2d, y: vec2d): float64
vec4f
vec4f.x
vec4f.y
vec4f.z
vec4f.w
vec4f(x: float32, y: float32, z: float32, w: float32): vec4f
vec4f(x: float32, y: float32, z: float32): vec4f
vec4f(val: float32): vec4f
neg(rhs: vec4f): vec4f
add(lhs: vec4f, rhs: vec4f): vec4f
add(a: float32, b: vec4f): vec4f
add(a: vec4f, b: float32): vec4f
sub(lhs: vec4f, rhs: vec4f): vec4f
sub(a: float32, b: vec4f): vec4f
sub(a: vec4f, b: float32): vec4f
mul(lhs: vec4f, rhs: vec4f): vec4f
mul(a: float32, b: vec4f): vec4f
mul(a: vec4f, b: float32): vec4f
div(lhs: vec4f, rhs: vec4f): vec4f
div(a: float32, b: vec4f): vec4f
div(a: vec4f, b: float32): vec4f
min(x: vec4f, y: vec4f): vec4f
max(x: vec4f, y: vec4f): vec4f
ceq(x: vec4f, y: vec4f): bool
mad(a: vec4f, b: vec4f, c: vec4f): vec4f
dp3(lhs: vec4f, rhs: vec4f): float32
dp4(lhs: vec4f, rhs: vec4f): float32
dph(lhs: vec4f, rhs: vec4f): float32
cross(a: vec4f, b: vec4f): vec4f
lerp(t: float32, lhs: vec4f, rhs: vec4f): vec4f
len(v: vec4f): float64
eval(v: vec4f, x: float32): float32
normalize(a: vec4f): vec4f
float32(vec: vec4f): float32
mat4f
mat4f.x
mat4f.y
mat4f.z
mat4f.w
mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f
mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64): mat4f
dp3(mat: mat4f, vec: vec4f): vec4f
dp4(mat: mat4f, vec: vec4f): vec4f
dph(mat: mat4f, vec: vec4f): vec4f
mul(lhs: mat4f, rhs: mat4f): mat4f
transpose(mat: mat4f): mat4f
transpose2(mat: mat4f): void
debug(message: string, inspect: variant): void
debug(message: string): void
debug(inspect: variant): void
trace(message: string, inspect: variant): void
trace(message: string): void
trace(inspect: variant): void
abort(message: string, inspect: variant): void
abort(message: string): void
abort(): void
assert(condition: bool, message: string, inspect: variant): void
assert(condition: bool, message: string): void
assert(condition: bool): void
strlen(str: string): int32
umin(a: uint32, b: uint32): uint32
strchr(str: string, chr: int32): int32
strchr(str: string, chr: int32, max: int32): int32
strrchr(str: string, chr: int32): int32
strrchr(str: string, chr: int32, max: int32): int32
compare(a: string, b: string): int32
equals(a: string, b: string): bool
FormatFlags
FormatFlags.sgnChr
FormatFlags.padChr
FormatFlags.fmtChr
FormatFlags.padLen
FormatFlags.maxLen
FormatFlags(sgnChr: char, padChr: char, fmtChr: char, padLen: int32, maxLen: int32): FormatFlags
format(output: char[], pos: int32, flags: FormatFlags, rad: int32, value: uint32): int32
format(output: char[], format: string, value: int32): int32
format(output: char[], format: string, value: Date): void
string(arr: char[]): string
variant(str: string): variant
realloc(ptr: pointer, size: int32): pointer
malloc(size: int32): pointer
free(ptr: pointer): pointer
sizeof(type: typename): int32
File
File.Open(path: char[]): File
File.Create(path: char[]): File
File.Append(path: char[]): File
File.Peek(file: File): int32
File.Read(file: File): int32
File.Read(file: File, buff: uint8[]): int32
File.ReadLine(file: File, buff: uint8[]): int32
File.Write(file: File, byte: uint8): int32
File.Write(file: File, buff: uint8[]): int32
File.Flush(file: File): void
File.Close(file: File): void
File.StdIn
File.StdOut
File.StdErr
File.DbgOut
gl
gl.DepthTest
gl.LineSmooth
gl.CullFace
gl.Front
gl.Back
gl.FrontAndBack
gl.Flat
gl.Smooth
gl.ColorBuffer
gl.DepthBuffer
gl.AccumBuffer
gl.StencilBuffer
gl.Modelview
gl.Projection
gl.Texture
gl.Color
gl.Points
gl.Lines
gl.LineStrip
gl.LineLoop
gl.Triangles
gl.TriangleStrip
gl.TriangleFan
gl.Quads
gl.QuadStrip
gl.Polygon
gl.Viewport(x: int32, y: int32, width: int32, height: int32): void
gl.Enable(mode: int32): void
gl.Disable(mode: int32): void
gl.ShadeModel(mode: int32): void
gl.CullFace(mode: int32): void
gl.Clear(Buffer: int32): void
gl.Begin(Primitive: int32): void
gl.End(): void
gl.Flush(): void
gl.Vertex(x: float32, y: float32, z: float32, w: float32): void
gl.Normal(x: float32, y: float32, z: float32): void
gl.Color(r: float32, g: float32, b: float32, a: float32): void
gl.MatrixMode(mode: int32): void
gl.LoadMatrix(x: float64[16]): void
gl.MultMatrix(x: float64[16]): void
gl.LoadIdentity(): void
gl.PushMatrix(): void
gl.PopMatrix(): void
gl.Rotate(angle: float64, x: float64, y: float64, z: float64): void
gl.Scale(angle: float64, x: float64, y: float64, z: float64): void
gl.Translate(angle: float64, x: float64, y: float64, z: float64): void
gl.Frustum(left: float64, right: float64, bottom: float64, top: float64, znear: float64, zfar: float64): void
gl.Ortho(left: float64, right: float64, bottom: float64, top: float64, znear: float64, zfar: float64): void
gl.Vertex(x: float32, y: float32, z: float32): void
gl.Color(r: float32, g: float32, b: float32): void
glu
glu.LookAt(eyeX: float64, eyeY: float64, eyeZ: float64, centerX: float64, centerY: float64, centerZ: float64, upX: float64, upY: float64, upZ: float64): void
glut
glut.OnDisplay(callback(): void): void
glut.OnReshape(callback(x: int32, y: int32): void): void
glut.OnMouse(callback(btn: int32, x: int32, y: int32): void): void
glut.OnMotion(callback(btn: int32, x: int32, y: int32): void): void
glut.OnKeyboard(callback(btn: int32): void): void
glut.PostRedisplay(): void
glut.Reshape(width: int32, height: int32): void
glut.MainLoop(width: int32, height: int32): void
glut.LeaveMainLoop(): void
<init>
