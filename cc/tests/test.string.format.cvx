//~ format integer numbers

// convert number to string
FormatFlags readFlags(string format, int &spos) {
	int chr = format[spos];
	if (chr == '%') {
		chr = format[spos += 1];
		if (chr == '%') {
			return FormatFlags(0, 0, 0, 0, 0);
		}

		int sgnChr = 0;
		if (chr == '-' || chr == '+') {
			sgnChr = chr;
			chr = format[spos += 1];
		}

		int padChr = ' ';
		if (chr == '0') {
			padChr = chr;
			chr = format[spos += 1];
		}

		int padLen = 0;
		for (;chr >= '0' && chr <= '9';) {
			padLen = padLen * 10 + chr - '0';
			chr = format[spos += 1];
		}

		int precision = 0;
		if (chr == '.') {
			chr = format[spos += 1];
			for ( ;chr >= '0' && chr <= '9'; ) {
				precision = precision * 10 + chr - '0';
				chr = format[spos += 1];
			}
		}

		return FormatFlags(10, sgnChr, padChr, padLen, precision);
	}
	return FormatFlags(10, 0, 0, 0, 0);
}

/**
 * Format integer to text
 * @param output write output to this buffer
 * @param format format string
 *  	%b format as binary
 *  	%o format as octal
 *  	%d format as decimal
 *  	%x format as hexadecimal
 *  	%i format as custom radix
 *  	null defaults to: "%d"
 * @param value date to format
 */
int format2(char output[], string format, int value) {
	int pos = 0;
	if (format == null) {
		format = "%d";
	}
	int spos = 0;
	for (char chr; chr = format[spos]; spos += 1) {
		if (chr == '%') {
			FormatFlags flags = readFlags(format, &spos);
			chr = format[spos];

			int &radix = flags.radix;
			if (chr == 'b') {
				radix = 2;
			}
			else if (chr == 'o') {
				radix = 8;
			}
			else if (chr == 'd') {
				radix = 10;
			}
			else if (chr == 'x') {
				radix = 16;
			}
			else if (chr == 'i') {
				assert(flags.precision > 1, "radix must be at least 2");
				radix = flags.precision;
			}
			else {
				abort("invalid format character", variant(&chr));
			}

			pos = format(output, pos, &flags, value);
		}
		else if (pos < output.length) {
			output[pos] = chr;
			pos += 1;
		}
	}

	if (pos >= output.length) {
		pos = output.length - 1;
	}
	output[pos] = 0;
	return pos;
}


char buff[512];
string str = string(buff);
format2(buff, "value: %d = 0x%08x = 0b%032b = [%.5i]5", 0x20928374);
assert(equals(str, "value: 546472820 = 0x20928374 = 0b00100000100100101000001101110100 = [2104344112240]5"));

//~ format(buff, "%0d", 0);
//~ assert(equals("0", str));
//~ debug(string(buff));
