// iterating ...struct Range {	int min;	int max;	struct Iterator {		int Value;		int max;	}}// make range iterable using the Range.Iterator structure.define iterator(Range &&r) = Range.Iterator(r.min - 1, r.max);	// start at min - 1, and end at maxRange.Iterator it1 = iterator(Range(10, 20));bool next(Range.Iterator &it) {	result = it.Value < it.max;	if (result != false) {		it.Value += 1;	}	return result;}bool next(Range.Iterator &it, int &val) {	result = it.Value < it.max;	if (result != false) {		it.Value += 1;		val = it.Value;	}	return result;}// iterate using: next(Range.Iterator &it)for (Range.Iterator it : Range(10, 13)) {	//~ print("iterator value: %d\n", it.Value);	debug("iterating", variant(&it));}// iterate using: next(Range.Iterator &it, int &val)for (int it : Range(10, 13)) {	//~ print("iterator value: %d\n", it);	debug("iterating", variant(&it));}//~ Iterator expansion://~    for (int it : Range(10, 13)) { ... } //~ => for ({int it; Range.Iterator .it = iterator(range(10, 13))}; next(.it, &it); ) { ... }