Lexical elements

	Comments:
		line comments: //
		block comments: /* ... */ and nestable /+ ... +/

	Tokens:
		Identifiers: variable or type names.

			identifier = (letter)+

		Keywords:
			break, const, continue, define, else, emit, enum, for,
			if, module, operator, parallel, return, static, struct

		Operators and Delimiters:
			+ - * / % . ,
			~ & | ^ >> <<
			&& ||
			! == != < <= > >=
			= := += -= *= /= %= &= |= ^= >>= <<=
			( ) [ ] { } ? : ;

		Integer and Floating-point literals:
			bin_lit = '0'[bB][01]+
			oct_lit = '0'[oO][0-7]+
			hex_lit = '0'[xX][0-9a-fA-F]+
			decimal_lit = [1-9][0-9]*
			floating_lit = decimal_lit (('.'[0-9]*) | ([eE]([+-]?)[0-9]+))

		Character and String literals:
			char_lit = \'[^\'\n]*
			string_lit = \"[^\"\n]*

Type system:

	Basic data types:

		void

		bool

		int8
		int16
		int32
		int64

		uint8
		uint16
		uint32

		float32
		float64

		pointer

	Derived data types: [TODO]
		slice: struct {const pointer data; const int length;}
		variant: struct {const pointer data; const typename type;}
		delegate: struct {const pointer function; const pointer data;}

	User defined types:
		array
		struct
		function
		delegate
		... ?

	Constants and aliases:
		int: int32
		long: int64
		float: float32
		double: float64

		var: variant

		char: uint8 / uint16

		string: char[]		// !slice
		array: variant[]	// !slice

		true: emit(bool, i32(0))
		false: emit(bool, i32(1))
		null: emit(pointer, i32(0)) ? emit(pointer, i64(0))

	Initialization:
		when declaring a struct:
			an initializer will be auto generated with all members, if packing matches stack padding.
			an initializer from pointer, witch is a reference type of the struct.
				ex: 

	variant operators:
	variant lookup(variant obj, string key) {
		//~ result = variant(null, null);	// undefined
		if (obj.class != variant) {
			type member = reflection.lookup(obj.class, -1, key, null);
			if (member != null) {
				result = variant(member, obj.data + t.offset);
			}
		}
	}
	operator (var v)[string key] = lookup(v, key);
	operator (var v)[string key] = lookup(v, key);
