//~ ./main -x "3 + 3 -4 + -2;"

/* Emit Test K
/+	Basic emits
flt32 res1 = emit(f32.div, f32(2), f32(math.pi));	// ok
flt64 res2 = emit(f64.neg, f64(math.pi));			// ok
flt32 res3 = emit(void, f32(math.pi));				// ok
int64 res4 = emit(void, f32(math.pi));				// ok

emit(void, f64(math.pi));
int32 i32 = emit(void);
int64 i64 = emit(void);
flt32 f32 = emit(void);
flt64 f64 = emit(void);

//~ +/
/+	vector 4f32 test
emit(void, f32(11), f32(12), f32(13), f32(14));
emit(void, f32(21), f32(22), f32(23), f32(24));
f32x4 vadd = emit(v4f.add);
//~ flt32 vdot = emit(v4f.dp4);
//~ f64x2 res5 = emit(void, f64(1), f64(2));
//~ +/
/+	Complex mul
define a_re = 3.;
define a_im = 4.;
define b_re = 2.;
define b_im = 5.;

//~ flt64 re = a_re * b_re - a_im * b_im;
//~ flt64 im = a_re * b_im + a_im * b_re;

emit(v2d.mul, f64(b_im), f64(b_re), f64(a_im), f64(a_re));		// a.re * b.re, a.im * b.im
flt64 re = emit(f64.sub);										//>re = a.re * b.re - a.im * b.im
emit(v2d.mul, f64(b_re), f64(b_im), f64(a_im), f64(a_re));		// a.re * b.im, a.im * b.re
flt64 im = emit(f64.add);										//>im = a.re * b.im + a.im * b.re
//~ +/

//~ */
/* Libc Test K
int32 var = 0x00001081;
int32 res = -1;
/+	// public static int bsr(int i)
int32 lib = bsr(var);
if (var) {
	uns32 ans = 0;
	uns32 x = var;
	if (x & 0xffff0000) { ans += 16; x >>= 16; }
	if (x & 0x0000ff00) { ans +=  8; x >>=  8; }
	if (x & 0x000000f0) { ans +=  4; x >>=  4; }
	if (x & 0x0000000c) { ans +=  2; x >>=  2; }
	if (x & 0x00000002) { ans +=  1; }
	res = ans;
}
//~+/
/+	// public static int hi1(int i)
int32 lib = bhi(var);
if (var) {
	uns32 u = var;
	u |= u >> 1;
	u |= u >> 2;
	u |= u >> 4;
	u |= u >> 8;
	u |= u >> 16;
	res = u - (u >> 1);
}
//~+/
/+	// public static int lo1(int i)
	res = var & -var;
//~+/
/+	// public static int bitswap(uns i)
int32 lib = swp(var);
if (var) {
	uns32 x = var;
	x = ((x >> 1) & 0x55555555) | ((x & 0x55555555) << 1);
	x = ((x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);
	x = ((x >> 4) & 0x0F0F0F0F) | ((x & 0x0F0F0F0F) << 4);
	x = ((x >> 8) & 0x00FF00FF) | ((x & 0x00FF00FF) << 8);
	res = (x >> 16) | (x << 16);
}
//~+/
//~*/
/* Type Test X
/+	alias
define myint uns16;
int64 min = myint.min;
int64 max = myint.max;
int64 msk = myint.mask;
int64 bts = myint.bits;
int64 size = myint.size;
//~ +/
/+X	struct
struct vec4d {
	struct vec3d {
		float x;
		float y;
		float z;
	};
	float x;
	float y;
	float z;
	float w;
}

define v4 vec4d;
define v3 vec4d.vec3d;

v3 v;
//~ v.x = 0;
//~ v.y = 1;
//~ v.z = 2;
//~ v = vec4d(1,2,3,4);

struct s1 {
struct s2 {
struct s3 {
struct s4 {
struct s5 {
struct s6 {
struct s7 {
	int a;
};
};
};
};
};
};
};

// +/
/+X	function
define Sqr(double a) = a * a;	// macro(tree)
double sqr(double a) = a * a;	// inline
int lerp(double a, double b, double t) {
	return = a + t * (b - a);
}
bool isNan(double a) {
	return a != a;
}
// +/
/+ constants
define ftype flt64;
ftype b = 0.;
ftype a = -0.;
ftype b = +0.;
ftype c = math.nan;
ftype w = a == b;
ftype x = c == c;

float v = 1 - 2 * math.pi;
int32 xxx = float(int(3));
flt64 f = 1e310;
flt32 f32 = math.inf;
flt64 f64 = math.inf;
flt64 f642 = f32;
flt32 f322 = f64;
// +/
//~*/

/* factorial
//~ define a flt64;
define n = 5;
flt64 res = 1;
for (int32 i = 1; i <= n; i += 1)
	res *= i;

// */

//~ double res = sqrt(2.0);

//~ define abs(a) = a < 0 ? -a : a;

define sqr(a) = a * a;

double a = sqr(4.3);

/* calc e
define eps = 1e-25;
double res = 1;
double tmp = 1;
int i;
for (i = 1; tmp > eps; i += 1) {
	res += tmp /= i;
}
// */

/* count a lot
int32 a = 0x04f;
int32 b = 0x04f;
int32 c = 0x04f;
define n = 10000000;
for (uns32 i = 1; i < n; i += 1) {
	a += float(i);
	b += double(i);
	c += flt32(i);
	a += float(n);
	b += double(n);
	c += int64(n);
}
// */

/* test if
int i = 3;
float a = 4;
if (i) {
	a = 0;
	if (i == 1) a = 1.1; else a = 2.1;
	if (i == 1) a = 1.2; else ;
	if (i == 1) ;else a = 2.2;
	if (i == 1) a = 3;

	else if (i == 2) a = 1.42;
	else if (i == 3) a = 1.43;
	else if (i == 4) a = 1.44;
	else if (i == 5) a = 1.45;
	else if (i == 6) a = 1.46;
}
else {
	if (a <= 5) {
		if (a < 2.5) i = 1;
		else i = 2;
	}
	else {
		if (a < 7.5) i = 3;
		else i = 4;
	}
}

// */
/* test if 'when nothing happens'
if (1)
	{{{{{;;;};}};;;}{;;;}}
else
	{{;};;{;}}
//*/
/* test if: isNan(val)
flt64 val = 1;//math.nan;
bool isNan = val != val;
// */

/* libc 3D
define division = 2;
define closedS = 0;
define closedT = 0;
define hasTex = 1;
//~ define hasNrm = 1;

define Pi = 3.141592653589793238462643;

enum {
	WorkingOn;
	sphere;
	tours;
	cone;

	apple;
	tear;
	wave;
	Elliptic_Torus;
}

flt32 x;
flt32 y;
flt32 z;

define draw = Elliptic_Torus;

if (draw == WorkingOn) {
	flt32 s = getArg('s', 0, 1);
	flt32 t = getArg('t', 0, 1);
	x = s;
	y = t;
	z = (s - t) * (s - t);
}
if (draw == sphere) {
	flt32 s = getArg('s', 0, Pi);
	flt32 t = getArg('t', 0, 2 * Pi);
	x = sin(s) * cos(t);
	y = sin(s) * sin(t);
	z = cos(s);
}
if (draw == tours) {
	define R = 2;
	define r = 1;
	flt32 s = getArg('s', 0, 2 * Pi);
	flt32 t = getArg('t', 0, 2 * Pi);
	x = (R + r * sin(s)) * cos(t);
	y = (R + r * sin(s)) * sin(t);
	z = r * cos(s);
}
if (draw == cone) {
	define l = 3;
	flt32 s = getArg('s', 0, 1);
	flt32 t = getArg('t', 0, 2 * Pi);
	x = s * sin(t);
	y = s * cos(t);
	z = l * s;
}

if (draw == Elliptic_Torus) {
	define c = 1.5;
	flt32 u = getArg('s', -Pi, +Pi);
	flt32 v = getArg('t', -Pi, +Pi);
	x = (c + cos(v)) * cos(u);
	y = (c + cos(v)) * sin(u);
	z = sin(v) + cos(v);
}

if (draw == apple) {
	flt32 s = getArg('s', 0, 2 * Pi);
	flt32 t = getArg('t', -Pi, +Pi);
	x = cos(s) * (4 + 3.8 * cos(t));
	y = sin(s) * (4 + 3.8 * cos(t));
	z = (cos(t) + sin(t) - 1) * (1 + sin(t)) * log(1 - Pi * t / 10) + 7.5 * sin(t);
}
if (draw == tear) {
	flt32 s = getArg('s', 0, Pi);
	flt32 t = getArg('t', 0, 2 * Pi);
	x = .5 * (1 - cos(s)) * sin(s) * cos(t);
	y = .5 * (1 - cos(s)) * sin(s) * sin(t);
	z = cos(s);
}
if (draw == wave) {
	define H = 20.;
	define h = 10.;

	flt32 s = getArg('s', -H, +H);
	flt32 t = getArg('t', -H, +H);
	flt32 sst = sqrt(s*s + t*t);
	if (sst == 0) sst = 1.;
	x = s / H;
	y = t / H;
	z = h / H * sin(sst) / sst;
}

setPos(x, y, z);
//~ setNrm(x, y, z);

// */

/* RayTrace
define rgb int32;
define qual = 1;
define width = 320 << qual;
define height = 240 << qual;

rgb cBuff[width * height];
int zBuff[width * height];

/+
for (int i = 0; i < height; i += 1)
	for (int j = 0; j < width; j += 1)
		cBuff[i * width + j] := i ^ j;
// +/

class Light {
	vector	ambi;		// Ambient
	vector	diff;		// Diffuse
	vector	spec;		// Specular
	vector	attn;		// Attenuation
	vector	pos;		// position
	vector	dir;		// direction
	scalar	sCos;
	scalar	sExp;
	short	attr;		// typeof(on/off)
	vec4f lit(out ambi, out diff, out spec, vec4f pos, vec4f nrm, vec4f eye, Material mtl) {
		vec4f tmp, color = mtl.emis;

		if (attr & L_on) {
			vecptr D = pos - this.pos;	// distance
			vecptr R, L = dir;			// (L) lightDir
			scalar dotp, attn = 1, spot = 1;

			if (vec4f.dp3(dir, dir)) {			// directional or spot light
				if (sCos) {						// Spot Light
					scalar spot = L.dp3(D.nrm());
					attn = 0;
					if (spot > cos(toRad(sCos))) {
						spot **= sExp;
					}
				}
			}
			else {
				L = vec4f.nrm(D);
			}// * /

			attn = spot / vecpev(this.attn, D.len());

			color += ambi = this.ambi * mtl.ambi * attn;

			if ((dotp = -vecdp3(N, L)) > 0) {
				color += diff = this.diff * mtl.diff * (attn * dotp);

				R = vecnrm(vecrfl(V - eye, N));
				if ((dotp = -vecdp3(R, L)) > 0) {
					color += spec = this.spec * mtl.spec * (attn * (dotp ** spow));
				}
			}
		}
		return color;
		col[i].rgb = vecrgb(&color);
	}
}

class Material {	// material
	vec4f emis(0, 0, 0, 1);		// Emissive
	vec4f ambi(0, 0, 0, 1);		// Ambient
	vec4f diff(0, 0, 0, 1);		// Diffuse
	vec4f spec(0, 0, 0, 1);		// Specular
	flt32 spow(1);				// Shin...
	this (vec4f ambi, vec4f diff, vec4f spec, flt32 spow) {
		...
	}

	static Material Brass = Material(
		f32x4(0.329410, 0.223529, 0.027451, 1),
		f32x4(0.780392, 0.568627, 0.113725, 1),
		f32x4(0.992157, 0.941176, 0.807843, 1),
		flt32(27.8974)
	);

	static Material Bronze = Material(
		f32x4(0.2125, 0.1275, 0.054, 1.0),
		f32x4(0.714, 0.4284, 0.18144, 1.0), 
		f32x4(0.393548, 0.271906, 0.166721),
		flt32(25.6));

	static Material Chrome = Material(
		f32x4(0.25, 0.25, 0.25, 1.0),
		f32x4(0.4, 0.4, 0.4, 1.0),
		f32x4(0.774597, 0.774597, 0.774597, 1.0),
		flt32(76.8));

	static Material Silver = Material(
		f32x4(0.19225, 0.19225, 0.19225, 1.0),
		f32x4(0.50754, 0.50754, 0.50754, 1.0),
		f32x4(0.508273, 0.508273, 0.508273, 1.0),
		flt32(51.2));

	static Material Gold = Material(
		f32x4(0.24725, 0.1995, 0.0745, 1.0),
		f32x4(0.75164, 0.60648, 0.22648, 1.0),
		f32x4(0.628281, 0.555802, 0.366065, 1.0),
		flt32(51.2));

	static Material Jade = Material(
		f32x4(0.135,0.2225,0.1575,0.95),
		f32x4(0.54, 0.89, 0.63, 0.95),
		f32x4(0.316228, 0.316228, 0.316228, 0.95),
		flt32(12.8));

	static Material Ruby = Material(
		f32x4(0.1745,0.01175 ,0.01175,0.55),
		f32x4(0.61424,0.04136, 0.04136,0.55),
		f32x4(0.727811, 0.626959, 0.626959,0.55),
		flt32(76.8));
};

lights[] = {
	Light(...),
	new lghtsrc(...),
};

scene[] = {
	new prim(new sphere(...), mtl.gold),
	new prim(new tours(...), mtl.gold),
	new mesh(mtl.gold),
};

struct hitinfo {
	vec4f pos;
	vec4f nrm;
	flt32 len;
}

vec4f traceRay(const vec4f dir, int depth) {
	vec4f pos, N, col;
	flt32 d = math.inf;
	prim p = null;
	hitinfo hit;

	for (prim ps : scene) {
		if (ps.hit(hit, dir)) {
			if (hit.len > d) {
				pos = hit.pos;
				N = hit.nrm;
				d = hit.len;
				p = ps;
			}
		}
	}
	if (p != null) {
		for (Light l : lights) {
			bool inShadow = false;
			vec4f p2l = nrm(p.pos - l.pos);		// direction to light
			for (prim ps : scene) {
				if (ps.hit(hit, dir)) {
					inShadow = true;
				}
			}
			if (!inShadow) {
				col = p.mtl.lit(l, N, pos, vec4f(0, 0, 1));
			}
		}
		if (depth > 0 && p.mtl.reflect) {
			col += traceRay(rfl(nrm, pos), depth - 1);
		}
		if (depth > 0 && p.mtl.refract) {
			col += traceRay(rfr(nrm, pos), depth - 1);
		}
	}
	return col;
}

main() {
	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			flt32 s = x - width / 2.;
			flt32 t = y - height / 2.;
			vec4f dir = vec4f(s, t, 100, 0);
			cBuff[x][y] = traceRay(dir.nrm());
		}
	}
	bmp.save("raytr1.bmp", cBuff, width, height, 24);
}

class lights {
	Light[] l;
	uns32 it;

	Light first() {return l[it = 0];}
	Light next() {return l[it = 0];}
	bool has() {return it < l.length;}
}

for (Light l : lights) => for (Light l = lights.first(); lights.has(); l = lights.next())
//~ for (Light l : lights) => for (Light l = lights.first(); lights.first(); l = lights.next())


//~ */
