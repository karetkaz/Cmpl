// TODO: small optimization

/+ Optimize stack deallocations
{
	int a[1<<10];
	{
		int a[2<<10];
		{
			int a[3<<10];
			{
				int a[4<<10];
				{
					int a[5<<10];
					{
						int a[6<<10];
						a[0] = 6;
					}
					a[0] = 5;
				}
				//~ a[0] = 4;
			}
			//~ a[0] = 3;
		}
		a[0] = 2;
	}
	//~ a[0] = 1;
}// +/

/+ Optimize stack allocation
{
	string a = "a";
	print(a);
}

// |init(ro: 34576, ss: 0, sm: 2, pc: 34576, px: 34591) {
// |todo.Optimize.cvx:30: string a = 'a'
// |	1f da 59 00 00             load.ref 59da
// |todo.Optimize.cvx:31: print(a);
// |	12 00                      dup.x1 sp(0)
// |	09 1b 00 00                libc(27): print(string val): void
// |	10 fc ff ff                spc -4
//! dup.x1 sp(0) and spc -4 can be removed
// |}
//~ +/

/+ Optimize returning void
void testRetVoid0() {
}

void testRetVoid1() {
	return;
}

void testRetVoid2() {
	return result;
}

void testRetVoid3() {
	return void(0);
}

void testRetVoid4() {
	return testRetVoid0();
}

void testRetVoid5() {
	return void(sin(3.14/3));
}

long testRetLong0() {
	return 9;
}

// |void testRetVoid1(void) [@008d61: 2] {
// |	.local void testRetVoid1.result [@000000, size:0, cast:.err]
// |	.local void [@000000, size:0, cast:.def]
// |todo.Optimize.cvx:51: return
// |	03                         ret
// do not generate multiple returns.
// |	03                         ret
// |}
//~ +/

/+ add to System ...
enum Arch {
	arm
	?armf
	i386
	x86_64 | amd64
}

enum Os: string {
	Windows = "Windows";
	Linux = "Linux";
	Mac = "Mac";
}

Arch arch = Arch.?
char name[] = "Windows"|"Linux"|"Mac"|"Unknown"

boolean bigEndian = false;

//~ +/

/+ ? Templates ?
static struct Array(typename Type) {
	int bSearch(Type array[], Type element) {
		...
	}
	int indexOf(Type array[], Type element) {
		...
	}
	...
	operator (Type array[]).bSearch(Type element) = bSearch;
	operator (Type array[]).indexOf(Type element) = indexOf;
	/+ then using like:
		using Array(int);

		using (Array(int)) {
			int array[200] = ...;
			int x = array.indexOf(30);
		}
	
	+/
}
//~ +/

/+ initialization (type and variable)

//~ int a1 = int(0);
//~ int a2 = int{0};

//~ typename strty = string;
//~ typename complex = Complex;
//~ Complex c1 = Complex(10, 20);
//~ Complex c2 = Complex{re: 10, im:20};

struct Person {
	LastName: string,
	FirstName: string,
	BirthYear: int(1970);
	Jobs: string[] = null,
	next: Person& = null,
	Address: struct {
		Type: enum {Home, Work, Other}
		PostOfficeBox: String;
		StreetAddress: String;
		ZipCode: String;
		City: String;
		State: String;
		Country: String;
	};
	Address2: struct& {
		Type: enum {Home, Work, Other}
		PostOfficeBox: String;
		StreetAddress: String;
		ZipCode: String;
		City: String;
		State: String;
		Country: String;
	} = null;
	Phone: struct[] {
		Type: enum {Mobile, Home, Work, Fax, Other} = Other;
		Value: String;
	} = null,
	Mail: struct[] {
		Type: enum {Home, Work, Other} = Other;
		value: String = "";
	} = null,
	Dates: struct[] {
		type: enum {Other, BirthDay, Aniversary}
		value: String;
	} = [],
	Gender: enum {Male, Female, NotDefined} = NotDefined;
};

Person person = {
	LastName: "Last";
	FirstName: "First";
	Address: {
		Type: Home;
		Value: "12345678";
	};
	Phone: [{
		Type: Mobile;
		Value: "12345678";
	}, {
		Type: Home;
		Value: "23456789";
	}];
	Gender: Male;
};
//~ +/

/+ initialization (type and variable): Ui
struct Rect {
	int top = 0;
	int right = 0;
	int bottom = 0;
	int left = 0;
}
struct Anchor {
	enum Style {
		Fill;
		FillTop;
		FillRight;
		FillBottom;
		FillLeft;

		Center;
		CenterTop;
		CenterRight;
		CenterBottom;
		CenterLeft;
	};

	int &top = null;
	int &bottom = null;
	bool centerHorizontal = false;	// center / fill

	int &left = null;
	int &right = null;
	bool centerVertical = false;	// center / fill

	static Anchor dock(Style dock, Rect r, int **pin) {
		result.top = r.top;
		result.bottom = r.bottom;
		result.centerHorizontal = true;

		result.left = r.left;
		result.right = r.right;
		result.centerVertical = true;

		switch (dock) {

			case Fill:
				result.centerHorizontal = false;
				result.centerVertical = false;
			case Center:
				break;

			case FillTop:
				result.centerHorizontal = false;
			case CenterTop:
				result.bottom = pin;
				break;

			case FillRight:
				result.centerVertical = false;
			case CenterRight:
				result.left = pin;
				break;

			case FillBottom:
				result.centerHorizontal = false;
			case CenterBottom:
				result.top = pin;
				break;

			case FillLeft:
				result.centerVertical = false;
			case CenterLeft:
				result.right = pin;
				break;
		}
	}
}
struct Font {...}

struct View {
	struct Style {
		Ancor anchor = {};
		Rect margin = {};
		Rect padding = {	// default padding is 4
			top: 4;
			right: 4;
			bottom: 4;
			left: 4;
		};
		rgb color = rgb(127);	// grey
		int radius = 0;
		//~ ? border;
		int width = 25;
		int height = 25;
	}

	Style style;
	Rect position;	// calc by the layout

	define width = style.width;
	define height = style.height;

	bool enabled;
	bool focusable;
	View children[];
}

//~ struct List: View {...}
//~ struct Grid: View {...}
struct Text: View {...}
struct Label: View {...}
struct Image: View {...}
struct Check: View {...}
struct Input: View {...}	// single line, multi line, html
struct Select: View {...}	// ComboBox
struct Slider: View {...}

//~ struct Page: View {...}
struct Window: View {...}
struct Button: View {
	bool checked = false;
	bool checkable = false;
	//~ property alias pressed: mouseArea.pressed
	//~ property alias text: label.text
	//~ property alias platformMouseAnchors: mouseArea.anchors

	View.Style style = {
		width: 100;
		height: 25;
		radius: 8;
	};
	Group &group = null;

	Image image = {
		anchor: dock(CenterLeft, parent);
		source: button.iconSource
		visible: source != ""
	}
	Label label = {
		anchor = Anchor.dock(Anchor.Style.CenterRight, parent, image.right);

		elide: Text.ElideRight

		font.family: button.platformStyle.fontFamily
		font.weight: button.platformStyle.fontWeight
		font.pixelSize: button.platformStyle.fontPixelSize
		font.capitalization: button.platformStyle.fontCapitalization
		colors: {
			disabled: Style.disabledTextColor;
			enabled: Style.textColor;
			focused: Style.textColor;
			pressed: pressedTextColor;
			checked: checkedTextColor;
		}
		text: ""
		visible: text != ""
	}

	children: const[image, label];
}
// +/

struct Alarm {
	// duration in seconds, 0 means
	int  duration;

	// Alarm starts on
	Date start;

	// Alarm starts on
	Date end;

	struct repeat:1 {
		s
	}
}
