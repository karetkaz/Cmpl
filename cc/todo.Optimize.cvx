// TODO: small optimization

/+ Optimize stack deallocations
{
	int a[1<<10];
	{
		int a[1<<10];
		{
			int a[1<<10];
			{
				int a[1<<20];
				{
					int a[1<<10];
					{
						int a[1<<10];
						a[0] = 9;
					}
					a[0] = 9;
				}
				//~ a[0] = 9;
			}
			a[0] = 9;
		}
		a[0] = 9;
	}
}// +/

/+ Optimize stack allocation
{
	string a = "a";
	print(a);
}
//! `dup.x1 sp(0)` and `spc -4` can be removed
// todo.cvx:100: [008ea4-008ea9]: string a = 'a'
//| 	1f 96 61 00 00             load.ref 6196
// todo.cvx:101: [008ea9-008eaf]: print(a);
//| 	12 00                      dup.x1 sp(0)
//| 	09 1c 00 00                libc(28): print(string val): void
//| 	10 fc ff ff                spc -4

//~ +/

/+ add to System ...
enum Arch {
	arm
	?armf
	i386
	x86_64 | amd64
}

enum Os: string {
	Windows("Windows");
	Linux("Linux");
	Mac("Mac");
}

Arch arch = Arch.?
char name[] = "Windows"|"Linux"|"Mac"|"Unknown"

boolean bigEndian = false;

//~ +/

/+ ? Templates ?
static struct Array(typename Type) {
	int bSearch(Type array[], Type element) {
		...
	}
	int indexOf(Type array[], Type element) {
		...
	}
	...
	operator (Type array[]).bSearch(Type element) = bSearch;
	operator (Type array[]).indexOf(Type element) = indexOf;
	/+ then using like:
		using Array(int);

		using Array(int) {
			int array[200] = ...;
			int x = array.indexOf(30);
		}
	
	+/
}
//~ +/

/+ initialization (type and variable)

//~ int a1 = int(0);
//~ int a2 = int{0};

//~ typename strty = string;
//~ typename complex = Complex;
//~ Complex c1 = Complex(10, 20);
//~ Complex c2 = Complex{re: 10, im:20};

struct Person {
	LastName: string,
	FirstName: string,
	BirthYear: int(1970);
	Jobs: string[] = null,
	next: Person& = null,
	Address: struct {
		Type: enum {Home, Work, Other}
		PostOfficeBox: String;
		StreetAddress: String;
		ZipCode: String;
		City: String;
		State: String;
		Country: String;
	};
	Address2: struct& {
		Type: enum {Home, Work, Other}
		PostOfficeBox: String;
		StreetAddress: String;
		ZipCode: String;
		City: String;
		State: String;
		Country: String;
	} = null;
	Phone: struct[] {
		Type: enum {Mobile, Home, Work, Fax, Other} = Other;
		Value: String;
	} = null,
	Mail: struct[] {
		Type: enum {Home, Work, Other} = Other;
		value: String = "";
	} = null,
	Dates: struct[] {
		type: enum {Other, BirthDay, Aniversary}
		value: String;
	} = [],
	Gender: enum {Male, Female, NotDefined} = NotDefined;
};

Person person = {
	LastName: "Last";
	FirstName: "First";
	Address: {
		Type: Home;
		Value: "12345678";
	};
	Phone: [{
		Type: Mobile;
		Value: "12345678";
	}, {
		Type: Home;
		Value: "23456789";
	}];
	Gender: Male;
};
//~ +/

/+ initialization (type and variable): Ui
struct Rect {
	int top;
	int right;
	int bottom;
	int left;
}
struct Anchor {
	enum Style {
		Fill;
		FillTop;
		FillRight;
		FillBottom;
		FillLeft;

		Center;
		CenterTop;
		CenterRight;
		CenterBottom;
		CenterLeft;
	};
	int &top;
	int &bottom;
	bool centerHorizontal;	// center / fill

	int &left;
	int &right;
	bool centerVertical;	// center / fill

	Rect margin;

	static Anchor dock(Anchor.Style dock, Rect r, int &pin) {
		result.top = r.top;
		result.bottom = r.bottom;
		result.centerHorizontal = true;

		result.left = r.left;
		result.right = r.right;
		result.centerVertical = true;

		switch (dock) {

			case Fill:
				result.centerHorizontal = false;
				result.centerVertical = false;
			case Center:
				break;

			case FillTop:
				result.centerHorizontal = false;
			case CenterTop:
				result.bottom = pin;
				break;

			case FillRight:
				result.centerVertical = false;
			case CenterRight:
				result.left = pin;
				break;

			case FillBottom:
				result.centerHorizontal = false;
			case CenterBottom:
				result.top = pin;
				break;

			case FillLeft:
				result.centerVertical = false;
			case CenterLeft:
				result.right = pin;
				break;
		}
	}
}

struct Font {...}

struct Component {
	Rect position;	// calc by the layout
	Anchor anchor;
	int width = 20;
	int height = 20;

	bool enabled;
	bool focusable;
	Component children[];
}

//~ struct Page: Component {...}
//~ struct List: Component {...}
//~ struct Grid: Component {...}
struct Label: Component {...}
struct Image: Component {...}
struct Check: Component {...}
struct Input: Component {...}	// single line, multi line, html
struct Select: Component {...}	// ComboBox
struct Slider: Component {...}

struct Window: Component {...}
struct Button: Component {
	struct Style {
		Rect margin = {
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
		};
		Rect padding = {
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
		};
		int width = 100;
		int height = 25;
	}

	bool checked = false;
	bool checkable = false;
	//~ property alias pressed: mouseArea.pressed
	//~ property alias text: label.text
	//~ property alias platformMouseAnchors: mouseArea.anchors

	Style style = {
		//~ margin:...
		
	};
	Group &group = null;

	width: defaultStyle.width;
	height: defaultStyle.height;

	//~ property alias font: label.font

	Image image = {
		anchor: dock(CenterLeft, parent);
		source: button.iconSource
		visible: source != ""
	}

	Label label = {
		anchor = dock(CenterRight, parent, image.right);

		elide: Text.ElideRight

		font.family: button.platformStyle.fontFamily
		font.weight: button.platformStyle.fontWeight
		font.pixelSize: button.platformStyle.fontPixelSize
		font.capitalization: button.platformStyle.fontCapitalization
		colors: {
			disabled: Style.disabledTextColor;
			enabled: Style.textColor;
			focused: Style.textColor;
			pressed: pressedTextColor;
			checked: checkedTextColor;
		}
		text: ""
		visible: text != ""
	}

	children: const[image, label];
}
// +/

