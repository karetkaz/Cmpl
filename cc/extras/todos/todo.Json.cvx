struct Json {
	enum Token: char {
		BEGIN_ARRAY('[');
		END_ARRAY(']');
		BEGIN_OBJECT('{');
		END_OBJECT('}');
		COLON(':');
		COMMA(',');
		STRING(0);
		NUMBER(0);
		NULL(0);
		TRUE(0);
		FALSE(0);
		NAME(0);	// !unquoted string
	}

	struct Reader: Stream.TextReader {
		/+
			seting lenient to true will allow parsing a json containing:
				1. Block and line coments: `/* ... */` and `// ... \n`
				2. Single quoted name and strings: { answer: '42' }
				3. Unquoted names: { answer: 42 }
				4. Object and array elements separated by ';' or ','
				5. Trailing separators: { "answer": 42, }
		+/
		bool lenient = false;

		bool beginArray(Reader this) {...}
		bool endArray(Reader this) {...}
		bool beginObject(Reader this) {...}
		bool endObject(Reader this) {...}
	}

	struct Writer: Stream.TextWriter {
		Writer beginArray(Writer this) {...}
		Writer endArray(Writer this) {...}
		Writer beginObject(Writer this) {...}
		Writer endObject(Writer this) {...}

		Writer writeNull();
		Writer writeBool(bool value);
		Writer writeNumber(int64 value);
		Writer writeNumber(float64 value);
		Writer writeString(String value);
	}
}
