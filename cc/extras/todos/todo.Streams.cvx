define byte = uint8;

// abstract classes
struct Closeable: object {
	const void close(Closeable closeable);
}

struct Stream {
	const void seek(Stream stream);
	const void read(Stream stream);
	const void write(Stream stream);
	const void flush(Stream stream);
	const void close(Stream stream);
	/+ subclasses:
		FileStream
		PipedStream
		SocketStream
		MemoryStream
	+/
}

struct ByteReader: Closeable {  // InputStream
	const int read(ByteReader reader, byte bytes[]);
	/+ subclasses?
		CopyReader
		FileReader
		PipedReader
		SocketReader
		MemoryReader
	+/
}

struct ByteWriter: Closeable {  // OutputStream
	const int write(ByteWriter writer, byte bytes[]);
	const void flush(ByteWriter writer);
	/+ subclasses?
	 ?	CopyWriter
		FileWriter
		PipedWriter
		SocketWriter
		MemoryWriter
	+/
}

struct TextReader: Closeable {
	const int read(TextReader reader, char text[]);
	ByteReader byteReader;
	bool closeByteReader;
	/+ subclasses:
		Latin1, Ascii, Utf7, Utf8 - Decoder OR Reader
	+/
}

struct TextWriter: Closeable {
	const int write(TextWriter writer, char text[]);
	const void flush(TextWriter writer);
	/+ subclasses:
		Latin1, Ascii, Utf7, Utf8 - Encoder OR Writer
	+/
}

struct CopyReader: ByteReader {  // Tee
	ByteReader source;
	ByteWriter copy;
	class: {
		read: int(ByteReader this, byte bytes[]) {
			result = this.source.read(bytes);
			if (result > 0) {
				this.copy.write(bytes[0 .. result]);
			}
			return result;
		};
		close: void(CopyReader this) {
			this.source.close();
			this.copy.flush();
			this.copy.close();
		}
	}
}

/** extending a class
 a class can be extended from another class, or from an object.
 by extendig from a class, the size of the extended class will be the base class + the size of new fields.
 by extendig from an object, the new class will have a reference to that instance.
*/

struct FileInputStream: InputStream {
	const File file;

	/* TODO: override methods by simple initialization
	close: void(FileInputStream stream) {
		File.close(stream.file);
	}

	read: int(FileInputStream stream, byte values[]) {
		return File.read(stream.file, values);
	}

	// initializer
	operator FileInputStream(File file) = FileInputStream {
		file: file;
	}
	// */
}

int sizeofFileInputStream = sizeof(FileInputStream);
//~ FileInputStream fis = {file: File.Open("string.cvx")};
//~ FileInputStream fis = emit(FileInputStream, memmgr(null, sizeof(FileInputStream)));

/+
struct Encoder {OutputStream stream; bool closeStream; int write(Encoder, byte[]);}
struct Decoder {InputStream stream; bool closeStream; int read(Decoder, byte[]);}
	> Base64
	> Url


struct Path {
	exists
	isFile
	isDirectory
	isHidden

	parent
	isAbsolute
	canRead,write,execute,...
	permissions
}

struct File: Path {
	open = InputStream(FileStream.open(path), true);
	//openText = Utf8Reader(InputStream(FileStream.open(path)));
	create = OutputStream(FileStream.open(path), true);
	append = OutputStream(FileStream.open(path), true);
	size;
}

struct Directory: Path {
	list, make, remove(recursive)
}
//~ +/
