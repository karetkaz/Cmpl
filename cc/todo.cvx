//~ #open src/core.h
//~ #open src/core.c
//~ #open src/tree.c

//~ #open src/code.c			// virtual mashine
//~ #open src/type.c			// type system
//~ #open src/parser.c			// input, lexer, parser
//~ #open src/printer.c			// pretty print, logger
//~ #open src/main.c

//~ bug: static functions are not accessible from a non static struct it there is only static data.
//~ bug: function with empty body does not generate the return instruction.

/*TODO: Array assignment
define Array(int32 typesize, int32 ^n) = emit(struct, ref(memmgr(null, typesize * n)), i32(n));

int b[] = Array(4, 10);
//~ b = Array(4, 10);
//~ int c[] = Array(4, 10);
//~ b = c;
/+
int a[][];
a = Array(8, 10);
for (int i = 0; i < a.length; i += 1) {
	a[i] = Array(int, 10);
}// +/
// */

/*DONE: const & static members
struct M {
	static const int A = 9;
	static int B = 9;
	const int a;
	int b;

	static const int A_;		// error: uninitialized constant
	static int B_;
	const int a_ = 0;			// error: can not be initialized
	int b_ = 0;					// error: can not be initialized
}

M m = M(6, 9);
m.A = 69;			// error: constant lvalue in asignment
m.a = 69;			// error: constant lvalue in asignment
m.B = 69;			// warn: access wia instance reference
m.b = 69;

//~ int &ref_m_a = m.a;	// hacked: warn if const/nonconst ref assignment.
//~ ref_m_a = 666;

// */

/*DONE: assignment by reference
int64 a = 32;
a = 33;
void setup() {
	static int64 &b = a;
	print("%d\n", int64(b));
}
setup();
//~ */

/* BUG: return: int returned instead of float
double f1(int32 idx) {
	return idx;
}
/// 0 is returned.
double f2(int32 idx) {
	result = idx;
}

double f1 = f1(11);
double f2 = f2(11);
//~ */

//~ /* Arrays/slices
struct slice_in_struct {
	int slice[];
}
slice_in_struct slice_in_struct_fn(int a[]) {return slice_in_struct(a);}

int a[4] = {1, 2, 3, 4};

slice_in_struct it1 = slice_in_struct(a);

//~ DONE:
slice_in_struct it2 = slice_in_struct_fn(a);

//~ print("\n");

//FixMe: 
int xxx = it1.slice[0];

//~ */

/* optimizing stackalloc
	// spc -24
		spc -16
		spc -8

{
	int a[1<<10];
	{
		int a[1<<10];
		{
			int a[1<<10];
			{
				int a[1<<20];
				{
					int a[1<<10];
					{
						int a[1<<10];
						a[0] = 9;
					}
					a[0] = 9;
				}
				a[0] = 9;
			}
			a[0] = 9;
		}
		a[0] = 9;
	}
}*/

/+Optimize
	// remove dup.x1 sp(0) and spc -4
		ldc.ref 5ee1
		dup.x1 sp(0)
		libc: define print( &val)
		spc -4

//~ +/

/*
static(typename Value) {
	Value& select(Value arr[], int pos) {
		assert(unsigned(pos) > arr.lenght);
		return pointer(arr) + pos * Value.size;
	}

	bool insert(Value arr[], int pos, Value value) {
		return false;
	}

	bool update(Value arr[], int pos, Value value) {
		if (unsigned(pos) > arr.lenght)
			return false;
		select(arr, pos) = value;
		return true;
	}

	bool delete(Value arr[], int pos) {
		return false;
	}

	operator (Value arr[]) insert(Value value) = insert(arr, -1, value);
	operator (Value arr[]) insert(int pos, Value value) = insert(arr, pos, value);
	operator (Value arr[]) update(int pos, Value value) = update(arr, pos, value);
	operator (Value arr[]) delete(int pos) = delete(arr, pos);

	operator (Value arr[]) [int pos] = select(arr, pos);
}
static(typename Key, typename Value) {

	struct &Map {
		struct Iterator {
			Map &map;
			int pos;
		}
		struct Item {
			int hash;		// hash code or previos slot
			int next;		// next slot
			Key key;
			Value value;
		}
		int hash;		// hash size, treemap if <= 0
		int used;		// number of used items
		Item data[];
	}

	define iterator(Map map) = Map.Iterator(map, 0);
	bool next(Map.Iterator it) {
		pos += 1;
		// skip not used data.
		while (it.map.data[pos].hash == 0) {
			pos += 1;
		}
		return pos > it.map.used;
	}

	bool insert(Map map, Key key, Value value) {

		if (map.data.length <= map.used) {
			Item data = map.data;
			map.data = new Item[2 * data.length];
			for (int i = 0; i < data.length; i += 1) {
				map.data[i] = data[i];
			}
		}

		if (map.hash > 0) {
			int hash = hash(key) % map.hash;
			int pos = hash;

			Item &item = null;
			for (; pos > 0; ) {

				item = map.data[pos];
				pos = item.next;

				if (key == item.key) {
					// can not insert key more than once
					return false;
				}
			}

			if (pos != hash) {
				// wee have to insert a new item
				item.next = map.used;
				item = data[map.used];
				map.used += 1;
			}

			item.hash = hash;
			item.next = -1;
			item.key = key;
			item.value = value;
		}
		else {
			heap insert
		}
		return true;
	}
	bool update(Map map, Key key, Value value) {
		Item &item = select(map, key);

		if (item == null)
			return false;

		item.value = value;
		return true;
	}
	bool delete(Map map, Key key) {
		Item &item = select(map, key);

		if (item == null)
			return false;

		if (map.hash > 0) {
			while (item.next > 0) {
				Item next = map[item.next];
				item.next = next.next;

				item.key = next.key;
				item.value = next.value;

				item = next;
			}
		}
		else {
			// heap delete
			return false;
		}
		return true;
	}
	Item &select(Map map, Key key) {
		if (map.hash > 0) {
			int hash = hash(key) % map.hash;
			int pos = hash;

			Item &item = null;
			for (; pos > 0; ) {

				item = map.data[pos];
				pos = item.next;

				if (key == item.key) {
					return item;
				}
			}
		}
		else {
			heap search
		}
		return null;
	}
	define value(Map.Item item) = item != null ? item.value : null;

	//~ operator (Value map[Key]).insert(Key key, Value value) = insert(map, key, value);
	//~ operator (Value map[Key]).update(Key key, Value value) = update(map, key, value);
	//~ operator (Value map[Key]).delete(Key key) = delete(map, key);

	operator (Value map[Key])[Key key] = value(select(map, key));

	operator (Value map[Key])[Key key].set(Value value) {
		if (value == null) {
			return delete(map, key);
		}
		if (!update(map, key, value)) {
			return insert(map, key, value);
		}
		return true;
}
//~ */

//~ int a1 = int(0);
//~ int a2 = int{0};

//~ Complex c1 = Complex(10, 20);
//~ Complex c2 = Complex{re: 10, im:20};

