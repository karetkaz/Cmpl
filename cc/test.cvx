//~ #open src/main.c

//~ int a = 33;
//~ /* try catch errors
void aborts(pointer args) {
	abort();
}

void abort2(int recurse, typename typ, pointer ptr, void fun(pointer ptr)) {
	if (recurse > 0) {
		abort2(recurse - 1, typ, ptr, fun);
	}
	//raise(raise.error, "abort2", variant(null), 512);
	abort("abort2");
}

void throws(pointer args) {
	//~ debug("throws.enter", variant.null, 1, 0);
	int &i = args;
	int j = 3 / i;
	if (i >= 0) {
		abort2(i, double, args, aborts);
	}
	//~ debug("throws.leave", variant.null, 1, 100);
}

define useTryCatch = true;
static if (useTryCatch) {
	define Exec(pointer args, void action(pointer args)) = tryExec(args, action);
}
static if (!useTryCatch) {
	int Exec(pointer args, void action(pointer args)) {
		action(args);
		return 0;
	}
}

int arg0 = 0;
int arg2 = 2;
int argK = -1;
// no error
int errorOK   = Exec(pointer(&argK), throws);
// null pointer
int errorMEM  = Exec(pointer(null), throws);
// divison by zero
int errorDIV  = Exec(pointer(&arg0), throws);
//~ // abort execution
int errorLIB  = Exec(pointer(&arg2), throws);
//~ // abort execution
int errorLIB2 = Exec(pointer(&arg2), aborts);
//~ */

/* TO DELETE
struct arr{
	int c1[] = "123";
	int c2[3] = {'1', '2', '3'};
}
int c1[] = "123";
int c2[3] = {'1', '2', '3'};

arr a = arr(c1, c2);
int l1 = c1.length;
int l2 = c2.length;
int l3 = a.c1.length;
int l4 = a.c2.length;
int b(int a[2]) {
	return a.length;
}

static const int DaysToMonth365[] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};
//~ */

/+ TODO: vs studio BUG
string decodedFile = "out.txt";
debug("file", variant(decodedFile), 1, 0);
// +/

/*
//~ inline foo(int &a, int &b) = a * a + 2 * a * b + b * b;
//~ int a = 6;
//~ int b = 6;
//~ int c = foo(a, b);
int a() {
	int b() {
		return 'b';
	}
	return 'a';
}
//~ */

/*
string infoString = "blah";
pointer ptrString = pointer(infoString);
string infoStringPtr = ptrString;
variant varString = variant(&infoString);
variant varStringType = variant(string, ptrString);
variant varStringType2 = variant(string, pointer(infoString));

int value = 1234;
int &refValue = value;

pointer ptrValue = pointer(&value);
pointer ptrRefValue = pointer(refValue);
variant varValue = variant(&value);
variant varRefValue = variant(refValue);

int &i1 = ptrValue;
int &i2 = ptrRefValue;
// BUG: value should be 1234
int &i3 = pointer(varValue);
int &i4 = pointer(varRefValue);
//~ */
