// make file iterable :)define iterator(File &file) = (file);// iterating by charsbool next(File &file, char &value) {	int ch = File.Read(file);	result = ch != -1;	if (result) {		value = ch;	}}struct Base64 {	static string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";	static int table[256];	static bool init() {		for (int i = 0; i < table.length; i += 1) {			table[i] = strchr(chars, i);		}	}	static bool init = init();	static void encode(File out, File in, int wrap) {		int bitsEncoded = 0;		int charEncoded = 0;		int charWritten = 0;		for (char chr : in) {			bitsEncoded += 2;			charEncoded <<= 8;			charEncoded |= chr & 0xff;			File.Write(out, chars[(charEncoded >> bitsEncoded) & 0x3f]);			if (wrap > 0 && ((charWritten += 1) % wrap == 0)) {				File.Write(out, char('\n'));			}			if (bitsEncoded >= 6) {				bitsEncoded -= 6;				File.Write(out, chars[(charEncoded >> bitsEncoded) & 0x3f]);				if (wrap > 0 && ((charWritten += 1) % wrap == 0)) {					File.Write(out, char('\n'));				}			}		}		if (bitsEncoded != 0) {			if (bitsEncoded == 4) {				File.Write(out, chars[(charEncoded >> 2) & 0x3f]);				File.Write(out, char('='));			}			else if (bitsEncoded == 2) {				File.Write(out, chars[(charEncoded >> 4) & 0x3f]);				File.Write(out, char('='));				File.Write(out, char('='));			}			bitsEncoded = 0;		}		if (wrap > 0 && (charWritten % wrap != 0)) {			File.Write(out, char('\n'));		}		debug("unprocessed bits remaining.", variant(&bitsEncoded), bitsEncoded != 0, 25);	}	static void decode(File out, File in) {		int bitsDecoded = 0;		int charDecoded = 0;		for (char chr : in) {			bool skipChar = chr == '\n';			if (chr == '\r') {				skipChar = true;			}			else if (chr == '=') {				skipChar = true;				bitsDecoded -= 2;			}			if (!skipChar) {				bitsDecoded += 6;				charDecoded <<= 6;				charDecoded |= table[chr] & 0x3f;				if (bitsDecoded >= 8) {					bitsDecoded -= 8;					File.Write(out, char(charDecoded >> bitsDecoded));				}			}		}		File.Write(out, char('\n'));		assert(bitsDecoded == 0, "unprocessed bits remaining.", variant(&bitsDecoded));	}}define testDoEncode = true;define testDoDecode = true;const string encodedFile = "base64.in.txt";const string decodedFile = "base64.out.txt";//~ Test Encodestatic if (testDoEncode == true) {debug("Base64.encode", variant(decodedFile));File fileIn1 = File.Open(decodedFile);Base64.encode(File.StdOut, fileIn1, 76);File.Close(fileIn1);}//~ Test Decodestatic if (testDoDecode == true) {//~ File fileIn = File.Open(encodedFile);//~ File fileOut = File.Create(decodedFile);//~ Base64.decode(fileOut, fileIn);//~ File.Close(fileOut);//~ File.Close(fileIn);debug("Base64.decode", variant(encodedFile));File fileIn2 = File.Open(encodedFile);Base64.decode(File.StdOut, fileIn2);File.Close(fileIn2);}