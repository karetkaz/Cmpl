struct ss {
	int32 x;
	int32 y;
	struct ss {
		int64 x;
		int64 y;
	}
}

ss A = ss(1, 2);
ss.ss a12 = ss.ss(3, 4);

typename t1 = ss;
typename t2 = ss.ss;

int n1 = sizeof(ss);
int n2 = sizeof(ss.ss);

// typename and type informations

define Xxx = ss.ss;		// alias
typename type = ss.ss;	// variable

Xxx a = ss.ss(5, 6);
Xxx b = ss.ss(7, 8);

int size1 = typename(ss.ss).size;
int size2 = typename(Xxx).size;
int size3 = typename(type).size;

string name = type.name;
string file = type.file;
int line = type.line;

/+ compare typenames
typename t = Complex;
/+ TODO:
if (null == Complex) {
	debug("Complex not null");
}
if (Complex == null) {
	debug("Complex not null");
}
// +/

if (t != null) {
	debug("t not null");
}
if (null != t) {
	debug("t not null");
}
if (t == Complex) {
	debug("Complex");
}
if (Complex == t) {
	debug("Complex");
}
//~ +/

//? TODO: variable.struct should return the type of variable.
//~ +/

/* test: Arrays, Pointers, References Alloc
int32 i32arr[] = emit(struct, ref(memmgr(null, typename(int32).size * 100)), i32(100));
for (int i = 0; i < i32arr.length; i += 1) {
	i32arr[i] = i;
}
// */
