// micro ui

struct View: object {
	const char text[*];
	const int height = 0;
	bool enabled = true;
	bool selectable = true;
	const variant data = null;

	bool onClick(View this) = null; /*TODO: {
		//trace("onClick", this);
		return true;
	}// */
}

struct Button: View {
	/* FIXME: do the override, use this method as default initializer
	// TODO: override or overload: bool onClick(Button this) { ??? }
	bool onClick(View this) {
		View.onClick(this);   // call super
		trace("onClick", this);
		// FIXME: enable lookup: value.value = 0;
		return this.enabled;
	}// */
}

struct Switch: View {
	const char on[*] = "on";
	const char off[*] = "off";

	bool checked = false;
}

struct Slider: View {
	int value = 0;
	const int minimum = 0;
	const int maximum = -1u >> 1;
	const int divisor = 1;
}

struct ColorPicker: View {
	const float lum = 1f;
	argb value = argb(0);
	void onUpdate(ColorPicker this) = null;/* {
		trace("onClick", this);
	}// */
}

struct Histogram: View {
	const gxSurf image;
	const bool lines = false;
	uint32 data[256] = null;   // FIXME: this should be not possible
}

struct MouseState {
	int32 clicks;   // click count
	int64 time;     // old clock
	int32 btn;      // old button
	int32 x;        // old x coord
	int32 y;        // old y coord
}

struct Layout {
	gxSurf offs;
	gxSurf font;
	int border = 3;
	int padding = 5;
	MouseState mouse;
	gxRect rect;
	bool visible = true;

	int items = 0;
	View views[200] = null;
	gxRect rects[200] = null;
	int reset[200] = null;
	int selectedIndex = -1;
	int pressedIndex = -1;

	// Style
	int backgroundColor = 0x1a1a1a;
	int focusedColor = 0x3b4754;
	int valueColor = 0x6897bb;
	int textColor = 0xdadada;
}

int val(Slider slider&) {
	if (slider.value < slider.minimum) {
		slider.value = slider.minimum;
	}
	if (slider.value > slider.maximum) {
		slider.value = slider.maximum;
	}
	return slider.value;
}

double valFlt(Slider slider&) {
	return slider.val() / double(slider.divisor);
}

void measure(Layout layout&) {
	int bottom = layout.rect.y;
	int fontHeight = layout.font.height() / 256;

	// measure
	for (int i = 0; i < layout.items; i += 1) {
		gxRect rect& = layout.rects[i];
		rect.x = layout.rect.x;
		rect.y = bottom;
		rect.w = layout.rect.w;
		View view = layout.views[i];
		if (view.height != 0) {
			rect.h = view.height;
		} else {
			rect.h = fontHeight;
		}
		if (ColorPicker item = view.as(ColorPicker)) {
			if (view.height == 0) {
				rect.h = 128;
			}
		}
		else if (Histogram item = view.as(Histogram)) {
			if (view.height == 0) {
				rect.h = 64;
			}
		}
		else if (Slider item = view.as(Slider)) {
			rect.h += 2 * layout.padding;
		}
		else if (Switch item = view.as(Switch)) {
			rect.h += 2 * layout.padding;
		}
		else if (Button item = view.as(Button)) {
			rect.h += 2 * layout.padding;
		}
		else {
			abort("item is not a known ui element", view);
		}
		bottom += rect.h;
	}
	layout.rect.h = bottom - layout.rect.y;
}
void draw(Layout layout&) {
	static const FormatFlags flagsInt = { padLen: 4 };
	static const FormatFlags flagsFlt = { padLen: 4, precision: 2 };

	if (!layout.visible) {
		return;
	}
	// draw background
	if (layout.backgroundColor != -1) {
		int b = layout.border;
		const gxRect r& = layout.rect;
		layout.offs.fillRect(r.x - b, r.y - b, r.x + r.w + b, r.y + r.h + b, layout.backgroundColor);
	}

	// draw items
	for (int i = 0; i < layout.items; i += 1) {
		int pos = 0;
		char value[256] = {};
		View view = layout.views[i];
		gxRect rect& = layout.rects[i];
		value[0] = 0;
		if (Slider item = view.as(Slider)) {
			if (item.divisor != 1) {
				pos = value.append(pos, item.valFlt(), flagsFlt);
			} else {
				pos = value.append(pos, item.val(), flagsInt);
			}
		}
		else if (Switch item = view.as(Switch)) {
			if (item.checked) {
				pos = value.append(pos, item.on);
			} else {
				pos = value.append(pos, item.off);
			}
		}
		else if (Button item = view.as(Button)) {
		}
		else {
			//abort("item is not a known ui element", view);
		}
		if (i == layout.selectedIndex) {
			layout.offs.fillRect(rect.x, rect.y, rect.x + rect.w, rect.y + rect.h, layout.focusedColor);
		}

		if (ColorPicker item = view.as(ColorPicker)) {
			for (int y = 0; y < rect.h; y += 1) {
				for (int x = 0; x < rect.w; x += 1) {
					float px = float(x) / rect.w;
					float py = float(y) / rect.h;
					argb color = hsv2rgb(px, 1 - py, item.lum);
					layout.offs.set(x + rect.x, y + rect.y, color);
				}
			}
		}
		else if (Histogram item = view.as(Histogram)) {
			if (item.lines) {
				offs.drawLut(rect, null, item.data);
			} else {
				offs.drawLut(rect, item.data, null);
			}
		}

		int p = layout.padding;
		gxRect valueRect = rect;
		layout.font.clipText(&valueRect, value);
		if (valueRect.w > layout.rect.w - 2 * p) {
			valueRect.w = layout.rect.w - 2 * p;
		}
		if (view.text != null) {
			gxRect textRect = rect;
			textRect.x += p;
			textRect.y += p;
			textRect.w -= valueRect.w + 3 * p;
			layout.offs.drawText(textRect, layout.font, view.text, layout.textColor);
		}

		valueRect.x += rect.w - valueRect.w - p;
		valueRect.y += p;
		layout.offs.drawText(valueRect, layout.font, value, layout.valueColor);
	}
}

Layout Layout(gxSurf offs, int x, int y, gxSurf font, View items...) {
	Layout layout = {
		offs: offs;
		font: font;
		mouse: {};
		rect: {
			x: x;
			y: y;
			w: 256;
			h: 0;
		};
	};

	for (int i = 0; i < layout.views.length; i += 1) {
		layout.views[i] = null;
	}

	for (int i = 0; i < items.length; i += 1) {
		if (Slider slider = items[i].as(Slider)) {
			layout.reset[i] = slider.value;
		}
		layout.views[i] = items[i];
	}
	layout.items = items.length;

	if (y < 0) {
		layout.measure();
		layout.rect.y = offs.height() - layout.rect.h + y;
	}
	if (x < 0) {
		layout.rect.x = offs.width() - layout.rect.w + x;
	}
	return layout;
}

inline selected(const Layout layout&) = layout.selectedIndex < 0 ? null : pointer(layout.views[layout.selectedIndex]);
inline selected(const Layout layout&, typename type) = layout.selectedIndex < 0 ? null : layout.views[layout.selectedIndex].as(type);

inline activeIndex(const Layout layout&) = layout.pressedIndex != -1 ? layout.pressedIndex : layout.selectedIndex;

bool isSelected(const Layout layout&, View items...) {
	View selected = layout.selected();
	for (int i = 0; i < items.length; i += 1) {
		if (items[i] == selected) {
			return true;
		}
	}
	return false;
}
bool isActive(const Layout layout&, View views...) {
	int activeIndex = layout.pressedIndex != -1 ? layout.pressedIndex : layout.selectedIndex;
	if (activeIndex < 0) {
		return false;
	}
	View view = layout.views[activeIndex];
	for (int i = 0; i < views.length; i += 1) {
		if (views[i] == view) {
			return true;
		}
	}
	return false;

}

bool setSelected(Layout layout&, View view) {
	for (int i = 0; i < layout.items; i += 1) {
		if (layout.views[i] == view) {
			layout.selectedIndex = i;
			return true;
		}
	}
	return false;
}

// FIXME: dispatch click event using inheritance and override
bool onClick(View this) {
	if (this.onClick == null) {
		return true;
	}
	if (ColorPicker item = this.as(ColorPicker)) {
		return item.onClick(item);
	}
	if (Histogram item = this.as(Histogram)) {
		return item.onClick(item);
	}
	if (Slider item = this.as(Slider)) {
		return item.onClick(item);
	}
	if (Switch item = this.as(Switch)) {
		return item.onClick(item);
	}
	if (Button item = this.as(Button)) {
		return item.onClick(item);
	}
	abort("invalid view detected", this);
	return this.onClick();
}

bool uiEvent(Layout layout&, int action, int button, int x, int y) {
static int click(MouseState old&, int btn, int x, int y) {
	if ((btn != 0 && btn != old.btn) || x != old.x || y != old.y) {
		// reset values
		old.time = System.millis();
		old.btn = btn;
		old.clicks = 1;
		old.x = x;
		old.y = y;
		return 0;
	}
	if (btn == 0) {
		// release button
		// old.time = keep value?;
		// old.btn = keep value?;
		// old.cnt = keep value?;
		return old.clicks;
	}

	int64 now = System.millis();
	if ((now - old.time) / 1000. > .5) {
		// reset counter
		old.clicks = 0;
	}
	old.time = now;
	old.btn = btn;
	old.clicks += 1;
	return old.clicks;
}

bool test(const gxRect rect&, int x, int y) {
	if (x < rect.x || x >= rect.x + rect.w) {
		return false;
	}
	if (y < rect.y || y >= rect.y + rect.h) {
		return false;
	}
	return true;
}

bool select(Layout layout&, int index) {
	assert(index >= 0, "invalid selection");
	assert(index < layout.items, "invalid selection");

	View view = layout.views[index];
	if (!view.enabled) {
		return false;
	}
	if (!view.selectable) {
		return false;
	}
	layout.selectedIndex = index;
	return true;
}
bool select(Layout layout&, bool prev) {
	layout.pressedIndex = -1;
	int selectedIndex = layout.selectedIndex;
	for (int i = 1; i < layout.items; i += 1) {
		int index = selectedIndex + (prev ? -i : i);
		if (index >= layout.items) {
			index -= layout.items;
		}
		else if (index < 0) {
			index += layout.items;
		}
		if (layout.select(index)) {
			return true;
		}
	}
	return false;
}

static void reset(Layout layout&, int index) {
	assert(index >= 0, "invalid selection");
	assert(index < layout.items, "invalid selection");

	View view = layout.views[index];
	if (!view.enabled) {
		return;
	}
	if (Slider item = view.as(Slider)) {
		item.value = layout.reset[index];
	}
}
static bool update(Layout layout&, int index, int dx, int dy) {
	assert(index >= 0, "invalid selection");
	assert(index < layout.items, "invalid selection");

	// FIXME: who is y??? debug("y", y);

	View view = layout.views[index];
	if (!view.enabled) {
		return false;
	}
	if (ColorPicker item = view.as(ColorPicker)) {
		gxRect rect& = layout.rects[index];
		int x = layout.mouse.x;
		int y = layout.mouse.y;
		if (!rect.test(x, y)) {
			return false;
		}
		float px = float(x - rect.x) / rect.w;
		float py = float(y - rect.y) / rect.h;
		item.value = hsv2rgb(px, 1 - py, item.lum);
		if (item.onUpdate != null) {
			item.onUpdate();
		}
		return true;
	}
	if (Histogram item = view.as(Histogram)) {
		gxRect rect& = layout.rects[index];
		int min = layout.mouse.x;
		int max = layout.mouse.x;
		int y = layout.mouse.y;
		if (dx < 0) {
			min += dx;
		} else {
			max += dx;
		}
		for (int i = min; i < max; i += 1) {
			int idx = i - rect.x;
			if (idx >= 0 && idx < 256) {
				int32 val = 255 * (rect.h - (y - rect.y)) / rect.h;
				item.data[idx] = uint32(argb(idx, val, val, val));
			}
		}
		return true;
	}
	if (Slider item = view.as(Slider)) {
		if (dx == 0 && dy == 0) {
			return false;
		}
		item.value += dy;
		return true;
	}
	if (Switch item = view.as(Switch)) {
		if (dx != 0 || dy != 0) {
			// disable change using drag
			return false;
		}
		if (layout.selectedIndex != index) {
			// disable first click update
			if (item.selectable) {
				return false;
			}
		}
		item.checked = !item.checked;
		return true;
	}
	if (Button item = view.as(Button)) {
		if (dx != 0 || dy != 0) {
			// disable clicks using drag
			return false;
		}
		item.onClick();
		return true;
	}

	// unknown view type
	return false;
}

bool click(Layout layout&, int x, int y) {
	layout.pressedIndex = -1;
	if (!layout.rect.test(x, y)) {
		return false;
	}
	for (int i = 0; i < layout.items; i += 1) {
		if (!layout.rects[i].test(x, y)) {
			continue;
		}

		View view = layout.views[i];
		if (!view.enabled) {
			return false;
		}

		bool result = false;
		layout.pressedIndex = i;
		if (layout.mouse.clicks > 1) {
			layout.reset(i);
			result = true;
		}
		if (layout.update(i, 0, 0)) {
			result = true;
		}
		if (layout.select(i)) {
			result = true;
		}
		return result;
	}
	return false;
}

	bool isCtrl = (y & Gui.KEY_MASK_CONTROL) != 0;
	bool isShift = (y & Gui.KEY_MASK_SHIFT) != 0;

	if (action == Gui.WINDOW_INIT) {
		layout.selectedIndex = -1;
		layout.select(false);
		layout.measure();
		return true;
	}

	if (action == Gui.FINGER_MOTION) {
		action = Gui.MOUSE_MOTION;
	}
	if (action == Gui.KEY_PRESS) {
		if (button == ' ' || button == 8) {
			if (isShift) {
				for (int i = 0; i < layout.items; i += 1) {
					layout.reset(i);
				}
				return true;
			}
			layout.reset(layout.activeIndex());
			layout.update(layout.activeIndex(), 0, 0);
			return true;
		}
		if (button == '-' || button == '_') {	// down
			int delta = isShift ? 1 : 10;
			return layout.update(layout.activeIndex(), -delta, -delta);
		}
		if (button == '+' || button == '=') {	// up
			int delta = isShift ? 1 : 10;
			return layout.update(layout.activeIndex(), +delta, +delta);
		}
		if (button == '[' || button == ']') {	// position
			layout.visible = !layout.visible;
			return true;
		}
		if (button == '\t') {
			return layout.select(isShift);
		}
	}
	else if (action == Gui.MOUSE_PRESS) {
		layout.mouse.click(button, x, y);
		if (button != 1) {
			return false;
		}
		return layout.click(x, y);
	}
	else if (action == Gui.MOUSE_RELEASE) {
		layout.mouse.click(0, x, y);
		layout.pressedIndex = -1;
		return false;
	}
	else if (action == Gui.MOUSE_MOTION) {
		int ox = layout.mouse.x;
		int oy = layout.mouse.y;
		layout.mouse.click(-1, x, y);
		if (button != 1) {
			return false;
		}
		if (ox == x && oy == y) {
			return false;
		}
		return layout.update(layout.activeIndex(), ox - x, oy - y);
	}
	return false;
}
