// emulated implementation
void blend(gxSurf surf, int32 x0, int32 y0, const gxSurf src, const gxRect roi&, int32 alpha, bool dstAlpha, vec4f blend(vec4f base, vec4f with)) {
	int width = surf.width();
	int height = surf.height();

	assert(!dstAlpha, "not implemented");
	assert(roi == null, "not implemented");
	assert(blend == null, "not implemented");

	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			inline lerp(int32 l, int32 r) = int32(l + alpha * (r - l) / 256);
			argb col = argb(src.get(x,y));
			int r = rch(col);
			int g = gch(col);
			int b = bch(col);

			col = argb(surf.get(x,y));
			r = lerp(rch(col), r);
			g = lerp(gch(col), g);
			b = lerp(bch(col), b);

			surf.set(x + x0, y + y0, argb(r, g, b));
		}
	}
}
