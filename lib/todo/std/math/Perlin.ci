/// Perlin noise generator
static struct Perlin {
	inline B = 0x100;
	inline BM = 0xff;
	inline N = 0x1000;
	inline NP = 12;   // 2^N
	inline NM = 0xfff;

	int p[B + B + 2];
	float g3[B + B + 2][3];
	float g2[B + B + 2][2];
	float g1[B + B + 2];

	bool start = true;

	inline sqr(float x) = float(x * x);

	void init() {
		int i;
		System.srand(System.time());
		for (i = 0; i < B ; i += 1) {
			p[i] = i;

			g1[i] = float((System.rand() % (B + B)) - B) / B;

			for (int j = 0 ; j < 2 ; j += 1) {
				g2[i][j] = float((System.rand() % (B + B)) - B) / B;
			}

			//~ normalize2(g2[i]);
			float n2 = float64.sqrt(sqr(g2[i][0]) + sqr(g2[i][1]));
			if (n2 != 0) {
				g2[i][0] /= n2;
				g2[i][1] /= n2;
			}

			for (int j = 0 ; j < 3 ; j += 1) {
				g3[i][j] = float((System.rand() % (B + B)) - B) / B;
			}

			//~ normalize3(g3[i]);
			float n3 = float64.sqrt(sqr(g3[i][0]) + sqr(g3[i][1]) + sqr(g3[i][1]));
			if (n3 != 0) {
				g3[i][0] /= n3;
				g3[i][1] /= n3;
				g3[i][2] /= n3;
			}
		}

		for ( ; i -= 1; ) {
			int k = p[i];
			int j = System.rand() % B;
			p[i] = p[j];
			p[j] = k;
		}

		for (i = 0 ; i < B + 2 ; i += 1) {
			p[B + i] = p[i];
			g1[B + i] = g1[i];
			for (int j = 0 ; j < 2 ; j += 1) {
				g2[B + i][j] = g2[i][j];
			}
			for (int j = 0 ; j < 3 ; j += 1) {
				g3[B + i][j] = g3[i][j];
			}
		}
	}

	void setup(float vec_i, int b0&, int b1&, float r0&,float r1&) {
		float t = vec_i + N;
		b0 = int(t) & BM;
		b1 = (b0 + 1) & BM;
		r0 = t - int(t);
		r1 = r0 - 1.;
	}

	inline smooth(float32 t) = Math.smooth(t);
	inline lerp(float32 t, float32 a, float32 b) = Math.lerp(t, a, b);

	inline at2(float rx, float ry, int i) = float(rx * g2[i][0] + ry * g2[i][1]);
	inline at3(float rx, float ry, float rz, int i) = float(rx * g3[i][0] + ry * g3[i][1] + rz * g3[i][2]);

	float noise1f(float x) {
		int bx0;
		int bx1;
		float rx0;
		float rx1;

		if (start) {
			start = false;
			init();
		}

		setup(x, bx0, bx1, rx0, rx1);

		float sx = smooth(rx0);
		float u = rx0 * g1[p[bx0]];
		float v = rx1 * g1[p[bx1]];

		return lerp(sx, u, v);
	}
	float noise2f(float x, float y) {
		int bx0;
		int bx1;
		int by0;
		int by1;
		float rx0;
		float rx1;
		float ry0;
		float ry1;

		if (start) {
			start = false;
			init();
		}

		setup(x, bx0, bx1, rx0, rx1);
		setup(y, by0, by1, ry0, ry1);

		int i = p[ bx0 ];
		int j = p[ bx1 ];

		int b00 = p[ i + by0 ];
		int b10 = p[ j + by0 ];
		int b01 = p[ i + by1 ];
		int b11 = p[ j + by1 ];

		float sx = smooth(rx0);
		float sy = smooth(ry0);

		float a = lerp(sx, at2(rx0, ry0, b00), at2(rx1, ry0, b10));
		float b = lerp(sx, at2(rx0, ry1, b01), at2(rx1, ry1, b11));

		return lerp(sy, a, b);
	}
	float noise3f(float x, float y, float z) {

		int bx0;
		int bx1;
		int by0;
		int by1;
		int bz0;
		int bz1;
		float rx0;
		float rx1;
		float ry0;
		float ry1;
		float rz0;
		float rz1;

		if (start) {
			start = false;
			init();
		}

		setup(x, bx0, bx1, rx0, rx1);
		setup(y, by0, by1, ry0, ry1);
		setup(z, bz0, bz1, rz0, rz1);

		int i = p[ bx0 ];
		int j = p[ bx1 ];

		int b00 = p[ i + by0 ];
		int b10 = p[ j + by0 ];
		int b01 = p[ i + by1 ];
		int b11 = p[ j + by1 ];

		float sx = smooth(rx0);
		float sy = smooth(ry0);
		float sz = smooth(rz0);

		float a;
		float b;
		float c;
		float d;
		float u;
		float v;

		u = at3(rx0, ry0, rz0, b00 + bz0);
		v = at3(rx1, ry0, rz0, b10 + bz0);
		a = lerp(sx, u, v);

		u = at3(rx0, ry1, rz0, b01 + bz0);
		v = at3(rx1, ry1, rz0, b11 + bz0);
		b = lerp(sx, u, v);

		c = lerp(sy, a, b);

		u = at3(rx0, ry0, rz1, b00 + bz1);
		v = at3(rx1, ry0, rz1, b10 + bz1);
		a = lerp(sx, u, v);

		u = at3(rx0, ry1, rz1, b01 + bz1);
		v = at3(rx1, ry1, rz1, b11 + bz1);
		b = lerp(sx, u, v);

		d = lerp(sy, a, b);

		return lerp(sz, c, d);
	}

	inline noise(float x) = noise1f(x);
	inline noise(float x, float y) = noise2f(x, y);
	inline noise(float x, float y, float z) = noise3f(x, y, z);
}
