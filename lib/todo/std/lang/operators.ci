// TODO: define operators in the language, not builtin in the compiler

inline "explicit.cast.ci"
inline "implicit.cast.ci"

// arithmetic
inline "operator.neg.ci"
inline "operator.add.ci"
inline "operator.sub.ci"
inline "operator.mul.ci"
inline "operator.div.ci"
inline "operator.mod.ci"

// bitwise
inline "operator.cmt.ci"	// complement
inline "operator.and.ci"
inline "operator.or.ci"
inline "operator.xor.ci"
inline "operator.shl.ci"
inline "operator.shr.ci"

// logical
inline "operator.not.ci"
// relational
inline "operator.cmp.ci"

/* TODO: bool
inline !(bool rhs) = emit(bool(rhs), not);
inline &(bool lhs, bool rhs) = emit(bool(lhs), bool(rhs), and.u32);
inline |(bool lhs, bool rhs) = emit(bool(lhs), bool(rhs), or.u32);
inline ^(bool lhs, bool rhs) = emit(bool(lhs), bool(rhs), xor.u32);
inline <>(bool lhs, bool rhs) = emit(bool(lhs), bool(rhs), sub.i32);
... */
