struct Easing {
	/// The method that calculates the value of the easing.
	double in(const Easing &ease, double t);

	/// Calculate easing out based on easing in.
	static double out(const Easing &ease, double t) {
		return 1 - ease.in(1 - t);
	}

	/// Calculate easing in-out composing easing in and easing out.
	static double inOut(const Easing &ease, double t1) {
		double t = 2 * t1;
		return (t < 1) ? .5 * ease.in(t) : .5 * ease.out(t - 1) + .5;
	}

	/// Calculate easing out-in composing easing out and easing in.
	static double outIn(const Easing &ease, double t1) {
		double t = 2 * t1;
		return (t < 1) ? .5 * ease.out(t) : .5 * ease.in(t - 1) + .5;
	}

	// Known implementations
	enum: Easing {
		Linear: {
			double in(const Easing &ease, double t) {
				return t;
			}
		};
		Quadratic: {
			double in(const Easing &ease, double t) {
				return t * t;
			}
		};
		Cubic: {
			double in(const Easing &ease, double t) {
				return t * t * t;
			}
		};
		Quartic: {
			double in(const Easing &ease, double t) {
				return t * t * t * t;
			}
		};
		Quintic: {
			double in(const Easing &ease, double t) {
				return t * t * t * t * t;
			}
		};
		Exponential: {
			double in(const Easing &ease, double t) {
				return t == 0 ? 0 : double.pow(2, 10 * (t - 1));
			}
		};
		Sinusoidal: {
			double in(const Easing &ease, double t) {
				return -double.cos(t * Math.pi / 2) + 1;
			}
		};
		Circular: {
			double in(const Easing &ease, double t) {
				return -(double.sqrt(1 - t * t) - 1);
			}
		};
		Elastic: {
			double in(const Easing &ease, double t) {
				if (t == 0.0 || t == 1.0) return t;
				t = t - 1.0;
				return - double.pow(2.0, 10.0 * t) * double.sin((t - 0.3 / 4.0) * (2.0 * Math.pi) / 0.3);
			}
		};
		Back: {
			double in(const Easing &ease, double t) {
				inline s = 1.70158;
				return t * t * ((s + 1) * t - s);
			}
		};
		Bounce: {
			static double helper(float t, float c, float a) {
				if (t == 1) {
					return c;
				}
				if (t < (4 / 11.)) {
					return c * (7.5625 * t * t);
				}
				if (t < (8 / 11.)) {
					t -= (6 / 11.);
					return -a * (1 - (7.5625 * t * t + 0.75)) + c;
				}
				if (t < (10 / 11.)) {
					t -= (9 / 11.0f);
					return -a * (1 - (7.5625 * t * t + 0.9375)) + c;
				}
				t -= (21 / 22.);
				return -a * (1 - (7.5625 * t * t + 0.984375)) + c;
			}

			double in(const Easing &ease, double t) {
				inline a = 1.70158;
				return 1 - helper(1 - t, 1, a);
			}
		};
	}
}
