/* Hue saturation brightness demo using color matrix
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image back = Image("asset/image/forest.jpg");
Image offs = Image(back);

static struct ColorMatrix {

mat4f brightness(float val) {
	return {
		x: vec4f(1, 0, 0, val);
		y: vec4f(0, 1, 0, val);
		z: vec4f(0, 0, 1, val);
		w: vec4f(0, 0, 0,  1.);
	};
}
mat4f exposure(float val) {
	// based on: https://stackoverflow.com/questions/22427424/image-processing-exposure-effect-on-image
	return {
		x: vec4f(1 + val, 0, 0, 0);
		y: vec4f(0, 1 + val, 0, 0);
		z: vec4f(0, 0, 1 + val, 0);
		w: vec4f(0, 0, 0,  1);
	};
}
mat4f saturation(float val) {
	const float inv = 1 - val;
	const float R = .213f * inv;
	const float G = .715f * inv;
	const float B = .072f * inv;

	return {
		x: vec4f(R + val, G, B, 0.);
		y: vec4f(R, G + val, B, 0.);
		z: vec4f(R, G, B + val, 0.);
		w: vec4f(0., 0., 0., 1.);
	};
}
mat4f contrast(float val) {
	float32 c = val;
	float32 t = (1 - c) / 2;

	return {
		x: vec4f(c, 0, 0, t);
		y: vec4f(0, c, 0, t);
		z: vec4f(0, 0, c, t);
		w: vec4f(0, 0, 0, 1);
	};
}
mat4f warmth(float val) {
	return {
		x: vec4f(1 + val, 0, 0, 0);
		y: vec4f(0, 1, 0, 0);
		z: vec4f(0, 0, 1 - val, 0);
		w: vec4f(0, 0, 0, 1);
	};
}
mat4f tint(float val) {
	return {
		x: vec4f(1 + val, 0, 0, 0);
		y: vec4f(0, 1, 0, 0);
		z: vec4f(0, 0, 1 + val, 0);
		w: vec4f(0, 0, 0, 1);
	};
}
mat4f hue(float val) {
	//~ assert(val >= 0 && val <= 2 * Math.pi);
	inline lR = 0.213;
	inline lG = 0.715;
	inline lB = 0.072;
	float cV = Math.cos(val);
	float sV = Math.sin(val);
	return {
		x: vec4f(lR+cV*(1-lR)+sV*(   -lR), lG+cV*(   -lG)+sV*( -lG), lB+cV*( -lB)+sV*(1 - lB),0.);
		y: vec4f(lR+cV*(0-lR)+sV*(0.1430), lG+cV*(1 - lG)+sV*(0.14), lB+cV*( -lB)+sV*(-0.283),0.);
		z: vec4f(lR+cV*(0-lR)+sV*(lR - 1), lG+cV*(   -lG)+sV*(  lG), lB+cV*(1-lB)+sV*(    lB),0.);
		w: vec4f(0., 0., 0., 1.);
	};
}

// presets
mat4f identity = mat4f(
	1, 0, 0, 0,
	0, 1, 0, 0,
	0, 0, 1, 0,
	0, 0, 0, 1
);
mat4f invert = mat4f(
	-1, 0, 0, 1,
	0, -1, 0, 1,
	0, 0, -1, 1,
	0, 0,  0, 1
);
mat4f grayScale = mat4f(
	0.299, 0.587, 0.114, 0,
	0.299, 0.587, 0.114, 0,
	0.299, 0.587, 0.114, 0,
	0, 0, 0, 1
);
mat4f blackAndWhite = mat4f(
	1.5, 1.5, 1.5, -1,
	1.5, 1.5, 1.5, -1,
	1.5, 1.5, 1.5, -1,
	0, 0, 0, 1
);
mat4f sepiaColor = mat4f(
	0.393, 0.769, 0.189, 0,
	0.349, 0.686, 0.168, 0,
	0.272, 0.534, 0.131, 0,
	0, 0, 0, 1
);
mat4f technicolor = mat4f(
	// https://github.com/pixijs/pixi.js/blob/dev/packages/filters/filter-color-matrix/src/ColorMatrixFilter.ts
	1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 11.793603434377337 / 255,
	-0.3087833385928097, 1.7658908555458428, -0.10601743074722245, -70.35205161461398 / 255,
	-0.231103377548616, -0.7501899197440212, 1.847597816108189, 30.950940869491138 / 255,
	0, 0, 0, 1
);
mat4f polaroid = mat4f(
	// https://github.com/pixijs/pixi.js/blob/dev/packages/filters/filter-color-matrix/src/ColorMatrixFilter.ts
	1.438, -0.062, -0.062, 0,
	-0.122, 1.378, -0.122, 0,
	-0.016, -0.016, 1.483, 0,
	0, 0, 0, 1
);
mat4f kodachrome = mat4f(
	// https://github.com/pixijs/pixi.js/blob/dev/packages/filters/filter-color-matrix/src/ColorMatrixFilter.ts
	1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 63.72958762196502 / 255,
	-0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 24.732407896706203 / 255,
	-0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 35.62982807460946 / 255,
	0, 0, 0, 1
);
mat4f browni = mat4f(
	// https://github.com/pixijs/pixi.js/blob/dev/packages/filters/filter-color-matrix/src/ColorMatrixFilter.ts
	0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 47.43192855600873 / 255,
	-0.037703249837783157, 0.8609577587992641, 0.15059552388459913, -36.96841498319127 / 255,
	0.24113635128153335, -0.07441037908422492, 0.44972182064877153, -7.562075277591283 / 255,
	0, 0, 0, 1
);
mat4f vintage = mat4f(
	// https://github.com/pixijs/pixi.js/blob/dev/packages/filters/filter-color-matrix/src/ColorMatrixFilter.ts
	0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 9.651285835294123 / 255,
	0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 7.462829176470591 / 255,
	0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 5.159190588235296 / 255,
	0, 0, 0, 1
);
mat4f nightVision = mat4f(
	// https://github.com/skratchdot/color-matrix/blob/master/lib/filters.js
	0.1, 0.4, 0, 0,
	0.3, 1, 0.3, 0,
	0, 0.4, 0.1, 0,
	0, 0, 0, 1
);
mat4f warm = mat4f(
	// https://github.com/skratchdot/color-matrix/blob/master/lib/filters.js
	1.06, 0, 0, 0,
	0, 1.01, 0, 0,
	0, 0, 0.93, 0,
	0, 0, 0, 1
);
mat4f cool = mat4f(
	// https://github.com/skratchdot/color-matrix/blob/master/lib/filters.js
	0.99, 0, 0, 0,
	0, 0.93, 0, 0,
	0, 0, 1.08, 0,
	0, 0, 0, 1
);
mat4f lsd = mat4f(
	// https://github.com/pixijs/pixi.js/blob/dev/packages/filters/filter-color-matrix/src/ColorMatrixFilter.ts
	2, -0.4, 0.5, 0,
	-0.5, 2, -0.4, 0,
	-0.4, -0.5, 3, 0,
	0, 0, 0, 1
);
}

Histogram histogram = {
	enabled: false;
};

// controls
Slider brightness = {
	text: "brightness";
	minimum: -1;
	maximum: 1;
};
Slider exposure = {
	text: "exposure";
	minimum: -1;
	maximum: 1;
};
Slider saturation = {
	text: "saturation";
	value: 1;
	maximum: 5;
};
Slider contrast = {
	text: "contrast";
	value: 1;
	minimum: -1;
	maximum: 3;
};
Slider warmth = {
	text: "warmth";
	minimum: -.5;
	maximum: +.5;
};
Slider tint = {
	text: "tint";
	minimum: -.5;
	maximum: +.5;
};
Slider hue = {
	text: "hue";
	maximum: 360;
	stepSize: 1;
};

Select preset = {
	text: "preset";
};
DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

void onProcess(FxWidget widget) {
	debug.startTimer();

	offs.copy(0, 0, back, null);
	if (widget.showOriginal) {
		histogram.update(offs);
		return;
	}

	mat4f mat = ColorMatrix.identity
		.mul(ColorMatrix.brightness(brightness.value))
		.mul(ColorMatrix.exposure(exposure.value))
		.mul(ColorMatrix.saturation(saturation.value))
		.mul(ColorMatrix.contrast(contrast.value))
		.mul(ColorMatrix.warmth(warmth.value))
		.mul(ColorMatrix.tint(tint.value))
		.mul(ColorMatrix.hue(Math.radians(hue.value)));

	if (mat4f m& = preset.selectedData().as(mat4f)) {
		// apply preset
		mat = mat.mul(m);
	}

	// apply color matrix
	offs.colorMat(null, mat);
	histogram.update(offs);
}

Gui.showWindow(offs, FxWidget(onProcess,
	histogram,

	null, preset
		.addItem("original", ColorMatrix.identity)
		.addItem("invert", ColorMatrix.invert)
		.addItem("grayScale", ColorMatrix.grayScale)
		.addItem("blackAndWhite", ColorMatrix.blackAndWhite)
		.addItem("sepiaColor", ColorMatrix.sepiaColor)
		.addItem("technicolor", ColorMatrix.technicolor)
		.addItem("polaroid", ColorMatrix.polaroid)
		.addItem("kodachrome", ColorMatrix.kodachrome)
		.addItem("browni", ColorMatrix.browni)
		.addItem("vintage", ColorMatrix.vintage)
		.addItem("nightVision", ColorMatrix.nightVision)
		.addItem("warm", ColorMatrix.warm)
		.addItem("cool", ColorMatrix.cool)
		.addItem("lsd", ColorMatrix.lsd),

	null, brightness, exposure, saturation, contrast, warmth, tint, hue,
	null, debug
).focus(brightness));
offs.destroy();
back.destroy();
