// Brightness contrast gamma demo.

gxSurf back = gxSurf("asset/image/forest.png", 32);
gxSurf font = gxSurf.openFnt("asset/font/modern-1.fnt");
gxSurf offs = gxSurf(back.width(), back.height(), back.depth());

void brightnessContrastGamma(uint32 lut[256], float brightness, float contrast, float gamma) {
	argb lut2[*] = lut;

	for (int idx = 0; idx < lut.length; idx += 1) {
		float val = idx / 256f;
		// apply gamma
		val = float.pow(val, 1 / gamma);
		// apply contrast
		val = contrast * (val - .5f) + .5f;
		// apply brightness
		val = brightness + val;

		int rgb = grayClamp(int(256 * val));
		lut2[idx].r = rgb;
		lut2[idx].g = rgb;
		lut2[idx].b = rgb;
		lut2[idx].a = 0;
	}
}

void calcAutoEqualize(uint32 lut[256], gxSurf image, bool luminosity) {
	if (luminosity) {
		// calculate histogram, luminosity
		image.calcHist(null, 0xff000000, lut);

		uint32 sum = 0;
		for (int i = 0; i < lut.length; i += 1) {
			sum += lut[i] >> 24;
			lut[i] = sum;
		}
		for (uint32 i = 0; i < lut.length; i += 1) {
			uint32 l = grayClamp(lut[i] * 255 / sum);
			lut[i] = uint32(_argb(l, i, i, i));
		}
	} else {
		image.calcHist(null, 0x00ffffff, lut);

		int maxR = 0;
		int maxG = 0;
		int maxB = 0;
		int histoR[256];
		int histoG[256];
		int histoB[256];
		for (int i = 0; i < 256; i += 1) {
			maxR += histoR[i] = rch(argb(lut[i]));
			maxG += histoG[i] = gch(argb(lut[i]));
			maxB += histoB[i] = bch(argb(lut[i]));
		}
		int sumR = 0;
		int sumG = 0;
		int sumB = 0;
		int maxRgb = (maxR + maxG + maxB) / 3;
		for (int i = 0; i < 256; i += 1) {
			sumR += histoR[i];
			sumG += histoG[i];
			sumB += histoB[i];
			lut[i] = uint32(argb(
				sumR * 255 / maxRgb,
				sumG * 255 / maxRgb,
				sumB * 255 / maxRgb
			));
		}
	}
}

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "/lib/gfx/micro.ui.ci";

	static Slider brightness = {
		text: "brightness";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider contrast = {
		text: "contrast";
		value: 256;
		minimum: -256;
		maximum: +512;
		divisor: 256;
	};
	static Slider gamma = {
		text: "gamma";
		value: 100;
		minimum: 1;
		maximum: 1000;
		divisor: 100;
	};
	static Switch auto = {
		on: "luminosity";
		off: "rgb stretch";
		text: "auto";
		checked: true;
		selectable: true;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};

	static Layout ui = Layout(offs, font, brightness, contrast, gamma, auto, time);

	bool redraw = uiEvent(ui, action, button, x, y);
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}
	if (redraw) {
		uint64 start = System.millis();
		uint32 lut[256];
		offs.resize(null, back, null, 1);
		if (ui.isSelected(auto)) {
			calcAutoEqualize(lut, offs, auto.checked);
			offs.colorMap(null, lut, auto.checked);
		} else {
			brightnessContrastGamma(lut, brightness.valFlt(), contrast.valFlt(), gamma.valFlt());
			offs.colorMap(null, lut, false);
		}

		uint32 hist[256];
		offs.calcHist(null, 0x00ffffff, hist);
		offs.drawLut(null, hist, lut);

		time.value = System.millis() - start;
		ui.draw(30, 30);
	}
	return 0;
}
