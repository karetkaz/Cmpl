/* Brightness contrast gamma demo using a lookup table
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back.width(), back.height(), back.depth());
int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();


void brightnessContrastGamma(argb lut[256], float brightness, float contrast, float gamma, float highlights, float shadows, float whites, float blacks) {
	// adapted from: https://gitlab.bestminr.com/bestminr/FrontShaders/blob/master/shaders/whites_blacks.glsl
	float WhitesBlacks(float base, float whites, float blacks) {
		enum: float {
			wb: 5.336778471840789E-03;
			wc: 6.664243592410049E-01;
			wd: 3.023761372137289E+00;
			we: -6.994413182098681E+00;
			wf: 3.293987131616894E+00;
			wb2: -1.881032803339283E-01;
			wc2: 2.812945435181010E+00;
			wd2: -1.495096839176419E+01;
			we2: 3.349416467551858E+01;
			wf2: -3.433024909629221E+01;
			wg2: 1.314308200442166E+01;

			bb: 8.376727344831676E-01;
			bc: -3.418495999327269E+00;
			bd: 8.078054837335609E+00;
			be: -1.209938703324099E+01;
			bf: 9.520315785756406E+00;
			bg: -2.919340722745241E+00;
			ba2: 5.088652898054800E-01;
			bb2: -9.767371127415029E+00;
			bc2: 4.910705739925203E+01;
			bd2: -1.212150899746360E+02;
			be2: 1.606205314047741E+02;
			bf2: -1.085660871669277E+02;
			bg2: 2.931582214601388E+01;
		}
		inline min(float a, float b) = Math.min(a, b);
		inline max(float a, float b) = Math.max(a, b);
		inline clamp(float val, float min, float max) = val < min ? min : val > max ? max : val;

		if (base == 0) {
			// HACK: `res * (lum_pos * blacks + lum) / lum` is inf or nan
			return 0;
		}

		float lum = base;
		float x = lum;
		float x2 = x*x;
		float x3 = x2*x;

		// whites
		float lum_pos = min(1 - lum, wb*x + wc*x2+ wd*x3 + we*x2*x2 + wf*x2*x3);
		float lum_neg = max(-lum, wb2*x + wc2*x2+ wd2*x3 + we2*x2*x2 + wf2*x2*x3 + wg2*x3*x3);
		float res = whites>=0.0 ? (lum_pos*whites+lum) : (lum-lum_neg*whites);
		res = clamp(res, 0.0, 1.0);

		// blacks
		lum_pos = min(1 - lum, bb*x + bc*x2+ bd*x3 + be*x2*x2 + bf*x2*x3 + bg*x3*x3);
		lum_neg = max(-lum, lum <= 0.23 ? -lum : ba2 + bb2*x + bc2*x2+ bd2*x3 + be2*x2*x2 + bf2*x2*x3 + bg2*x3*x3);
		res = blacks>=0.0 ? res*(lum_pos*blacks+lum)/lum : res * (lum-lum_neg*blacks)/lum;
		return clamp(res, 0.0, 1.0);
	}

	// adapted from: https://stackoverflow.com/questions/29073174/algorithm-behind-the-shadow-highlight-filter-in-photoshop
	float ShadowsHighlights(float color, float shadows, float highlights) {
		float h = highlights * 0.05 * (float.pow(8.0, color) - 1);
		float s = shadows * 0.05 * (float.pow(8.0, 1.0 - color) - 1);
		return color + h + s;
	}

	for (int idx = 0; idx < lut.length; idx += 1) {
		float val = idx / 256f;

		// use luminosity channel for: highlights, shadows, whites, blacks
		val = WhitesBlacks(val, whites, blacks);
		val = ShadowsHighlights(val, shadows, highlights);
		int lum = clamp_s8(256 * val);

		// use rgb channel for: brightness, contrast, gamma
		val = idx / 256f;
		// apply gamma
		val = float.pow(val, 1 / gamma);
		// apply contrast
		val = contrast * (val - .5f) + .5f;
		// apply brightness
		val = brightness + val;

		int rgb = clamp_s8(256 * val);
		lut[idx].r = rgb;
		lut[idx].g = rgb;
		lut[idx].b = rgb;
		lut[idx].a = lum;
	}
}
void calcAutoEqualize(argb lut[256], Image image, bool luminosity) {
	uint32 hist[256] = {};
	if (!luminosity) {
		// todo: remove rgb stretch
		uint32 sumR = 0;
		uint32 sumG = 0;
		uint32 sumB = 0;
		uint32 histR[256] = {};
		uint32 histG[256] = {};
		uint32 histB[256] = {};
		image.calcRgbHist(null, &hist);
		for (uint32 i = 0; i < 256; i += 1) {
			histR[i] = sumR += rch(argb(hist[i]));
			histG[i] = sumG += gch(argb(hist[i]));
			histB[i] = sumB += bch(argb(hist[i]));
		}
		uint32 sumRgb = (sumR + sumG + sumB) / 3;
		for (uint32 i = 0; i < 256; i += 1) {
			lut[i] = _argb(i,
				clamp_u8(histR[i] * 255 / sumRgb),
				clamp_u8(histG[i] * 255 / sumRgb),
				clamp_u8(histB[i] * 255 / sumRgb)
			);
		}
		return;
	}

	image.calcLumHist(null, &hist);
	uint32 sum = 0;
	for (uint32 i = 0; i < lut.length; i += 1) {
		hist[i] = sum += hist[i];
	}
	for (uint32 i = 0; i < lut.length; i += 1) {
		uint32 l = clamp_u8(hist[i] * 255 / sum);
		lut[i] = _argb(l, i, i, i);
	}
}

inline "/cmplGfx/lib/micro.ui.ci";
Histogram histogram = {
	enabled: false;
};
Histogram curves = {
	lines: true;
	enabled: false;
};

Slider brightness = {
	text: "brightness";
	minimum: -256;
	maximum: +256;
	divisor: 256;
};
Slider contrast = {
	text: "contrast";
	value: 256;
	minimum: -256;
	maximum: +512;
	divisor: 256;
};
Slider gamma = {
	text: "gamma";
	value: 100;
	minimum: 1;
	maximum: 1000;
	divisor: 100;
};
Slider highlights = {
	text: "highlights";
	minimum: -256;
	maximum: +256;
	divisor: 256;
};
Slider shadows = {
	text: "shadows";
	minimum: -256;
	maximum: +256;
	divisor: 256;
};
Slider whites = {
	text: "whites";
	minimum: -256;
	maximum: +256;
	divisor: 256;
};
Slider blacks = {
	text: "blacks";
	minimum: -256;
	maximum: +256;
	divisor: 256;
};

char options[*][] = {
	"luminosity";
	"rgb stretch";
};
Switch auto = {
	text: "auto";
	states: options;
	focusable: true;
};

Button separator = {
	text: null;
	height: 1;
	enabled: false;
};
Slider time = {
	text: "time";
	enabled: false;
	onDrawSlider: null;
};

Widget ui = Widget(offs, -30,
	histogram, curves, separator,
	brightness, contrast, gamma,
	highlights, shadows, whites, blacks,
	separator, auto,
	separator, time
);

int onEvent(int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	if (!ui.onEvent(action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	uint64 start = System.millis();
	offs.resize(null, back, null, 1);
	if (ui.isFocused(brightness, contrast, gamma, highlights, shadows, whites, blacks)) {
		brightnessContrastGamma(&curves.data,
			brightness.valueF64(),
			contrast.valueF64(),
			gamma.valueF64(),
			highlights.valueF64(),
			shadows.valueF64(),
			whites.valueF64(),
			blacks.valueF64()
		);
	}
	else if (ui.isFocused(auto)) {
		calcAutoEqualize(&curves.data, offs, auto.selected == 0);
	}

	offs.colorMap(null, curves.data);
	histogram.update(offs);
	time.value = System.millis() - start;
	return ui.draw();
}
