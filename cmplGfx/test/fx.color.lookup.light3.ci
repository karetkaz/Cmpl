// Brightness contrast gamma demo.

gxSurf back = gxSurf("asset/image/forest.png", 32);
gxSurf font = gxSurf.openFnt("asset/font/modern-1.fnt");
gxSurf offs = gxSurf(back.width(), back.height(), back.depth());

void buildLut(uint32 lut[256], float highlights, float shadows, float whites, float blacks) {
	argb lut2[*] = lut;

	// adapted from: https://github.com/AHDCreative/ffxivitashader/blob/5422e0885cf72b6a0264cc6881056ea39d322c85/v1/dx11/reshade-shaders/Shaders/qUINT_lightroom.fx
	for (int idx = 0; idx < lut.length; idx += 1) {
		float val = idx / 256f;

		float x = val;
		float contrast = 1;
		float midtones = 0;
		inline exp2(float x) = float.pow(2, x);
		inline smoothstep(float a, float b, float t) = Math.smooth(t, a, b);

		// x = saturate(pow(x * exposure, gamma));
		float blacks_mult   	= smoothstep(0.25, 0.00, x);
		float shadows_mult  	= smoothstep(0.00, 0.25, x) * smoothstep(0.50, 0.25, x);
		float midtones_mult 	= smoothstep(0.25, 0.50, x) * smoothstep(0.75, 0.50, x);
		float highlights_mult  	= smoothstep(0.50, 0.75, x) * smoothstep(1.00, 0.75, x);
		float whites_mult  		= smoothstep(0.75, 1.00, x);

		x = float.pow(x, float.pow(2,
				blacks_mult * blacks +
				shadows_mult * shadows +
				midtones_mult * midtones +
				highlights_mult * highlights +
				whites_mult * whites
				// - 1
		));
		//x = Math.lerp(x, x * x * (3 - 2 * x), contrast);

		int rgb = grayClamp(int(256 * x));
		lut2[idx].r = idx;
		lut2[idx].g = idx;
		lut2[idx].b = idx;
		lut2[idx].a = rgb;
	}
}

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "/lib/gfx/micro.ui.ci";

	static Slider highlights = {
		text: "highlights";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider shadows = {
		text: "shadows";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider whites = {
		text: "whites";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider blacks = {
		text: "blacks";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Histogram histogram = {
		text: null;
		image: offs;
		showLines: true;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};

	static Layout ui = Layout(offs, -30, 30, font,
		histogram,
		highlights,
		shadows,
		whites,
		blacks,
		time
	);

	bool redraw = uiEvent(ui, action, button, x, y);
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}
	if (redraw) {
		uint64 start = System.millis();
		offs.resize(null, back, null, 1);
		buildLut(histogram.lut, highlights.valFlt(), shadows.valFlt(), whites.valFlt(), blacks.valFlt());
		offs.colorMap(null, histogram.lut);
		offs.calcHist(null, 0x00ffffff, histogram.hist);
		time.value = System.millis() - start;
		ui.draw();
	}
	return 0;
}
