// Hue saturation brightness demo.

gxSurf font = gxSurf.openFnt("asset/font/modern-1.fnt");
gxSurf surf = gxSurf("asset/image/forest.png", 32);
gxSurf offs = gxSurf(surf);
gxSurf blur = gxSurf(surf);

static if (typename(gxSurf.blur) == null) {
void blur(gxSurf img, int radius, double sigma) {
	static double gauss(double x, double sigma) {
		inline SQRT_2_PI_INV = 0.398942280401432677939946059935;
		double t = x / sigma;
		/*switch (dx) {
			default:
				break;
			case -1:
				return 1;
			case 0:
				return SQRT_2_PI_INV * exp(-0.5*t*t) / sigma;
			case 1:
				return -x * SQRT_2_PI_INV * exp(-0.5*t*t) / (sigma * sigma * sigma);
			case 2:
				return (x * x - sigma * sigma) * SQRT_2_PI_INV * exp(-0.5*t*t) / (sigma * sigma * sigma * sigma * sigma);
		}*/
		return SQRT_2_PI_INV * double.exp(-0.5 * t * t) / sigma;
	}

	uint32 kernel[1024];
	int size = radius * 2 + 1;
	assert(size < kernel.length);

	float64 kernelSum = 0;
	float64 kernelFlt[kernel.length];
	for (int i = 0; i < size; i += 1) {
		kernelFlt[i] = gauss(radius - i, sigma);
		kernelSum += kernelFlt[i];
	}

	for (int i = 0; i < size; i += 1) {
		kernel[i] = 65536 * (kernelFlt[i] / kernelSum);
	}

	int width = img.width();
	int height = img.height();

	gxSurf tmp = gxSurf(width, height, img.depth());

	// x direction: inout -> temp
	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			uint32 r = 0;
			uint32 g = 0;
			uint32 b = 0;
			for (int i = 0; i < size; i += 1) {
				int _x = x + i - radius;
				if (_x >= 0 && _x < width) {
					argb col = argb(img.get(_x, y));
					uint32 _k = kernel[i];
					r += _k * rch(col);
					g += _k * gch(col);
					b += _k * bch(col);
				}
			}
			tmp.set(x, y, argb(r >> 16, g >> 16, b >> 16));
		}
	}

	// y direction: temp -> inout
	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			uint32 r = 0;
			uint32 g = 0;
			uint32 b = 0;
			for (int i = 0; i < size; i += 1) {
				int _y = y + i - radius;
				if (_y >= 0 && _y < height) {
					argb col = argb(tmp.get(x, _y));
					uint32 _k = kernel[i];
					r += _k * rch(col);
					g += _k * gch(col);
					b += _k * bch(col);
				}
			}
			img.set(x, y, argb(r >> 16, g >> 16, b >> 16));
		}
	}

	tmp.destroy();
}
}

static if (typename(gxSurf.blend) == null) {
void blend(gxSurf surf, int32 x0, int32 y0, const gxSurf src, const gxRect roi&, int32 alpha, vec4f blend(vec4f base, vec4f with)) {
	int width = surf.width();
	int height = surf.height();

	assert(roi == null, "not implemented");
	assert(blend == null, "not implemented");

	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			inline lerp(int32 l, int32 r) = int32(l + alpha * (r - l) / 256);
			argb col = argb(src.get(x,y));
			int r = rch(col);
			int g = gch(col);
			int b = bch(col);

			col = argb(surf.get(x,y));
			r = lerp(rch(col), r);
			g = lerp(gch(col), g);
			b = lerp(bch(col), b);

			surf.set(x + x0, y + y0, argb(r, g, b));
		}
	}
}
}

inline blur(gxSurf surf, int radius) = surf.blur(radius, 0.3 * (radius - 1) + 0.8);

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);

blur.destroy();
offs.destroy();
surf.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "lib/micro.ui.ci";

	static Checker autoUpdate = {
		text: "auto update";
		checked: true;
	};
	static Slider amount = {
		text: "amount";
		minValue: 0;
		maxValue: 512;
	};
	static Slider radius = {
		text: "radius";
		value: 50;
		divValue: 10;
		minValue: 0;
		maxValue: 200;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};
	static Layout layout = Layout(offs, font, autoUpdate, amount, radius, time);

	static int oldRadius = 0;

	bool reCalculate = action == Gui.WINDOW_INIT;
	if (uiEvent(layout, action, button, x, y)) {
		reCalculate = true;
	}
	else if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
		if (button == '\r') {
			amount.value = 0;
			radius.value = 50;
			reCalculate = true;
		}
		if (button == ' ') {
			trace("dumping screen");
			offs.saveBmp("out/dump.bmp", 0);
		}
	}

	if (reCalculate) {
		// clamp input values
		int amountValue = amount.val();
		int radiusValue = radius.val();

		uint64 start = System.millis();
		offs.resize(null, surf, null, 1);
		if (autoUpdate.checked) {
			if (oldRadius != radiusValue) {
				oldRadius = radiusValue;
				blur.copy(0, 0, surf, null);
				blur.blur(radiusValue);
			}
			offs.blend(0, 0, blur, null, -amountValue, null);
		}
		offs.drawHist(null, 0x00ffffff);
		time.value = System.millis() - start;

		layout.draw(30, 30);
	}

	return 0;
}
