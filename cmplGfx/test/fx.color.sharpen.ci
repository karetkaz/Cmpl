// Hue saturation brightness demo.

gxSurf back = gxSurf("asset/image/forest.png", 32);
gxSurf font = gxSurf.openFnt("asset/font/modern-1.fnt");
gxSurf offs = gxSurf(back.width(), back.height(), back.depth());

inline blur(gxSurf surf, int radius) = surf.blur(radius, 0.3 * (radius - 1) + 0.8);

void sharpen(gxSurf surf, int amount, int radius) {
	gxSurf blur = gxSurf(surf);
	blur.blur(radius);
	surf.copy(0, 0, blur, null, -amount);

	/* native alpha blend function is faster
	int width = surf.width();
	int height = surf.height();
	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			inline lerp(int32 x, int32 y) = int32(x + -amount * (y - x) / 255);
			argb col = argb(blur.get(x,y));
			int r = rch(col);
			int g = gch(col);
			int b = bch(col);

			col = argb(surf.get(x,y));
			r = lerp(rch(col), r);
			g = lerp(gch(col), g);
			b = lerp(bch(col), b);

			surf.set(x, y, argb(r, g, b));
		}
	}// */
	blur.destroy();
}

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "lib/micro.ui.ci";

	static Checker autoUpdate = {
		text: "auto update";
		checked: true;
	};
	static Slider amount = {
		text: "amount";
		minValue: 0;
		maxValue: 512;
	};
	static Slider radius = {
		text: "radius";
		value: 50;
		divValue: 10;
		minValue: 0;
		maxValue: 200;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};
	static Layout layout = Layout(offs, font, autoUpdate, amount, radius, time);

	bool reCalculate = action == Gui.WINDOW_INIT;
	if (uiEvent(layout, action, button, x, y)) {
		reCalculate = true;
	}
	else if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
		if (button == '\r') {
			amount.value = 0;
			radius.value = 50;
			reCalculate = true;
		}
		if (button == ' ') {
			trace("dumping screen");
			offs.saveBmp("out/dump.bmp", 0);
		}
	}

	if (reCalculate) {
		// clamp input values
		int amountValue = amount.val();
		int radiusValue = radius.val();

		uint64 start = System.millis();
		offs.resize(null, back, null, 1);
		if (autoUpdate.checked) {
			offs.sharpen(amountValue, radiusValue);
		}
		offs.drawHist(null, 0x00ffffff);
		time.value = System.millis() - start;

		layout.draw(30, 30);
	}

	return 0;
}
