/* Blur, sharpen and blend images with alpha mask
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse to move the rectangle of the mask, use shift to resize it
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image surf = Image("asset/image/forest.jpg", 32);
Image offs = Image(surf);
Image blur = Image(surf);

inline "/cmplGfx/lib/micro.ui.ci";

bool onTouchEvent(Button view, const Rect rect&, const TouchEvent event&);
bool onResetClick(Button view);
Histogram histogram = {
	enabled: false;
};

Slider sldBlur = {
	text: "Blur";
	value: 2000;
	minimum: 30;
	maximum: 2000;
	divisor: 100;
};
Slider sldSharpness = {
	text: "Sharp";
	value: 512;
	minimum: 256;
	maximum: 1024;
	divisor: 256;
};

Button btnLinear = {
	text: "Linear";
	onTouchEvent: onTouchEvent;
};
Button btnReflect = {
	text: "Reflect";
	onTouchEvent: onTouchEvent;
};
Button btnRadial = {
	text: "Radial";
	onTouchEvent: onTouchEvent;
};
Button btnSquare = {
	text: "Square";
	onTouchEvent: onTouchEvent;
};

Slider sldHardness = {
	text: "Hardness";
	minimum: -255;
	maximum: 255;
	focusable: false;
};
Slider sldAlpha = {
	text: "Alpha";
	minimum: -255;
	maximum: 255;
	value: 255;
	focusable: false;
};
char scaleMove[*][] = {
	"Move",
	"Scale"
};
Switch chkMoveScale = {
	states: scaleMove;
	text: "Drag mode";
	focusable: false;
};
Switch chkRect = {
	text: "Show rect";
	focusable: false;
};
Switch chkMask = {
	text: "Show mask";
	focusable: false;
};
Button btnReset = {
	text: "Reset rect";
	focusable: false;
	onClick: onResetClick;
};
Panel panMask = {
	visible: false;
};

DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

//inline blur(Image surf, int radius) = surf.blur(radius, 0.3 * (radius - 1) + 0.8);
inline blur(Image surf, float64 sigma) = surf.blur(Math.max(1., (sigma - 0.8) / 0.3 + 1), sigma);

Rect rect = {
	w: offs.width();
	h: offs.height();
};
int oldRadius = 0;

int onEvent(Window win&, int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}

	Widget ui = win.widget;
	if (!win.dispatchEvent(ui, action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	debug.startTimer();
	if (!sldBlur.isPressed()) {
		if (oldRadius != sldBlur.value) {
			oldRadius = sldBlur.value;
			blur.copy(0, 0, surf, null);
			blur.blur(sldBlur.valueF64());
		}
	}

	// apply blur from cached image
	offs.copy(0, 0, blur, null);

	if (win.hasFocused(btnLinear, btnReflect, btnRadial, btnSquare)) {
		uint32 colors[512] = {};

		if (chkMask.checked()) {
			offs.fill(0xff0000);
		}
		if (btnReflect.isFocused()) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, true);
			offs.gradient(&rect, gradient.MaskLinear, false, ...colors);
		}
		else if (btnLinear.isFocused()) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, false);
			offs.gradient(&rect, gradient.MaskLinear, false, ...colors);
		}
		else if (btnRadial.isFocused()) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, false);
			offs.gradient(&rect, gradient.MaskRadial, false, ...colors);
		}
		else if (btnSquare.isFocused()) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, false);
			offs.gradient(&rect, gradient.MaskSquare, false, ...colors);
		}

		offs.blendDstAlpha(0, 0, surf, null);
		if (chkRect.checked()) {
			int x0 = rect.x;
			int x1 = x0 + rect.w;
			int y0 = rect.y;
			int y1 = y0 + rect.h;
			offs.drawRect(x0, y0, x1, y1, 0x00ff00);
			offs.drawLine(x0, y0, x1, y1, 0xff0000);
		}
		panMask.visible(true);
	} else {
		if (sldSharpness.isFocused()) {
			offs.blendAlpha(0, 0, surf, null, sldSharpness.value);
		}
		panMask.visible(false);
	}

	histogram.update(offs);

	return win.draw(ui);
}
bool onTouchEvent(Button view, const Rect r&, const TouchEvent event&) {
	bool result = Button.onTouchEvent(view, r, event);
	if (!event.button) {
		return result;
	}
	if (view.isPressed()) {
		return result;
	}

	// resize
	if (event.isAlt || chkMoveScale.selected == 2) {
		rect.w += event.dx;
		rect.h += event.dy;
		return true;
	}
	// move
	if (event.isShift == bool(chkMoveScale.selected)) {
		rect.x += event.dx;
		rect.y += event.dy;
		return true;
	}

	// resize while the center of the rect is pinned
	rect.x -= event.dx;
	rect.y -= event.dy;
	rect.w += 2 * event.dx;
	rect.h += 2 * event.dy;
	return true;
}
bool onResetClick(Button view) {
	rect.x = 0;
	rect.y = 0;
	rect.w = offs.width();
	rect.h = offs.height();
	return true;
}

Gui.showWindow(offs, onEvent, Widget(
	histogram,
	null, sldBlur, sldSharpness,
	null, btnLinear, btnReflect, btnRadial, btnSquare,
	panMask.addItems(Style.fill,
		null, sldAlpha, sldHardness, chkMoveScale, chkMask, chkRect, btnReset
	),
	null, debug
));
blur.destroy();
offs.destroy();
surf.destroy();
