/* Blur, sharpen and blend images with alpha mask
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse up or down in the window to adjust control value
 */

Image font = Image.openFnt("asset/font/modern-1.fnt");
Image surf = Image("asset/image/forest.png", 32);
Image offs = Image(surf);
Image blur = Image(surf);
Image mask = Image(surf);
mask.fill(0xff0000);

static if (typename(Image.blur) == null) {
inline "/lib/gfx/image/blur.ci";
}

static if (typename(Image.blend) == null) {
inline "/lib/gfx/image/blend.ci";
}

//inline blur(Image surf, int radius) = surf.blur(radius, 0.3 * (radius - 1) + 0.8);
inline blur(Image surf, double sigma) = surf.blur(Math.max(1., (sigma - 0.8) / 0.3 + 1), sigma);

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);

blur.destroy();
offs.destroy();
surf.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "/lib/gfx/micro.ui.ci";

	static Switch autoUpdate = {
		text: "preview";
		checked: true;
		selectable: false;
	};
	static Slider sldBlur = {
		text: "Blur";
		value: 2000;
		minimum: 30;
		maximum: 2000;
		divisor: 100;
	};
	static Slider sldSharpness = {
		text: "Sharp";
		value: 512;
		minimum: 0;
		maximum: 512;
		divisor: 512;
	};
	static Slider sldFade = {
		text: "Hardness";
		minimum: -255;
		maximum: 255;
		group: 1;
		selectable: false;
	};
	static Button btnReflect = {
		text: "Reflect";
	};
	static Button btnLinear = {
		text: "Linear";
	};
	static Button btnRadial = {
		text: "Radial";
	};
	static Button btnSquare = {
		text: "Square";
	};
	static Switch chkInvert = {
		text: "Invert";
		group: 1;
		selectable: false;
	};
	static Switch chkRect = {
		text: "Show rect";
		group: 1;
		selectable: false;
	};
	static Switch chkMask = {
		text: "Show mask";
		group: 1;
		selectable: false;
	};
	static bool onResetClick(Button view);
	static Button btnReset = {
		text: "Reset rect";
		group: 1;
		selectable: false;
		onClick: onResetClick;
	};
	static Histogram histogram = {
		image: offs;
		enabled: false;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};
	static Button separator = {
		text: null;
		height: 3;
		enabled: false;
	};
	static Button separator1 = {
		text: null;
		height: 3;
		group: 1;
		enabled: false;
	};

	static Layout layout = Layout(offs, -30, 30, font,
		histogram, separator,
		sldBlur, sldSharpness,
		btnLinear, btnReflect, btnRadial, btnSquare,
		separator1, sldFade, chkInvert, chkMask, chkRect, btnReset,
		separator, autoUpdate, time);

	static int oldRadius = 0;
	static Rect rect = {
		x: offs.width() / 2;
		y: offs.height() / 2;
		w: offs.width() / 2 - 1;
		h: offs.height() / 2 - 1;
	};

	static bool onResetClick(Button view) {
		rect.x = offs.width() / 2;
		rect.y = offs.height() / 2;
		rect.w = offs.width() / 2 - 1;
		rect.h = offs.height() / 2 - 1;
		return true;
	}

	bool reCalculate = uiEvent(layout, action, button, x, y);
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}
	if (action == Gui.MOUSE_PRESS && button == 2) {
		if (layout.isSelected(btnReflect, btnLinear, btnRadial, btnSquare)) {
			rect.x = x;
			rect.y = y;
		}
	}
	if (action == Gui.MOUSE_MOTION && button == 2) {
		if (layout.isSelected(btnReflect, btnLinear, btnRadial, btnSquare)) {
			rect.w = x - rect.x;
			rect.h = y - rect.y;
			reCalculate = true;
		}
	}
	if (action == Gui.MOUSE_RELEASE && button == 2) {
		if (layout.isSelected(btnReflect, btnLinear, btnRadial, btnSquare)) {
			rect.w = x - rect.x;
			rect.h = y - rect.y;
			reCalculate = true;
		}
	}

	if (reCalculate) {
		// clamp input values
		int amountValue = -sldSharpness.val();
		int radiusValue = sldBlur.val();
		Rect roi = {
			x: rect.x - rect.w;
			y: rect.y - rect.h;
			w: rect.w * 2;
			h: rect.h * 2;
		};

		uint64 start = System.millis();
		offs.resize(null, surf, null, 1);
		if (autoUpdate.checked) {
			argb startColor = argb(0);
			argb endColor = argb(255);
			bool repeat = false;
			bool invert = chkInvert.checked;
			uint32 colors[512];
			int alpha = sldFade.val();

			inline blend() = offs.blend(0, 0, chkMask.checked ? mask : blur, null, 256, true, null);
			if (oldRadius != radiusValue) {
				oldRadius = radiusValue;
				blur.copy(0, 0, surf, null);
				blur.blur(sldBlur.valFlt());
			}
			if (layout.isSelected(sldBlur)) {
				offs.copy(0, 0, blur, null);
			}
			else if (layout.isSelected(sldSharpness)) {
				offs.blend(0, 0, blur, null, amountValue, false, null);
			}
			else if (layout.isSelected(btnReflect)) {
				lerpLut(colors, alpha, invert, endColor, startColor, endColor);
				offs.gradient(roi, gradient.MaskLinear, repeat, ...colors);
				blend();
			}
			else if (layout.isSelected(btnLinear)) {
				lerpLut(colors, alpha, invert, startColor, endColor);
				offs.gradient(roi, gradient.MaskLinear, repeat, ...colors);
				blend();
			}
			else if (layout.isSelected(btnRadial)) {
				lerpLut(colors, alpha, invert, startColor, endColor);
				offs.gradient(roi, gradient.MaskRadial, repeat, ...colors);
				blend();
			}
			else if (layout.isSelected(btnSquare)) {
				lerpLut(colors, alpha, invert, startColor, endColor);
				offs.gradient(roi, gradient.MaskSquare, repeat, ...colors);
				blend();
			}
		}
		if (chkRect.checked) {
			offs.drawRect(roi, 0xff00ff);
		}

		offs.calcHist(null, 0x00ffffff, histogram.data);
		time.value = System.millis() - start;
		if (layout.isSelected(btnReflect, btnLinear, btnRadial, btnSquare)) {
			layout.setGroup(1);
		} else {
			layout.setGroup(2);
		}
		layout.draw();
	}
	return 0;
}
