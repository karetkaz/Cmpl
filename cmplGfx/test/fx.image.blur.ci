/* Blur, sharpen and blend images with alpha mask
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse to move the rectangle of the mask, use shift to resize it
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image surf = Image("asset/image/forest.jpg", 32);
Image offs = Image(surf);
Image blur = Image(surf);
int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
blur.destroy();
offs.destroy();
surf.destroy();

inline "/cmplGfx/lib/micro.ui.ci";

bool onMouseEvent(Button view, const Rect rect&, const MouseEvent event&);
bool onResetClick(Button view);
Histogram histogram = {
	enabled: false;
};

Slider sldBlur = {
	text: "Blur";
	value: 2000;
	minimum: 30;
	maximum: 2000;
	divisor: 100;
};
Slider sldSharpness = {
	text: "Sharp";
	value: 512;
	minimum: 256;
	maximum: 1024;
	divisor: 256;
};

Button btnLinear = {
	text: "Linear";
	onMouseEvent: onMouseEvent;
};
Button btnReflect = {
	text: "Reflect";
	onMouseEvent: onMouseEvent;
};
Button btnRadial = {
	text: "Radial";
	onMouseEvent: onMouseEvent;
};
Button btnSquare = {
	text: "Square";
	onMouseEvent: onMouseEvent;
};

Slider sldHardness = {
	text: "Hardness";
	minimum: -255;
	maximum: 255;
	visible: 1;
	focusable: false;
};
Slider sldAlpha = {
	text: "Alpha";
	minimum: -255;
	maximum: 255;
	value: 255;
	visible: 1;
	focusable: false;
};
Switch chkMoveScale = {
	text: "Drag mode";
	visible: 1;
	focusable: false;
};
Switch chkRect = {
	text: "Show rect";
	visible: 1;
	focusable: false;
};
Switch chkMask = {
	text: "Show mask";
	visible: 1;
	focusable: false;
};
Button btnReset = {
	text: "Reset rect";
	visible: 1;
	focusable: false;
	onClick: onResetClick;
};

Slider time = {
	text: "time";
	enabled: false;
	onDrawSlider: null;
};
Button separator = {
	text: null;
	height: 3;
	enabled: false;
};
Button separator1 = {
	text: null;
	height: 3;
	visible: 1;
	enabled: false;
};

Widget ui = Widget(offs,
	histogram, separator,
	sldBlur, sldSharpness,
	btnLinear, btnReflect, btnRadial, btnSquare,
	separator1, sldAlpha, sldHardness, chkMoveScale, chkMask, chkRect, btnReset,
	separator, time
);

//inline blur(Image surf, int radius) = surf.blur(radius, 0.3 * (radius - 1) + 0.8);
inline blur(Image surf, float64 sigma) = surf.blur(Math.max(1., (sigma - 0.8) / 0.3 + 1), sigma);

Rect rect = {
	w: offs.width();
	h: offs.height();
};
int oldRadius = 0;

int onEvent(int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	if (!ui.onEvent(action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	uint64 start = System.millis();
	if (!ui.isPressed(sldBlur)) {
		if (oldRadius != sldBlur.value) {
			oldRadius = sldBlur.value;
			blur.copy(0, 0, surf, null);
			blur.blur(sldBlur.valueF64());
		}
	}

	// apply blur from cached image
	offs.copy(0, 0, blur, null);

	if (ui.isFocused(btnLinear, btnReflect, btnRadial, btnSquare)) {
		uint32 colors[512] = {};

		if (chkMask.checked()) {
			offs.fill(0xff0000);
		}
		if (ui.isFocused(btnReflect)) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, true);
			offs.gradient(&rect, gradient.MaskLinear, false, ...colors);
		}
		else if (ui.isFocused(btnLinear)) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, false);
			offs.gradient(&rect, gradient.MaskLinear, false, ...colors);
		}
		else if (ui.isFocused(btnRadial)) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, false);
			offs.gradient(&rect, gradient.MaskRadial, false, ...colors);
		}
		else if (ui.isFocused(btnSquare)) {
			alphaLut(colors, sldHardness.value, sldAlpha.value, false);
			offs.gradient(&rect, gradient.MaskSquare, false, ...colors);
		}

		offs.blend(0, 0, surf, null, 256, true, null);
		if (chkRect.checked()) {
			offs.drawRect(rect, 0x00ff00);
		}
	}
	else if (ui.isFocused(sldBlur)) {
	}
	else if (ui.isFocused(sldSharpness)) {
		offs.blend(0, 0, surf, null, sldSharpness.value, false, null);
	}

	histogram.update(offs);
	time.value = System.millis() - start;

	if (ui.isFocused(btnReflect, btnLinear, btnRadial, btnSquare)) {
		ui.setGroup(1);
	} else {
		ui.setGroup(2);
	}
	return ui.draw();
}
bool onMouseEvent(Button view, const Rect r&, const MouseEvent event&) {
	bool result = Button.onMouseEvent(view, r, event);
	if (ui.isPressed(view)) {
		return result;
	}
	if (!event.button) {
		return result;
	}

	// resize
	if (event.isAlt || chkMoveScale.selected == 2) {
		rect.w += event.dx;
		rect.h += event.dy;
		return true;
	}
	// move
	if (event.isShift == bool(chkMoveScale.selected)) {
		rect.x += event.dx;
		rect.y += event.dy;
		return true;
	}

	// resize while the center of the rect is pinned
	rect.x -= event.dx;
	rect.y -= event.dy;
	rect.w += 2 * event.dx;
	rect.h += 2 * event.dy;
	return true;
}
bool onResetClick(Button view) {
	rect.x = 0;
	rect.y = 0;
	rect.w = offs.width();
	rect.h = offs.height();
	return true;
}

