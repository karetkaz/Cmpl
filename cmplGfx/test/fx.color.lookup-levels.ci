/* Color levels demo.
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back);

void levels(argb lut[256], int brightness, int x0, int x1, int y0, int y1) {
	if (x1 == x0) {
		x1 = x0 + 1;
	}
	for (int idx = 0; idx < lut.length; idx += 1) {
		int val = y0 + (idx - x0) * (y1 - y0) / (x1 - x0);
		val = Math.max(val, Math.min(y0, y1));
		val = Math.min(val, Math.max(y0, y1));
		int rgb = sat_s8(val + brightness);
		lut[idx].r = rgb;
		lut[idx].g = rgb;
		lut[idx].b = rgb;
		lut[idx].a = idx;
	}
}
void levels(argb lut[256], int brightness, int output, int input) {
	int x0 = input > 0 ? 0 : -input;
	int x1 = input < 0 ? 255 : 255 - input;
	int y0 = output < 0 ? 0 : output;
	int y1 = output > 0 ? 255 : 255 + output;
	return levels(&lut, brightness, x0, x1, y0, y1);
}

bool syncInputOutput(Slider slider, int value);
bool showHideAdvanced(Switch switch, Rect rect&);

Histogram histogram = {
	enabled: false;
};
Histogram lookup = {
	lines: true;
	enabled: false;
	focusable: false;
};

DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

Switch chkAdvanced = {
	static bool onClick(Switch switch) {
		switch.invalidate();
		return Switch.onClick(switch);
	}

	text: "Advanced";
	onClick: onClick;
};

Slider sldBrightness = {
	text: "Brightness";
	minimum: -256;
	maximum: 256;
};

Slider sldInput = {
	text: "Input";
	minimum: -255;
	maximum: 255;
	onUpdate: syncInputOutput;
};
Slider sldInputMin = {
	text: " Input.min";
	maximum: sldInput.maximum;
	value: 0;
	onUpdate: syncInputOutput;
	onMeasure: showHideAdvanced;
};
Slider sldInputMax = {
	text: " Input.max";
	maximum: sldInput.maximum;
	value: sldInput.maximum;
	onUpdate: syncInputOutput;
	onMeasure: showHideAdvanced;
};

Slider sldOutput = {
	text: "Output";
	minimum: -255;
	maximum: 255;
	onUpdate: syncInputOutput;
};
Slider sldOutputMin = {
	text: " Output.min";
	maximum: sldOutput.maximum;
	value: 0;
	onUpdate: syncInputOutput;
	onMeasure: showHideAdvanced;
};
Slider sldOutputMax = {
	text: " Output.max";
	maximum: sldOutput.maximum;
	value: sldOutput.maximum;
	onUpdate: syncInputOutput;
	onMeasure: showHideAdvanced;
};

int onEvent(Window win&, int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == Gui.KEY_CODE_ESC) {
		// exit when releasing escape key
		return -1;
	}
	Widget ui = win.widget;
	if (!win.dispatchEvent(ui, action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	debug.startTimer();
	levels(&lookup.data, sldBrightness.value, sldInputMin.value, sldInputMax.value, sldOutputMin.value, sldOutputMax.value);
	offs.copy(0, 0, back, null);
	offs.colorMap(null, lookup.data);
	histogram.update(offs);
	return win.draw(ui);
}
bool syncInputOutput(Slider slider, int value) {
	bool result = Slider.onUpdate(slider, value);
	if (slider == sldInput) {
		result |= Slider.onUpdate(sldInputMin, value > 0 ? 0 : -value);
		result |= Slider.onUpdate(sldInputMax, value < 0 ? sldInput.maximum : sldInput.maximum - value);
		return result;
	}
	if (slider == sldOutput) {
		result |= Slider.onUpdate(sldOutputMin, value < 0 ? 0 : value);
		result |= Slider.onUpdate(sldOutputMax, value > 0 ? sldOutput.maximum : sldOutput.maximum + value);
		return result;
	}
	if (slider == sldInputMin || slider == sldInputMax) {
		result |= Slider.onUpdate(sldInput, 0);
		return result;
	}
	if (slider == sldOutputMin || slider == sldOutputMax) {
		result |= Slider.onUpdate(sldOutput, 0);
		return result;
	}
	return result;
}
bool showHideAdvanced(Switch switch, Rect rect&) {
	if (!chkAdvanced.checked()) {
		// view is hidden
		rect.w = rect.h = 0;
		return false;
	}
	return Switch.onMeasure(switch, &rect);
}

Gui.showWindow(offs, onEvent, FxWidget(
	histogram,
	lookup,

	null,
	sldBrightness,
	sldOutput,
	sldOutputMin,
	sldOutputMax,
	sldInput,
	sldInputMin,
	sldInputMax,
	chkAdvanced,

	null, debug
));
offs.destroy();
back.destroy();
