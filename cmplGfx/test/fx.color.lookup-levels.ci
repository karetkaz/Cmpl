/* Color levels demo.
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back.width(), back.height(), back.depth());
int onEvent(int action, int button, int x, int y);
Gui.showWindow(offs, onEvent);
offs.destroy();
back.destroy();

void levels(argb lut[256], int brightness, int x0, int x1, int y0, int y1) {
	if (x1 == x0) {
		x1 = x0 + 1;
	}
	for (int idx = 0; idx < lut.length; idx += 1) {
		int val = y0 + (idx - x0) * (y1 - y0) / (x1 - x0);
		val = Math.max(val, Math.min(y0, y1));
		val = Math.min(val, Math.max(y0, y1));
		int rgb = clamp_s8(val + brightness);
		lut[idx].r = rgb;
		lut[idx].g = rgb;
		lut[idx].b = rgb;
		lut[idx].a = idx;
	}
}
void levels(argb lut[256], int brightness, int output, int input) {
	int x0 = input > 0 ? 0 : -input;
	int x1 = input < 0 ? 255 : 255 - input;
	int y0 = output < 0 ? 0 : output;
	int y1 = output > 0 ? 255 : 255 + output;
	return levels(&lut, brightness, x0, x1, y0, y1);
}

inline "/cmplGfx/lib/micro.ui.ci";
bool updateInputOutput(Slider slider, int value);
bool resetInputOutput(Slider slider);

Histogram histogram = {
	enabled: false;
};
Histogram lookup = {
	lines: true;
	enabled: false;
	focusable: false;
};

Slider time = {
	text: "time";
	enabled: false;
	onDrawSlider: null;
};

Switch chkAdvanced = {
	text: "Advanced";
};

Slider sldBrightness = {
	text: "Brightness";
	minimum: -256;
	maximum: 256;
};

Slider sldInput = {
	text: "Input";
	minimum: -255;
	maximum: 255;
	onUpdate: updateInputOutput;
	onReset: resetInputOutput;
};
Slider sldInputMin = {
	visible: 1;
	text: " Input.min";
	maximum: sldInput.maximum;
	value: 0;
	onUpdate: updateInputOutput;
	onReset: resetInputOutput;
};
Slider sldInputMax = {
	visible: 1;
	text: " Input.max";
	maximum: sldInput.maximum;
	value: sldInput.maximum;
	onUpdate: updateInputOutput;
	onReset: resetInputOutput;
};

Slider sldOutput = {
	text: "Output";
	minimum: -255;
	maximum: 255;
	onUpdate: updateInputOutput;
	onReset: resetInputOutput;
};
Slider sldOutputMin = {
	visible: 1;
	text: " Output.min";
	maximum: sldOutput.maximum;
	value: 0;
	onUpdate: updateInputOutput;
	onReset: resetInputOutput;
};
Slider sldOutputMax = {
	visible: 1;
	text: " Output.max";
	maximum: sldOutput.maximum;
	value: sldOutput.maximum;
	onUpdate: updateInputOutput;
	onReset: resetInputOutput;
};

Widget ui = Widget().addItems(
	histogram,
	lookup,
	Layout.divider,
	sldBrightness,
	sldOutput,
	sldOutputMin,
	sldOutputMax,
	sldInput,
	sldInputMin,
	sldInputMax,
	chkAdvanced,
	Layout.divider, time
);

int onEvent(int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	if (!ui.onEvent(action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}
	if (action == Gui.WINDOW_INIT) {
		ui.setGroup(2);
	}

	uint64 start = System.millis();
	ui.setGroup(~(1 << chkAdvanced.selected));
	levels(&lookup.data, sldBrightness.value, sldInputMin.value, sldInputMax.value, sldOutputMin.value, sldOutputMax.value);
	offs.resize(null, back, null, 1);
	offs.colorMap(null, lookup.data);
	histogram.update(offs);

	time.value = System.millis() - start;
	return ui.draw(offs);
}

bool updateInputOutput(Slider slider, int value) {
	if (slider == sldInput) {
		Slider.onUpdate(sldInput, value);
		Slider.onUpdate(sldInputMin, value > 0 ? 0 : -value);
		Slider.onUpdate(sldInputMax, value < 0 ? sldInput.maximum : sldInput.maximum - value);
		return true;
	}
	if (slider == sldOutput) {
		Slider.onUpdate(sldOutput, value);
		Slider.onUpdate(sldOutputMin, value < 0 ? 0 : value);
		Slider.onUpdate(sldOutputMax, value > 0 ? sldOutput.maximum : sldOutput.maximum + value);
		return true;
	}
	if (slider == sldInputMin || slider == sldInputMax) {
		Slider.onUpdate(sldInput, 0);
	}
	if (slider == sldOutputMin || slider == sldOutputMax) {
		Slider.onUpdate(sldOutput, 0);
	}
	return Slider.onUpdate(slider, value);
}
bool resetInputOutput(Slider slider) {
	if (slider == sldInput) {
		Slider.onReset(sldInputMin);
		Slider.onReset(sldInputMax);
	}
	if (slider == sldOutput) {
		Slider.onReset(sldOutputMin);
		Slider.onReset(sldOutputMax);
	}
	return Slider.onReset(slider);
}

