// Color picker demo.
inline "/cmplGfx/lib/micro.ui.ci";

struct ColorPicker: View {
	float hue = 0;
	float val = 0;

	static argb get(ColorPicker this, float x, float y) {
		// todo: use integer based color space conversions
		return argb(hsl2rgb(vec4f(x, 1, y)));
	}

	static argb value(ColorPicker this) {
		return this.get(this.hue, 1 - this.val);
	}

	bool onUpdate(ColorPicker this, argb value) {
		return true;
	}

	bool onTouchEvent(ColorPicker this, const Rect rect&, const TouchEvent event&) {
		if (event.release || !event.button) {
			return View.onTouchEvent(this, rect, event);
		}

		this.hue = Math.clamp(float32(event.x - rect.x), 0f, rect.w - 1f) / rect.w;
		this.val = Math.clamp(float32(event.y - rect.y), 0f, rect.h - 1f) / rect.h;
		return this.onUpdate(this, this.value());
	}

	bool onMeasure(Histogram this, Rect rect&) {
		if (this.height == 0) {
			rect.h = 128;
		} else {
			rect.h = this.height;
		}
		return View.onMeasure(this, &rect);
	}

	void onDraw(ColorPicker this, Image offs, const Rect rect) {
		for (int y = 0; y < rect.h; y += 1) {
			float32 py = float32(y) / rect.h;
			for (int x = 0; x < rect.w; x += 1) {
				float32 px = float32(x) / rect.w;
				argb color = this.get(px, 1 - py);
				offs.set(x + rect.x, y + rect.y, color);
			}
		}
		int x = rect.x + Math.clamp(float32(this.hue * rect.w), 0f, rect.w - 1f);
		int y = rect.y + Math.clamp(float32(this.val * rect.h), 0f, rect.h - 1f);
		offs.drawOval(x - 4, y - 4, x + 4, y + 4, 0x000000);
		offs.drawOval(x - 2, y - 2, x + 2, y + 2, 0xffffff);
		offs.drawOval(x - 1, y - 1, x + 1, y + 1, 0x000000);
	}
}

static bool printStyle(Button button) {
	Style style& = button.style;
	debug("style", style);
}
static bool updateColor(ColorPicker this, argb value);
static bool updateTheme(Switch this, int value);

ColorPicker colorPicker = {
	width: 360;
	height: 256/2;
	focusable: false;
	onUpdate: updateColor;
};

char themes[*][] = {
	"Light",
	"Dark"
};
Switch theme = {
	text: "Theme";
	states: themes;
	selected: 1;
	onUpdate: updateTheme;
};

Button button = {
	text: "Dump theme";
	onClick: printStyle;
};

Slider slider = {
	text: "Slider";
	value: 1 << 30;
};

DebugView debug = {
	focusable: false;
};

Gui.showWindow(Widget(0, 0).addItems(
	colorPicker,

	null,
	theme,
	button,
	slider,

	null,
	debug
));

static void updateTheme() {
	Widget ui = theme.getWidget();
	if (theme.selected != 0) {
		ui.theme(Style.dark, colorPicker.value());
	} else {
		ui.theme(Style.light, colorPicker.value());
	}
}
static bool updateColor(ColorPicker this, argb value) {
	if (!ColorPicker.onUpdate(this, value)) {
		return false;
	}
	updateTheme();
	return true;
}
static bool updateTheme(Switch this, int value) {
	if (!Switch.onUpdate(this, value)) {
		return false;
	}
	updateTheme();
	return true;
}
