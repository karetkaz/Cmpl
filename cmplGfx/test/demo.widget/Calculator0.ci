// Simple Calculator with no precedence
// double click result to clear it

inline "/cmplGfx/lib/micro.ui.ci";
const FormatFlags format = {
	precision: 10;
};
char result[256] = {'0', 0};
char operation = 0;
float64 value = 0;
bool clear = true;

bool onClear(Button this);
bool onVal(Button this);
bool onOp(Button this);

struct CalcResult: Button {
	void onDraw(CalcResult this, Image offs, Rect rect, const Style style&) {
		offs.fillRect(rect, style.hoveredColor);
		Rect textRect = {};
		rect.adjust(-style.padding);
		style.font.clipText(&textRect, this.text);
		Style.align(rect, &textRect, Style.right);
		offs.drawText(textRect, style.font, this.text, style.textColor);
	}
}

CalcResult btnResult = {
	text: result;
	focusable: false;
	onReset: onClear;
};

Button buttons[] = {
	{text: "7", onClick: onVal},
	{text: "8", onClick: onVal},
	{text: "9", onClick: onVal},
	{text: "/", onClick: onOp},

	{text: "4", onClick: onVal},
	{text: "5", onClick: onVal},
	{text: "6", onClick: onVal},
	{text: "*", onClick: onOp},

	{text: "1", onClick: onVal},
	{text: "2", onClick: onVal},
	{text: "3", onClick: onVal},
	{text: "-", onClick: onOp},

	{text: "0", onClick: onVal},
	{text: ".", onClick: onVal},
	{text: "=", onClick: onOp},
	{text: "+", onClick: onOp}
};

// disable focusing first element, using Layout.onCreate
Widget ui = Widget(300, 400, Style.center, Layout.onCreate)
	.addItems(btnResult)
	.addItems(Layout.Custom(4, Style.fill, ...buttons));

Gui.showWindow(ui);

bool onClear(Button this) {
	result.append(0, "0");
	operation = 0;
	value = 0;
	clear = true;
	return true;
}
bool onVal(Button this) {
	int len = length(result);
	if (clear) {
		clear = false;
		len = 0;
	}
	result.append(len, this.text);
	return true;
}
bool onOp(Button this) {
	assert(this.text.length() == 1);
	if (clear) {
		// keep the last clicked operator
		operation = this.text[0];
		return true;
	}

	if (operation == '=' || operation == 0) {
		value = float64(result);
		operation = 0;
	}
	else if (operation == '+') {
		value += float64(result);
		operation = 0;
	}
	else if (operation == '-') {
		value -= float64(result);
		operation = 0;
	}
	else if (operation == '*') {
		value *= float64(result);
		operation = 0;
	}
	else if (operation == '/') {
		value /= float64(result);
		operation = 0;
	}

	// check for errors (not a number)
	if (value != value) {
		result.append(0, "Error");
	}
	else if (value < 0 && value == 2 * value) {
		result.append(0, "-Inf");
	}
	else if (value > 0 && value == 2 * value) {
		result.append(0, "Inf");
	}
	else {
		result.append(0, value, format);
	}

	// make sure all operators were handled
	assert(operation == 0);
	operation = this.text[0];
	clear = true;
	return true;
}
