/* Blend two images using a function and transparency
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image base = Image("asset/image/forest.jpg", 32);
Image image = Image("asset/image/texture_nature_01.png", 32);
Image offs = Image(base);
Image blend = Image(image, offs.width(), offs.height(), -1, 1.);

static struct BlendMode {
	inline linear_dodge(float32 base, float32 blend) = Math.min(base + blend, 1f);
	inline linear_burn(float32 base, float32 blend) = Math.max(base + blend - 1, 0f);
	inline color_dodge(float32 base, float32 blend) = (blend == 1 ? blend : Math.min(base / (1 - blend), 1f));
	inline color_burn(float32 base, float32 blend) = (blend == 0 ? blend : Math.max((1 - ((1 - base) / blend)), 0f));

	vec4f addition(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base + blend;
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f subtract(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base - blend;
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f multiply(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base * blend;
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f divide(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base / blend;
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f difference(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base > blend ? base - blend : blend - base;
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f exclusion(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = .5f - 2 * (base - .5f) * (blend - .5f);
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}

	vec4f lighten(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base > blend ? base : blend;
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f darken(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base < blend ? base : blend;
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f linearDodge(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = linear_dodge(base, blend);
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f linearBurn(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = linear_burn(base, blend);
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f colorDodge(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = color_dodge(base, blend);
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f colorBurn(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = color_burn(base, blend);
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}

	vec4f screen(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = 1 - (1 - base) * (1 - blend);
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f overlay(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = base < .5f
			? (2 * base * blend)
			: (1 - 2 * (1 - base) * (1 - blend));
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f softLight(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = blend < .5f
			? (2 * base * blend + base * base * (1 - 2 * blend))
			: (float32.sqrt(base) * (2 * blend - 1) + 2 * base * (1 - blend));
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f hardLight(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = blend <= .5f
			? (base * (2 * blend))
			: (1 - (1 - base) * (1 - 2 * (blend - .5f)));
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f linearLight(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = blend < .5f
			? linear_burn(base, (2 * blend))
			: linear_dodge(base, (2 * (blend - .5f)));
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f vividLight(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = blend < .5f
			? color_burn(base, (2 * blend))
			: color_dodge(base, (2 * (blend - .5f)));
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
	vec4f pinLight(vec4f base, vec4f blend) {
		inline op(float32 base, float32 blend) = blend < .5f
			? Math.min(base, 2 * blend)
			: Math.max(base, 2 *(blend - .5f));
		return {
			x: op(base.x, blend.x);
			y: op(base.y, blend.y);
			z: op(base.z, blend.z);
			w: op(base.w, blend.w);
		};
	}
}

struct BlendButton: Button {
	vec4f blend(vec4f base, vec4f blend);
}

Switch chkReverse = {
	text: "reverse";
	focusable: false;
	width: 192;
};
Slider btnAlpha = {
	text: "alpha";
	value: .75;
};

BlendButton btnAddition = {
	text: "addition";
	blend: BlendMode.addition;
};
BlendButton btnSubtract = {
	text: "subtract";
	blend: BlendMode.subtract;
};
BlendButton btnMultiply = {
	text: "multiply";
	blend: BlendMode.multiply;
};
BlendButton btnDivide = {
	text: "divide";
	blend: BlendMode.divide;
};
BlendButton btnDifference = {
	text: "difference";
	blend: BlendMode.difference;
};
BlendButton btnExclusion = {
	text: "exclusion";
	blend: BlendMode.exclusion;
};

BlendButton btnLighten = {
	text: "lighten";
	blend: BlendMode.lighten;
};
BlendButton btnDarken = {
	text: "darken";
	blend: BlendMode.darken;
};
BlendButton btnLinearDodge = {
	text: "linearDodge";
	blend: BlendMode.linearDodge;
};
BlendButton btnLinearBurn = {
	text: "linearBurn";
	blend: BlendMode.linearBurn;
};
BlendButton btnColorDodge = {
	text: "colorDodge";
	blend: BlendMode.colorDodge;
};
BlendButton btnColorBurn = {
	text: "colorBurn";
	blend: BlendMode.colorBurn;
};

BlendButton btnScreen = {
	text: "screen";
	blend: BlendMode.screen;
};
BlendButton btnOverlay = {
	text: "overlay";
	blend: BlendMode.overlay;
};
BlendButton btnSoftLight = {
	text: "softLight";
	blend: BlendMode.softLight;
};
BlendButton btnHardLight = {
	text: "hardLight";
	blend: BlendMode.hardLight;
};
BlendButton btnLinearLight = {
	text: "linearLight";
	blend: BlendMode.linearLight;
};
BlendButton btnVividLight = {
	text: "vividLight";
	blend: BlendMode.vividLight;
};
BlendButton btnPinLight = {
	text: "pinLight";
	blend: BlendMode.pinLight;
};

DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

void onProcess(FxWidget widget) {
	debug.startTimer();
	bool reverse = chkReverse.selected != 0;
	offs.copy(0, 0, reverse ? base : blend, null);
	if (BlendButton selected = widget.getFocused().as(BlendButton)) {
		offs.blend(0, 0, reverse ? blend : base, null, selected.blend);
		// optionally apply the blend effect with alpha strength (copying back the original image)
		offs.blendAlpha(0, 0, reverse ? base : blend, null, 256 * (1 - btnAlpha.value));
	}
	else if (btnAlpha.isFocused()) {
		offs.blendAlpha(0, 0, reverse ? blend : base, null, 256 * btnAlpha.value);
	}
}

Gui.showWindow(offs, FxWidget(onProcess,
	chkReverse,
	btnAlpha,
	btnAddition,
	btnSubtract,
	btnMultiply,
	btnDivide,
	btnDifference,
	btnExclusion,
	btnLighten,
	btnDarken,
	btnLinearDodge,
	btnLinearBurn,
	btnColorDodge,
	btnColorBurn,
	btnScreen,
	btnOverlay,
	btnSoftLight,
	btnHardLight,
	btnLinearLight,
	btnVividLight,
	btnPinLight,
	debug
));
offs.destroy();
base.destroy();
blend.destroy();
image.destroy();


/* resources and adaptations from
https://mouaif.wordpress.com/2009/01/05/photoshop-math-with-glsl-shaders/
https://gist.github.com/damienmortini/1dbfc4fb420420acf70d
*/
