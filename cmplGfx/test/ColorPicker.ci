// Color picker demo.
inline "/cmplGfx/lib/micro.ui.ci";

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back);

static bool printStyle(Button button) {
	Style style& = button.style;
	debug("style", style);
}

struct ColorPicker: View {
	float hue = 0;
	float val = 0;
	bool dark = true;

	static argb get(ColorPicker this, float x, float y) {
		if (this.dark) {
			return argb(hsv2rgb(vec4f(x, y, 1)));
		}
		return argb(hsv2rgb(vec4f(x, y, y)));
	}

	static argb value(ColorPicker this) {
		return this.get(this.hue, 1 - this.val);
	}

	bool onTouchEvent(ColorPicker this, const Rect rect&, const TouchEvent event&) {
		if (event.release || !event.button) {
			return View.onTouchEvent(this, rect, event);
		}

		this.hue = Math.clamp(float32(event.x - rect.x), 0f, rect.w - 1f) / rect.w;
		this.val = Math.clamp(float32(event.y - rect.y), 0f, rect.h - 1f) / rect.h;
		return true;
	}

	bool onMeasure(Histogram this, Rect rect&) {
		if (this.height == 0) {
			rect.h = 128;
		} else {
			rect.h = this.height;
		}
		return View.onMeasure(this, &rect);
	}

	void onDraw(ColorPicker this, Image offs, const Rect rect, const Style style&) {
		for (int y = 0; y < rect.h; y += 1) {
			float32 py = float32(y) / rect.h;
			for (int x = 0; x < rect.w; x += 1) {
				float32 px = float32(x) / rect.w;
				argb color = this.get(px, 1 - py);
				offs.set(x + rect.x, y + rect.y, color);
			}
		}
		int x = rect.x + Math.clamp(float32(this.hue * rect.w), 0f, rect.w - 1f);
		int y = rect.y + Math.clamp(float32(this.val * rect.h), 0f, rect.h - 1f);
		offs.drawOval(x - 4, y - 4, x + 4, y + 4, 0x000000);
		offs.drawOval(x - 2, y - 2, x + 2, y + 2, 0xffffff);
		offs.drawOval(x - 1, y - 1, x + 1, y + 1, 0x000000);
	}
}

ColorPicker colorPicker = {
	width: 360;
	height: 256/2;
	focusable: false;
};

char themes[*][] = {
	"Light",
	"Dark"
};
Switch theme = {
	text: "Theme";
	states: themes;
	selected: 1;
};

Button button = {
	text: "Dump theme";
	onClick: printStyle;
};

Slider slider = {
	text: "Slider";
	value: 1 << 30;
};

DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

int onEvent(Window win&, int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}

	Widget ui = win.widget;
	if (!win.dispatchEvent(ui, action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	debug.startTimer();
	offs.copy(0, 0, back, null);

	 if (theme.selected != 0) {
		colorPicker.dark = true;
		ui.theme(Style.dark, colorPicker.value());
	} else {
		colorPicker.dark = false;
		ui.theme(Style.light, colorPicker.value());
	}

	return win.draw(ui);
}

Gui.showWindow(offs, onEvent, Widget(
	colorPicker,

	null,
	theme,
	button,
	slider,

	null,
	debug
));
offs.destroy();
back.destroy();
