gxSurf font = gxSurf.openFnt("asset/font/modern-1.fnt");
gxSurf offs = gxSurf("asset/image/forest.png", 32);

gxSurf in = gxSurf(offs, 0);

static if (typename(gxSurf.transform) == null) {
void transform(gxSurf surf, const gxRect rect&, gxSurf src, const gxRect roi&, int32 interpolate, float32 mat[16]) {
	assert(roi == null);
	assert(rect != null);

	gxRect dRec = {
		x: rect != null ? rect.x : 0;
		y: rect != null ? rect.y : 0;
		w: rect != null ? rect.w : surf.width();
		h: rect != null ? rect.h : surf.height();
	};

	gxRect sRec = {
		x: roi != null ? roi.x : 0;
		y: roi != null ? roi.y : 0;
		w: roi != null ? roi.w : src.width();
		h: roi != null ? roi.h : src.height();
	};

	float32 xx = mat != null ? mat[0] : float32(sRec.w) / dRec.w;
	float32 xy = mat != null ? mat[1] : 0;
	float32 xt = mat != null ? mat[3] : sRec.x;
	float32 yy = mat != null ? mat[5] : float32(sRec.h) / dRec.h;
	float32 yx = mat != null ? mat[4] : 0;
	float32 yt = mat != null ? mat[7] : sRec.y;

	if (!surf.clip(dRec)) {
		// nothing to set
		return;
	}

	if (!src.clip(sRec)) {
		// nothing to get
		return;
	}

	for (int y = 0; y < dRec.h; y += 1) {
		int dy = dRec.y + y;
		float32 sy = sRec.y + y;
		for (int x = 0; x < dRec.w; x += 1) {
			int dx = dRec.x + x;
			float32 sx = sRec.x + x;
			float32 tx = (xx * sx + xy * sy + xt) / src.width();
			float32 ty = (yx * sx + yy * sy + yt) / src.height();
			surf.set(dx, dy, argb(src.tex(tx, ty)));
		}
	}
}
}

/// compute the the transformation matrix to center/crop/fit an image to a new size.
mat4f fitMatrix(const gxSurf src, int newWidth, int newHeight, bool fitWidth, bool fitHeight, double maxScale, double maxAspect) {
	double scale = 1;
	double widthScale = newWidth / double(src.width());
	double heightScale = newHeight / double(src.height());

	if (fitWidth && fitHeight) {
		scale = Math.min(widthScale, heightScale);
	}
	else if (fitWidth) {
		scale = widthScale;
	}
	else if (fitHeight) {
		scale = heightScale;
	}
	if (scale > maxScale) {
		scale = maxScale;
	}

	if (maxAspect > 0) {
		if (maxAspect > 1) {
			maxAspect = 1 / maxAspect;
		}
		double ratio = src.width() / double(src.height());
		if (ratio > 1) {
			ratio = 1 / ratio;
		}
		// debug("new aspect", ratio);
		if (ratio > maxAspect) {
			scale *= double.sqrt(maxAspect / ratio);
		}
	}

	// calculate translation
	double dx = (newWidth - src.width() * scale) / 2;
	double dy = (newHeight - src.height() * scale) / 2;

	return {
		x: {x: 1 / scale, y: 0, z: 0, w: -dx / scale};
		y: {x: 0, y: 1 / scale, z: 0, w: -dy / scale};
		z: {x: 0, y: 0, z: 1 / scale, w: 0};
		w: {x: 0, y: 0, z: 0, w: 1};
	};
}

mat4f skewMatrix(float sx, float sy) {
	return {
		x: {x: 1, y: float.tan(sx), z: 0, w: 0};
		y: {x: float.tan(sy), y: 1, z: 0, w: 0};
		z: {x: 0, y: 0, z: 1, w: 0};
		w: {x: 0, y: 0, z: 0, w: 1};
	};
}

int onEvent(int action, int button, int x, int y) {
	inline "lib/micro.ui.ci";

	static Checker quality = {
		text: "high quality";
		checked: true;
	};
	static Checker flipX = {
		text: "flip x";
		checked: false;
	};
	static Checker flipY = {
		text: "flip y";
		checked: false;
	};
	static Slider rotate = {
		text: "rotate";
		minValue: 0;
		maxValue: 360;
		value: 0;
	};
	static Slider skewX = {
		text: "skew x";
		minValue: -89;
		maxValue: +89;
		value: 0;
	};
	static Slider skewY = {
		text: "skew y";
		minValue: -89;
		maxValue: +89;
		value: 0;
	};
	static Slider scaleX = {
		text: "scale x";
		value: 100;
		minValue: 10;
		maxValue: 500;
	};
	static Slider scaleY = {
		text: "scale y";
		value: 100;
		minValue: 10;
		maxValue: 500;
	};
	static Slider translateX = {
		text: "translate x";
		minValue: -offs.width();
		maxValue: +offs.width();
		value: 0;
	};
	static Slider translateY = {
		text: "translate y";
		minValue: -offs.height();
		maxValue: +offs.height();
		value: 0;
	};

	static Slider fitRatio = {
		text: "max ratio";
		value: in.width() * 100 / in.height();
		minValue: 100;
		maxValue: 400;
	};
	static Checker fitWidth = {
		text: "fit width";
		checked: true;
	};
	static Checker fitHeight = {
		text: "fit height";
		checked: true;
	};
	static Slider inRatio = {
		text: "ratio";
		enabled: false;
		value: in.width() * 100 / in.height();
	};

	static Layout ui = Layout(offs, font,
		quality,
		fitWidth,
		fitHeight,
		fitRatio,
		translateX, translateY,
		scaleX, scaleY,
		skewX, skewY,
		flipX, flipY,
		rotate,
		inRatio
	);

	bool redraw = uiEvent(ui, action, button, x, y);
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}
	if (redraw) {
		gxRect to = {
			w: 400;
			h: 400;
			x: (offs.width() - to.w) / 2;
			y: (offs.height() - to.h) / 2;
		};
		vec4f center = vec4f(in.width() / 2, in.height() / 2, 0, 0);
		mat4f mat = translation(center, 1)
			.mul(translation(vec4f(translateX.val(), translateY.val(), 0, 0), 1))
			.mul(scale(vec4f(scaleX.val(), scaleY.val(), 1, 1), 1f / 100))
			.mul(skewMatrix(Math.radians(skewX.val()), Math.radians(skewY.val())))
			.mul(rotation(vec4f(0, 1, 0, 0), Math.radians(int(flipX.checked) * 180)))
			.mul(rotation(vec4f(1, 0, 0, 0), Math.radians(int(flipY.checked) * 180)))
			.mul(rotation(vec4f(0, 0, 1, 0), Math.radians(rotate.val())))
			.mul(translation(center, -1))
			.mul(fitMatrix(in, to.w, to.h, fitWidth.checked, fitHeight.checked, 1, fitRatio.val() / 100.));
		debug("transform", mat.m);
		offs.transform(to, in, null, quality.checked ? 1 : 0, mat.data);
		offs.drawRect(to, 0);
		ui.draw(30, 30);
	}
	return 0;
}

offs.show(onEvent);
font.destroy();
offs.destroy();
in.destroy();
