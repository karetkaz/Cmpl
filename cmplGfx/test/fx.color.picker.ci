// Color picker demo.

Image back = Image("asset/image/forest.png", 32);
Image font = Image.openFnt("asset/font/modern-1.fnt");
Image offs = Image(back.width(), back.height(), back.depth());


int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "/lib/gfx/micro.ui.ci";

	static Histogram histogram = {
		image: offs;
		enabled: false;
	};

	static bool onColorUpdate(ColorPicker view, argb value);
	static ColorPicker colors = {
		//lum: .75f;
		selectable: false;
		onUpdate: onColorUpdate;
	};

	static Switch luminosity = {
		text: "luminosity";
		checked: true;
	};
	static Switch red = {
		text: "red";
		checked: true;
	};
	static Switch green = {
		text: "green";
		checked: true;
	};
	static Switch blue = {
		text: "blue";
		checked: true;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};

	static Layout ui = Layout(offs, -30, 30, font,
		histogram,
		colors,
		luminosity, red, green, blue,
		time
	);

	static bool onColorUpdate(ColorPicker view, argb value) {
		view.value = value;
		ui.style.backgroundColor = uint32(value);
	}

	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}

	if (ui.uiEvent(action, button, x, y)) {
		uint64 start = System.millis();
		uint32 hist = 0;
		if (luminosity.checked) {
			hist |= 0xff000000;
		}
		if (red.checked) {
			hist |= 0x00ff0000;
		}
		if (green.checked) {
			hist |= 0x0000ff00;
		}
		if (blue.checked) {
			hist |= 0x000000ff;
		}
		offs.resize(null, back, null, 1);
		offs.calcHist(null, hist, histogram.data);

		time.value = System.millis() - start;
		ui.draw();
	}
	return 0;
}
