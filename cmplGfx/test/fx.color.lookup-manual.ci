/* Manual color lookup editing
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 * TODO: add and move curve control points
 */

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back);

inline "/cmplGfx/lib/micro.ui.ci";
bool onResetClick(Button this);
bool onCurveUpdate(Histogram this, int idx, int value);

Histogram histogram = {
	enabled: false;
};
Histogram curves = {
	height: 256;
	lines: true;
	focusable: false;
	onUpdate: onCurveUpdate;
};

Button btnLuminosity = {
	onReset: onResetClick;
	text: "luminosity";
};
Button btnRgb = {
	onReset: onResetClick;
	text: "rgb";
};
Button btnRed = {
	onReset: onResetClick;
	text: "red";
};
Button btnGreen = {
	onReset: onResetClick;
	text: "green";
};
Button btnBlue = {
	onReset: onResetClick;
	text: "blue";
};

Button btnReset = {
	onClick: onResetClick;
	text: "reset";
	focusable: false;
};

DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

int onEvent(Window win&, int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	static if (typename(File) != null) {
		if (action == Gui.KEY_RELEASE && button == ' ') {
			const FormatFlags fmt = {
				precision: 16;
				padChr: '0';
				padLen: 8;
			};
			char str[32] = {0};
			File.out.write("\nint32_t lookup[256] = {\n");
			for (int i = 0; i < curves.data.length; i += 1) {
				uint32 col = uint32(curves.data[i]);
				if (i > 0) {
					File.out.write(",\n");
				}
				int len = str.append(str.append(0, "\t0x"), col, fmt);
				File.write(File.out, str[... len]);
			}
			File.out.write("\n};\n");
		}
	}
	Widget ui = win.widget;
	if (!win.dispatchEvent(ui, action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	debug.startTimer();
	offs.copy(0, 0, back, null);
	offs.colorMap(null, curves.data);
	histogram.update(offs);
	return win.draw(ui);
}
bool onCurveUpdate(Histogram this, int idx, int value) {
	Widget ui = this.getWidget();
	argb data& = this.data[idx];
	if (btnLuminosity.isFocused()) {
		data.a = sat_s8(value);
		return true;
	}
	if (btnRed.isFocused()) {
		data.r = sat_s8(value);
		return true;
	}
	if (btnGreen.isFocused()) {
		data.g = sat_s8(value);
		return true;
	}
	if (btnBlue.isFocused()) {
		data.b = sat_s8(value);
		return true;
	}
	if (btnRgb.isFocused()) {
		data.r = data.g = data.b = sat_s8(value);
		return true;
	}
	return false;
}
bool onResetClick(Button this) {
	for (int i = 0; i < 256; i += 1) {
		argb data& = curves.data[i];
		if (this == btnLuminosity) {
			data.a = i;
		}
		else if (this == btnRgb) {
			data.r = i;
			data.g = i;
			data.b = i;
		}
		else if (this == btnRed) {
			data.r = i;
		}
		else if (this == btnGreen) {
			data.g = i;
		}
		else if (this == btnBlue) {
			data.b = i;
		}
		else {
			curves.data[i] = argb(i, i, i, i);
		}
	}
	return true;
}

Gui.showWindow(offs, onEvent, FxWidget(
	histogram, curves,

	null,
	btnLuminosity, btnRgb, btnRed, btnGreen, btnBlue,
	btnReset,

	null, debug
));
offs.destroy();
back.destroy();
