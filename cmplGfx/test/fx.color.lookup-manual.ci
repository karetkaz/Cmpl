/* Manual color lookup editing
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 * TODO: add and move curve control points
 */

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back.width(), back.height(), back.depth());
int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();

inline "/cmplGfx/lib/micro.ui.ci";
bool onResetClick(Button this);
bool onCurveUpdate(Histogram this, int idx, int value);

Histogram histogram = {
	enabled: false;
};
Histogram curves = {
	height: 256;
	lines: true;
	focusable: false;
	onUpdate: onCurveUpdate;
};

Button separator = {
	text: null;
	height: 1;
	enabled: false;
};

Button btnLuminosity = {
	onReset: onResetClick;
	text: "luminosity";
};
Button btnRgb = {
	onReset: onResetClick;
	text: "rgb";
};
Button btnRed = {
	onReset: onResetClick;
	text: "red";
};
Button btnGreen = {
	onReset: onResetClick;
	text: "green";
};
Button btnBlue = {
	onReset: onResetClick;
	text: "blue";
};

Button btnReset = {
	onClick: onResetClick;
	text: "reset";
	focusable: false;
};

Slider time = {
	text: "time";
	enabled: false;
	onDrawSlider: null;
};

Widget ui = Widget(offs, -30,
	histogram, curves, separator,
	btnLuminosity, btnRgb, btnRed, btnGreen, btnBlue,
	btnReset, separator, time
);

int onEvent(int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	if (action == Gui.KEY_RELEASE && button == ' ') {
		const FormatFlags fmt = {
			precision: 16;
			padChr: '0';
			padLen: 8;
		};
		char str[32] = {0};
		File.out.write("\nint32_t lookup[256] = {\n");
		for (int i = 0; i < curves.data.length; i += 1) {
			uint32 col = uint32(curves.data[i]);
			if (i > 0) {
				File.out.write(",\n");
			}
			int len = str.append(str.append(0, "\t0x"), col, fmt);
			File.write(File.out, str, len);
		}
		File.out.write("\n};\n");
	}
	if (!ui.onEvent(action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	uint64 start = System.millis();
	offs.resize(null, back, null, 1);
	offs.colorMap(null, curves.data);
	histogram.update(offs);
	time.value = System.millis() - start;
	return ui.draw();
}

bool onCurveUpdate(Histogram this, int idx, int value) {
	argb data& = this.data[idx];
	if (ui.isFocused(btnLuminosity)) {
		data.a = clamp_s8(value);
		return true;
	}
	if (ui.isFocused(btnRed)) {
		data.r = clamp_s8(value);
		return true;
	}
	if (ui.isFocused(btnGreen)) {
		data.g = clamp_s8(value);
		return true;
	}
	if (ui.isFocused(btnBlue)) {
		data.b = clamp_s8(value);
		return true;
	}
	if (ui.isFocused(btnRgb)) {
		data.r = data.g = data.b = clamp_s8(value);
		return true;
	}
	return false;
}
bool onResetClick(Button this) {
	for (int i = 0; i < 256; i += 1) {
		argb data& = curves.data[i];
		if (this == btnLuminosity) {
			data.a = i;
		}
		else if (this == btnRgb) {
			data.r = i;
			data.g = i;
			data.b = i;
		}
		else if (this == btnRed) {
			data.r = i;
		}
		else if (this == btnGreen) {
			data.g = i;
		}
		else if (this == btnBlue) {
			data.b = i;
		}
		else {
			curves.data[i] = argb(i, i, i, i);
		}
	}
	return true;
}
