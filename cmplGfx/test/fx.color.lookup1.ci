/* highlights, shadows, whites, blacks
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse up or down in the window to adjust control value
 */

Image back = Image("asset/image/forest.png", 32);
Image font = Image.openFnt("asset/font/modern-1.fnt");
Image offs = Image(back.width(), back.height(), back.depth());

void buildLut(uint32 lut[256], float highlights, float shadows, float whites, float blacks) {
	argb lut2[*] = lut;

	// adapted from: https://github.com/ginozh/my_wmm/blob/7582cf724c05f949968d7d7039337e99378409d0/testolive/effects/colorcorrection.frag
	for (int idx = 0; idx < lut.length; idx += 1) {
		float val = idx / 256f;

		// shadows/highlights
		if (val < 0.5) {
			float shadow_val = 1 - shadows;
			val = float.pow(val * 2, shadow_val) / 2;
		} else {
			float highlight_val = 1 - highlights;
			val = float.pow((val - 0.5) * 2, highlight_val) / 2 + 0.5;
		}

		// whites
		val *= 1 + whites;

		// blacks
		float black_val = 1 - blacks;
		val = (val * black_val) - (black_val - 1.0);

		int rgb = clamp_s8(256 * val);
		lut2[idx].r = rgb;
		lut2[idx].g = rgb;
		lut2[idx].b = rgb;
		lut2[idx].a = idx;
	}
}

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "/lib/gfx/micro.ui.ci";

	static Slider highlights = {
		text: "highlights";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider shadows = {
		text: "shadows";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider whites = {
		text: "whites";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider blacks = {
		text: "blacks";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Histogram histogram = {
		image: offs;
		enabled: false;
	};
	static Histogram curves = {
		image: offs;
		lines: true;
		selectable: false;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};

	static Layout ui = Layout(offs, -30, 30, font,
		histogram,
		curves,
		highlights,
		shadows,
		whites,
		blacks,
		time
	);

	bool redraw = uiEvent(ui, action, button, x, y);
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}
	if (redraw) {
		uint64 start = System.millis();
		offs.resize(null, back, null, 1);
		buildLut(curves.data, highlights.valFlt(), shadows.valFlt(), whites.valFlt(), blacks.valFlt());
		offs.colorMap(null, curves.data);
		offs.calcHist(null, 0x00ffffff, histogram.data);
		time.value = System.millis() - start;
		ui.draw();
	}
	return 0;
}
