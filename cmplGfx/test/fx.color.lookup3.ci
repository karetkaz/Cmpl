/* highlights, shadows, whites, blacks
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse up or down in the window to adjust control value
 */

Image back = Image("asset/image/forest.png", 32);
Image font = Image.openFnt("asset/font/modern-1.fnt");
Image offs = Image(back.width(), back.height(), back.depth());

void buildLut(uint32 lut[256], float midTones, float highlights, float shadows, float whites, float blacks) {
	argb lut2[*] = lut;

	// adapted from: https://github.com/AHDCreative/ffxivitashader/blob/5422e0885cf72b6a0264cc6881056ea39d322c85/v1/dx11/reshade-shaders/Shaders/qUINT_lightroom.fx
	for (int idx = 0; idx < lut.length; idx += 1) {
		float val = idx / 256f;

		float x = val;
		inline exp2(float x) = float.pow(2, x);
		inline smoothStep(float a, float b, float t) = Math.smooth(t, a, b);

		float mulBlacks       = -smoothStep(0.25, 0.00, x);
		float mulShadows      = -smoothStep(0.00, 0.25, x) * smoothStep(0.50, 0.25, x);
		float mulMidTones     = -smoothStep(0.25, 0.50, x) * smoothStep(0.75, 0.50, x);
		float mulHighlights   = -smoothStep(0.50, 0.75, x) * smoothStep(1.00, 0.75, x);
		float mulWhites       = -smoothStep(0.75, 1.00, x);

		x = float.pow(x, float.pow(2,
				blacks * mulBlacks +
				shadows * mulShadows +
				midTones * mulMidTones +
				highlights * mulHighlights +
				whites * mulWhites
		));

		int rgb = clamp_s8(256 * x);
		lut2[idx].r = idx;
		lut2[idx].g = idx;
		lut2[idx].b = idx;
		lut2[idx].a = rgb;
	}
}

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "/lib/gfx/micro.ui.ci";

	static Slider midTones = {
		text: "mid tones";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider highlights = {
		text: "highlights";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider shadows = {
		text: "shadows";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider whites = {
		text: "whites";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Slider blacks = {
		text: "blacks";
		minimum: -256;
		maximum: +256;
		divisor: 256;
	};
	static Histogram histogram = {
		text: null;
		image: offs;
		enabled: false;
	};
	static Histogram curves = {
		text: null;
		image: offs;
		lines: true;
		selectable: false;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};

	static Layout ui = Layout(offs, -30, 30, font,
		histogram,
		curves,
		whites,
		highlights,
		midTones,
		shadows,
		blacks,
		time
	);

	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}

	bool redraw = uiEvent(ui, action, button, x, y);
	if (redraw) {
		uint64 start = System.millis();
		offs.resize(null, back, null, 1);
		buildLut(curves.data, midTones.valFlt(), highlights.valFlt(), shadows.valFlt(), whites.valFlt(), blacks.valFlt());
		offs.colorMap(null, curves.data);
		offs.calcHist(null, 0x00ffffff, histogram.data);
		time.value = System.millis() - start;
		ui.draw();
	}
	return 0;
}
