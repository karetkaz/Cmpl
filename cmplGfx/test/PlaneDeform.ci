Image img = Image("asset/image/download.jpg", 32);

vec4f tex2d(Image src, float64 x, float64 y) {
	int pos(float64 val, int resolution) {
		float64 result = val * resolution;
		if ((result %= resolution) < 0) {
			result += resolution;
		}
		return result;
	}

	int ix = pos(x, src.width());
	int iy = pos(y, src.height());
	return vec4f(argb(src.get(ix, iy)));
}
inline tex2d(Image src, float64 x, float64 y, float64 w) = tex2d(src, x, y).mul(float32(w));

inline nz(float64 x, float64 eps) = float64(x ? x : eps);
inline nz(float64 x) = float64(x ? x : 1e-20);
inline abs(float64 x) = Math.abs(x);
inline sin(float64 x) = Math.sin(x);
inline cos(float64 x) = Math.cos(x);
inline sqrt(float64 x) = Math.sqrt(x);
inline pow(float64 x, float64 y) = Math.pow(x, y);
inline atan(float64 x, float64 y) = Math.atan2(x, y);
inline hypot(float64 x, float64 y) = Math.sqrt(x * x + y * y);

vec4f plasma(vec4f in) {
	inline M = 20;
	inline T = 100;
	float64 x = in.x * T;
	float64 y = in.y * T;
	float64 t = in.w;

	float64 mov0 = x + y + cos(sin(t) * 2) * 100 + sin(x / 100) * 1000;
	float64 mov1 = y / M + t;
	float64 mov2 = x / M;
	float64 c1 = Math.abs(sin(mov1 + t) / 2 + mov2 / 2 - mov1 - mov2 + t);
	float64 c2 = Math.abs(sin(c1 + sin(mov0 / 1000 + t) + sin(y / 40 + t) + sin((x + y) / 100) * 3));
	float64 c3 = Math.abs(sin(c2 + cos(mov1 + mov2 + c2) + cos(mov2) + sin(x / 1000)));
	return { x: c1, y: c2, z: c3 };
}
vec4f plasma_x(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w;

	float64 v = 0;
	v += sin((x * 10 + time));
	v += sin((y * 10 + time) / 2);
	v += sin((x * 10 + y * 10 + time) / 2);
	float64 cx = x + .5 * sin(time / 5);
	float64 cy = y + .5 * cos(time / 3);
	v += sin(sqrt(100 * (cx * cx + cy * cy) + 1) + time);
	return vec4f(v / 2);
}

vec4f stereographic0(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	float64 a = atan(y, x);
	float64 r = 100 * nz(hypot(x, y) - .4);

	float64 u = time + cos(a) / r;
	float64 v = time + sin(a) / r;

	return img.tex2d(u, v);
}
vec4f stereographic1(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	float64 a = atan(y, x);
	float64 r = 50 * nz(hypot(x, y));

	float64 u = time + cos(a) / r;
	float64 v = time + sin(a) / r;

	return img.tex2d(u, v);
}

vec4f circles(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	float64 r = hypot(x, y);
	float64 u = time + r;
	return img.tex2d(r, u);
}
vec4f rays(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	float64 a = atan(y, x);
	float64 u = time + a;
	return img.tex2d(u, a);
}

vec4f tunnel0(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .1;

	float64 a = atan(y, x);
	float64 r = hypot(x, y);

	float64 u = time + .1 / nz(r);
	float64 v = a / Math.pi;

	return img.tex2d(u, v, 2 * r);
}
vec4f tunnel1(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .1;

	float64 r = pow(pow(x * x, 16) + pow(y * y, 16), 1. / 32);
	float64 u = time + .1 / nz(r);
	float64 v = atan(y, x) / Math.pi;

	return img.tex2d(v, u, 2 * r);
}
vec4f tunnel2(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	float64 a = atan(y, x);
	float64 r = 100 * sqrt(x * x + y * y);
	float64 u = time + 10 / nz(r + 10 + 50 * sin(5 * a));
	float64 v = 0.5 * a / Math.pi;
	float64 w = 0.01 * (r + 50 + 50 * sin(5 * a));
	return img.tex2d(v, u, w);
}
vec4f tunnel3(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .1;

	float64 a = atan(y, x);
	float64 r = 100 * nz(sqrt(x * x + y * y));
	float64 u = time + (40 / r) + 0.1 * sin(8 * a);
	float64 v = .5 + .5 * a / Math.pi;
	float64 w = r * 0.02;
	return img.tex2d(v, u, w);
}
vec4f tunnel4(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;
	float64 a = atan(y, x);
	float64 r = 100 * nz(hypot(x, y));
	float64 u = time + 0.3 * a / Math.pi;
	float64 v = 10 * Math.abs(cos(1.5 * a) / r);
	float64 w = 0.2 + 5 * v;
	return img.tex2d(v, u, w);
}

vec4f planes(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .1;

	float64 a = .2 / nz(abs(y));
	float64 u = x * a;
	float64 v = time + a;
	float64 w = 2 * abs(y);
	return img.tex2d(v, u, w);
}

vec4f vortex(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;
	float64 a = atan(y, x);
	float64 r = hypot(x, y);
	float64 u = 1 * a / Math.pi + r;
	float64 v = 2 * time + 40 * pow(r, 0.01);
	return img.tex2d(u, v);
}
vec4f toilet(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	// clockwise flush down the toilet
	float64 a = atan(y, x);
	float64 r = hypot(x, y);
	float64 v = time + pow(r, 0.1);
	float64 u = time + (a / Math.pi) + r;
	return img.tex2d(u, v);
}

vec4f waves(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	float64 a = .5 * atan(y, x);
	float64 r = 4 * hypot(x, y);
	float64 u = a / Math.pi;
	float64 v = time + sin(r);
	return img.tex2d(u, v);
}
vec4f magma(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;

	// hot magma liquid swirl
	float64 a = .5 * atan(y, x);
	float64 r = 4 * hypot(x, y);
	float64 u = time + a / Math.pi;
	float64 v = time + sin(r);
	return img.tex2d(u, v);
}

vec4f scroll(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .05;
	// cloud like dream scroll
	float64 a = atan(y, x);
	float64 r = hypot(x, y);
	float64 u = time + .1 * x / (.11 + r * .5);
	float64 v = time + .1 * y / (.11 + r * .5);
	return img.tex2d(u, v);
}
vec4f ball3d(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .5;

	// 3D ball
	float64 a = atan(y, x);
	float64 r = .5 * hypot(x, y);
	float64 v = time + x * (3 - sqrt(4 - 15 * r * r)) / (r * r + 1);
	float64 u = time + y * (3 - sqrt(4 - 15 * r * r)) / (r * r + 1);
	return img.tex2d(u, v);
}

vec4f goodSinus(vec4f in) {
	float64 x = in.x * 2 - 1;
	float64 y = in.y * 2 - 1;
	float64 time = in.w * .5;

	vec2d pos = vec2d(2 * x - x, 2 * y - y);
	float64 color = 0.0;
	float64 s = 1.0;

	static float64 length(vec2d vec) {
		return Math.sqrt(vec.x * vec.x + vec.y * vec.y);
	}

	for (int i = 0; i < 10; i += 1) {
		float64 fi = float64(i);
		float64 t = Math.atan2(pos.x, pos.y) + time * .02 * fi;
		float64 len = (.0002 * fi) / nz(abs(length(pos) - (.5 + sin(t * (3 + fi)) * (.2 - fi * sin(time + fi) * .01))), 1e-10);
		color += len * (1 - fi / 20);
	}

	color += length(pos) * 0.1;
	return vec4f(color*2, color*2, color*4);
}

Window.show(512, 512, 192, scroll);
img.destroy();

/* References:
http://mrdoob.com/lab/javascript/effects/plane_deformations/
https://experiments.withgoogle.com/plane-deformations
*/
