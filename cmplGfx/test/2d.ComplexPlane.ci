// complex plane domain coloring demo.

vec4f domain(Complex z, double mod) {
	vec4f result = {
		x: Math.absMod(arg(z) / (Math.pi * 2) + Math.pi / 4, mod);
		y: 4 * Math.absMod(abs(z), 1) * (1 - Math.absMod(abs(z), 1));
		z: 1;//- absMod(Math.abs(z.im), 1);
	};
	return hsv2rgb(result);
}

vec4f rgbOp(vec4f in) {
	inline N = float64(Math.pi);
	Complex z = {
		re: Math.lerp(float64(in.x), -N, N);
		im: Math.lerp(float64(in.y), -N, N);
	};

	// z = sin(z);
	// z = sin(toPolar(z));
	// z = sin(sech(toPolar(z)));
	z = cosh(toPolar(z));
//	z = toCartesian(cos(toPolar(z)));
//	z = toCartesian(sin(toPolar(z)));
//	z = sin(toCartesian(sin(toPolar(z))));
//	z = sin(toCartesian(sin(toCartesian(sin(z)))));
//	z = sin(sin(sin(toCartesian(z))));
//	z = mul(z, .5); z = div(pow(z, 3), sub(sin(pow(z, 7)), 1));

	// z = toCartesian(pow(toPolar(sin(z)), -2));
	return domain(z, 1);
}

show(1440, 900, 0, rgbOp);
