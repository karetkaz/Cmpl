// micro ui
struct Slider {
	const char text[*];
	const int divValue = 1;
	const int minValue = 0;
	const int maxValue = -1u >> 1;
	bool enabled = true;
	int value = 0;
}
int val(Slider slider&) {
	if (slider.value < slider.minValue) {
		slider.value = slider.minValue;
	}
	if (slider.value > slider.maxValue) {
		slider.value = slider.maxValue;
	}
	return slider.value / slider.divValue;
}

struct Checker {
	const char text[*];
	bool enabled = true;
	bool checked = false;
}

struct Button {
	const char text[*];
	bool enabled = true;
	void onClick();
}

struct Layout {
	gxSurf offs;
	gxSurf font;
	variant items[200] = {};
	gxRect rects[200] = {};
	int reset[200] = {};
	int selectedIndex = -1;
	int count = 0;
}

Layout Layout(gxSurf offs, gxSurf font, variant items...) {
	Layout layout;/* FIXME:BUG: = {
		selectedIndex: -1;
		// rect: {x: 0, y: 0, w: 0, h: 0};
	};*/
	layout.offs = offs;
	layout.font = font;
	layout.selectedIndex = -1;
	for (int i = 0; i < items.length; i += 1) {
		if (Slider slider& = items[i].as(Slider)) {
			layout.reset[i] = slider.value;
			if (layout.selectedIndex < 0 && slider.enabled) {
				// select first enabled slider
				layout.selectedIndex = i;
			}
		}
		layout.items[i] = items[i];
	}
	layout.count = items.length;
	return layout;
}

void draw(Layout layout&, int x, int y) {
	int posAll = 0;
	char textAll[1024];
	FormatFlags flags = { padLen: 4 };
	gxRect rectAll = { x:x, y:y, w:0, h:0 };

	for (int i = 0; i < layout.count; i += 1) {
		int pos = 0;
		char text[256];
		gxRect rect& = layout.rects[i];
		if (i == layout.selectedIndex) {
			pos = text.append(pos, "* ");
		} else {
			pos = text.append(pos, " ");
		}
		if (Slider item& = layout.items[i].as(Slider)) {
			pos = text.append(pos, item.text);
			pos = text.append(pos, ": ");
			pos = text.append(pos, item.val(), flags);
		}
		else if (Checker item& = layout.items[i].as(Checker)) {
			pos = text.append(pos, item.text);
			pos = text.append(pos, ": ");
			if (item.checked) {
				pos = text.append(pos, "on");
			} else {
				pos = text.append(pos, "off");
			}
		}
		else if (Button item& = layout.items[i].as(Button)) {
			pos = text.append(pos, item.text);
		}
		else {
			abort("item is not a known ui element", layout.items[i]);
		}
		posAll = textAll.append(posAll, text);
		posAll = textAll.append(posAll, "\n");
		layout.font.clipText(rect, text);
		rect.x = x;
		rect.y = y;
		y += rect.h;
	}
	layout.font.clipText(rectAll, textAll);
	layout.offs.fill(rectAll, 5, 0x000000);
	layout.offs.drawText(rectAll.x, rectAll.y, layout.font, textAll, 0xffffff);
}

bool uiEvent(const Layout layout&, int action, int button, int x, int y) {
// TODO: void measure(Layout layout&) { }
// TODO: void layout(Layout layout&) { }
bool click(Layout layout&, int x, int y) {
	bool test(const gxRect rect&, int x, int y) {
		if (x < rect.x || x >= rect.x + rect.w) {
			return false;
		}
		if (y < rect.y || y >= rect.y + rect.h) {
			return false;
		}
		return true;
	}

	for (int i = 0; i < layout.count; i += 1) {
		if (!layout.rects[i].test(x, y)) {
			continue;
		}
		if (Slider item& = layout.items[i].as(Slider)) {
			if (!item.enabled) {
				return false;
			}
			if (layout.selectedIndex == i) {
				return false;
			}
			layout.selectedIndex = i;
			return true;
		}
		else if (Checker item& = layout.items[i].as(Checker)) {
			if (!item.enabled) {
				return false;
			}
			item.checked = !item.checked;
			return true;
		}
		else if (Button item& = layout.items[i].as(Button)) {
			if (!item.enabled) {
				return false;
			}
			item.onClick();
		}
		else {
			abort("item is not a known ui element", layout.items[i]);
		}
	}
	return false;
}

//inline selected(Layout layout&, typename type) = layout.selectedIndex < 0 ? null : layout.items[layout.selectedIndex].as(type);

bool update(Layout layout&, int delta) {
	if (layout.selectedIndex < 0) {
		return false;
	}
	Slider slider& = layout.items[layout.selectedIndex];
	slider.value += delta;
	return true;
}

bool reset(Layout layout&, int index) {
	if (index < 0) {
		for (int i = 0; i < layout.count; i += 1) {
			layout.reset(i);
		}
		return true;
	}
	if (Slider item& = layout.items[index].as(Slider)) {
		item.value = layout.reset[index];
		return true;
	}
	return false;
}

bool select(Layout layout&, bool prev) {
	for (int i = 1; i < layout.count; i += 1) {
		int index = layout.selectedIndex + (prev ? -i : i);
		if (index >= layout.count) {
			index -= layout.count;
		}
		else if (index < 0) {
			index += layout.count;
		}
		if (Slider item& = layout.items[index].as(Slider)) {
			if (item.enabled) {
				layout.selectedIndex = index;
				return true;
			}
		}
	}
	return false;
}

	static int ox = 0;
	static int px = 0;
	static int oy = 0;
	static int py = 0;

	bool isCtrl = (y & Gui.KEY_MASK_CONTROL) != 0;
	bool isShift = (y & Gui.KEY_MASK_SHIFT) != 0;

	if (action == Gui.FINGER_MOTION) {
		action = Gui.MOUSE_MOTION;
	}
	if (action == Gui.KEY_PRESS) {
		if (button == 8) {	// backspace
			if (layout.reset(isShift ? -1 : layout.selectedIndex)) {
				return true;
			}
		}
		if (button == '-') {	// down
			int delta = isShift ? 10 : 1;
			if (layout.update(-delta)) {
				return true;
			}
		}
		if (button == '+') {	// up
			int delta = isShift ? 10 : 1;
			if (layout.update(+delta)) {
				return true;
			}
		}
		if (button == '\t') {
			if (layout.select(isShift)) {
				return true;
			}
		}
	}
	else if (action == Gui.MOUSE_PRESS) {
		px = ox = x;
		py = oy = y;
	}
	else if (action == Gui.MOUSE_RELEASE) {
		if (button == 1 && x == px && y == py) {
			if (layout.click(x, y)) {
				return true;
			}
		}
	}
	else if (action == Gui.MOUSE_MOTION) {
		if (button == 1) {
			if (layout.update(oy - y)) {
				ox = x;
				oy = y;
				return true;
			}
		}
	}
	return false;
}
