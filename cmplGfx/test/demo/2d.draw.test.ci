// draw line, rectangle and ellipse

static Image image = Image(32, 32, 32);
static Image offscreen = Image(1024, 1024, 32);

void drawLine(Image image, int x0, int y0, int x1, int y1, bool smooth, uint32 color) {
	static struct SmoothDraw {
		inline drawAntiAliased = true;
		inline "/cmplGfx/lib/image.draw.line.ci";
	}
	static struct RoughDraw {
		inline drawAntiAliased = false;
		inline "/cmplGfx/lib/image.draw.line.ci";
	}

	if (smooth) {
		return SmoothDraw.drawLine(image, x0, y0, x1, y1, color);
	}
	return RoughDraw.drawLine(image, x0, y0, x1, y1, color);
}

int onEvent(int action, int button, int ex, int ey) {
	static int ox = offscreen.width() / 2;
	static int oy = offscreen.height() / 2;
	static int x[2] = {ox, ox + ox * 3 / 4};
	static int y[2] = {oy, oy + oy * 3 / 4};
	static int idx = -1;
	static int mode = 0;

	static bool txt = true;
	static bool rect = !true;
	static bool grid = true;
	static bool fine = !true;
	static bool outline = true;
	static bool smooth = false;
	static bool shift = false;
	static bool ctrl = false;
	static bool alt = false;

	if (action == Gui.KEY_PRESS || action == Gui.KEY_RELEASE) {
		shift = (ey & Gui.KEY_MASK_SHIFT) != 0;
		ctrl = (ey & Gui.KEY_MASK_CTRL) != 0;
		alt = (ey & Gui.KEY_MASK_ALT) != 0;
	}

	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	if (action == Gui.KEY_PRESS) {
		if (button == ' ') {
			smooth = !smooth;
		}
		if (button == 't') {
			txt = !txt;
		}
		if (button == 'r') {
			rect = !rect;
		}
		if (button == 'g') {
			grid = !grid;
		}
		if (button == 'i') {
			fine = !fine;
		}
		if (button == 'o') {
			outline = !outline;
		}
		if (button == '\b') {
			int cx = offscreen.width() / 2;
			int cy = offscreen.height() / 2;
			x[0] = cx - cx * 3 / 4;
			x[1] = cx + cx * 3 / 4;
			y[0] = cy - cy * 3 / 4;
			y[1] = cy + cy * 3 / 4;
		}
		if (button == '\t') {
			bool isShift = (ey & Gui.KEY_MASK_SHIFT) != 0;
			mode += isShift ? -1 : 1;
			if (mode < -1) {
				mode = -1;
			}
		}
		if (button >= '0' && button < '0' + x.length) {
			idx = button - '0';
		}
	}
	if (action == Gui.MOUSE_PRESS || action == Gui.FINGER_PRESS) {
		idx = 1;
		inline dst(int dx, int dy) = float.sqrt(dx * dx + dy * dy);
		inline dst(int i, int cx, int cy) = dst(x[i] - cx, y[i] - cy);
		for (int i = 0; i < x.length; i += 1) {
			int len = dst(i, ex, ey);
			if (len < 25 && len < dst(idx, ex, ey)) {
				idx = i;
			}
		}
		if (!shift) {
			x[idx] = ex;
			y[idx] = ey;
		}
		ox = ex;
		oy = ey;
	}
	if (action == Gui.MOUSE_MOTION || action == Gui.FINGER_MOTION) {
		if (idx >= 0 && idx < x.length) {
			if (shift) {
				x[idx] += ex - ox;
				y[idx] += ey - oy;
			} else {
				x[idx] = ex;
				y[idx] = ey;
			}
		}

		ox = ex;
		oy = ey;
	}
	if (action == Gui.MOUSE_RELEASE || action == Gui.FINGER_RELEASE) {
		// release selected index
		idx = -1;
	}

	int x0 = x[0] * image.width() / offscreen.width();
	int y0 = y[0] * image.height() / offscreen.height();
	int x1 = x[1] * image.width() / offscreen.width();
	int y1 = y[1] * image.height() / offscreen.height();

	image.fill(0xffffff);
	if (rect) {
		image.fillRect(x0, y0, x1, y1, 0xa0ffa0);
		image.drawRect(x0, y0, x1, y1, 0x00ff00);
	}
	if (mode < 0) {
		// draw nothing
	}
	else if (mode == 0) {
		image.drawLine(x0, y0, x1, y1, smooth, 0x9a67be);
	}
	else if (mode == 1) {
		image.drawRect(x0, y0, x1, y1, 0x9a67be);
	}
	else if (mode == 2) {
		image.fillRect(x0, y0, x1, y1, 0x9a67be);
	}
	else if (mode == 3) {
		image.drawOval(x0, y0, x1, y1, 0x9a67be);
	}
	else if (mode == 4) {
		image.fillOval(x0, y0, x1, y1, 0x9a67be);
	}
	else {
		mode = 0;
		return 1;
	}

	offscreen.transform(null, image, null, int(fine), null);
	float64 sx = float64(offscreen.width()) / image.width();
	float64 sy = float64(offscreen.height()) / image.height();
	if (grid && sx > 0 && sy > 0) {
		for(int i = 0; i < image.height(); i += 1) {
			int y = i * sy;
			offscreen.fillRect(0, y, offscreen.width(), y, 1, 0x70ff70);
		}
		for(int i = 0; i < image.width(); i += 1) {
			int x = i * sx;
			offscreen.fillRect(x, 0, x, offscreen.height(), 1, 0x70ff70);
		}
	}
	if (txt) {
		FormatFlags flags = {};
		char text[1024] = {};
		Rect rect = {};
		int p = 0;
		int w = x1 - x0;
		int h = y1 - y0;
		p = text.append(0, "(");
		p = text.append(p, x0, flags);
		p = text.append(p, ", ");
		p = text.append(p, y0, flags);
		p = text.append(p, ")");
		Gui.font.clipText(&rect, text);
		x0 = Math.min(x[0], offscreen.width() - rect.w);
		y0 = Math.min(y[0], offscreen.height() - rect.h);
		offscreen.drawText(x0, y0, Gui.font, text, 0);

		p = text.append(0, "[");
		p = text.append(p, Math.abs(w), flags);
		p = text.append(p, ", ");
		p = text.append(p, Math.abs(h), flags);
		p = text.append(p, "]");
		Gui.font.clipText(&rect, text);
		x1 = Math.min(x[1], offscreen.width() - rect.w);
		y1 = Math.min(y[1], offscreen.height() - rect.h);
		offscreen.drawText(x1, y1, Gui.font, text, 0);
	}
	if (outline && sx > 0 && sy > 0) {
		x0 = x[0] - x[0] % sx;
		y0 = y[0] - y[0] % sy;
		x1 = x[1] - x[1] % sx;
		y1 = y[1] - y[1] % sy;
		x0 += sx / 2 * Math.sign(x1 - x0);
		x1 -= sx / 2 * Math.sign(x1 - x0);
		y0 += sy / 2 * Math.sign(y1 - y0);
		y1 -= sy / 2 * Math.sign(y1 - y0);
		offscreen.drawRect(x0, y0, x1, y1, 0);
		offscreen.drawLine(x0, y0, x1, y1, 0);
		offscreen.drawOval(x0, y0, x1, y1, 0);
	}
	return 0;
}

Gui.showWindow(offscreen, onEvent);
offscreen.destroy();
image.destroy();
