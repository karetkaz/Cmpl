// Use your arrow keys to move the tiles. Two tiles will merge when they contain the same value.
// based on: https://www.geeksforgeeks.org/2048-game-in-python/

inline gridSize = 4;
inline fontSize = 18;
inline displaySize = 400;

Image font = Window.font(fontSize);
Image image = Image(displaySize, displaySize, 32);
argb colors[gridSize * gridSize + 1] = {argb(0)};
int grid[gridSize * gridSize] = {};

void nextTurn() {
	int free = 0;
	for (int i = 0; i < grid.length; i += 1) {
		free += int(grid[i] == 0);
	}
	if (free == 0) {
		return;
	}
	int x = 1 + System.rand() % 2;
	int pos = System.rand() % free;
	for (int i = free = 0; i < grid.length; i += 1) {
		if (grid[i] != 0) {
			// ignore non empty cells
			continue;
		}
		if (free == pos) {
			grid[i] = x;
			return;
		}
		free += 1;
	}
}

bool mergeGrid() {
	bool merged = false;
	bool moved = false;
	for (int j = 0; j < gridSize; j += 1) {
		int k = 0;
		// merge: sum each cell with its neighbour of the same value
		for (int i = 1; i < gridSize; i += 1) {
			int old& = grid[k + j * gridSize];
			int new& = grid[i + j * gridSize];
			if (old != 0 && old == new) {
				merged = true;
				old += 1; // add to previous
				new = 0; // clear current
				k = i; // single update
			}
			if (new != 0) {
				k = i;
			}
		}
		// compress: put each value next to each other
		for (int i = k = 0; i < gridSize; i += 1) {
			int old& = grid[k + j * gridSize];
			int new = grid[i + j * gridSize];
			if (new != 0) {
				if (old != new) {
					moved = true;
				}
				old = new;
				k += 1;
			}
		}
		// cleanup empty cells
		for (int i = k; i < gridSize; i += 1) {
			grid[i + j * gridSize] = 0;
		}
	}
	return merged || moved || true;
}

void rotateGrid() {
	for (int j = 0; j < gridSize; j += 1) {
		for (int i = j + 1; i < gridSize; i += 1) {
			int r = i + j * gridSize;
			int c = j + i * gridSize;
			int x = grid[r];
			grid[r] = grid[c];
			grid[c] = x;
		}
	}
}

void mirrorGrid() {
	for (int j = 0; j < gridSize; j += 1) {
		for (int i = 0; i < gridSize / 2; i += 1) {
			int r = i + j * gridSize;
			int c = (gridSize - 1) - i + j * gridSize;
			int x = grid[r];
			grid[r] = grid[c];
			grid[c] = x;
		}
	}
}

int onEvent(int action, int button, int x, int y) {
	if (action == Window.KEY_RELEASE && button == Window.KEY_CODE_ESC) {
		// exit when releasing escape key
		return Window.quit();
	}

	if (action == Window.KEY_RELEASE && button == ' ') {
		// reset game with space-bar
		action = Window.WINDOW_INIT;
	}
	if (action == Window.WINDOW_INIT) {
		for (int i = 0; i < grid.length; i += 1) {
			grid[i] = 0;
		}
		nextTurn();
		nextTurn();
	}

	bool moved = false;
	inline KEY_ACTION = Window.KEY_PRESS;
	if (action == KEY_ACTION && button == Window.KEY_CODE_LEFT) {
		moved = mergeGrid();
	}
	if (action == KEY_ACTION && button == Window.KEY_CODE_RIGHT) {
		mirrorGrid();
		moved = mergeGrid();
		mirrorGrid();
	}
	if (action == KEY_ACTION && button == Window.KEY_CODE_UP) {
		rotateGrid();
		moved = mergeGrid();
		rotateGrid();
	}
	if (action == KEY_ACTION && button == Window.KEY_CODE_DOWN) {
		rotateGrid();
		mirrorGrid();
		moved = mergeGrid();
		mirrorGrid();
		rotateGrid();
	}
	if (moved) {
		nextTurn();
	}

	// show the grid
	for (int j = 0; j < gridSize; j += 1) {
		for (int i = 0; i < gridSize; i += 1) {
			Rect rect = {
				x0: i * displaySize / gridSize;
				y0: j * displaySize / gridSize;
				x1: (i + 1) * displaySize / gridSize - 1;
				y1: (j + 1) * displaySize / gridSize - 1;
			};

			int v = grid[i + j * gridSize];
			int c = Math.min(colors.length - 1, v);
			image.fillRect(rect, colors[c].v);

			if (c != 0) {
				Rect r = {};
				char text[8] = {0};
				text.append(0, 1 << v);

				font.clipText(&r, text);
				r.positionX(rect.x0 + (rect.width() - r.width()) / 2);
				r.positionY(rect.y0 + (rect.height() - r.height()) / 2);
				image.drawText(r, font, text, 0);
			}
		}
	}
	return Window.timeoutMax;
}

System.srand(System.time());
lerpLut(colors, argb(0xecdfc7), argb(0xecc12d), argb(0xff1e1f));
image.fill(uint32(argb(185, 173, 161)));

Window.show(image, onEvent);
image.destroy();
