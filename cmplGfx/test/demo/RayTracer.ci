// simple raytracer adapted from Pixel Bender: raytracer.pbk
struct Light {
	const vec4f position;
	const vec4f ambient;
	const vec4f diffuse;
	const vec4f specular;
	// by default use constant light attenuation
	const vec4f attenuation = vec4f(1, 0, 0, 0);
}

struct Sphere {
	const vec4f position;   // x, y, z, radius
	const vec4f color;      // r, g, b, TODO: alpha
	const vec4f ambient;
	const vec4f diffuse;
	const vec4f specular;
	const float shininess = 50;
	const float reflection = 0;
	const float checkBoard = 0;
}

Light lights[] = {
	Light {
		position: vec4f(0, 2, -4);
		ambient: vec4f(.1);
		diffuse: vec4f(1);
		specular: vec4f(1);
	};
};

Sphere things[20] = {
	Sphere { // fake the floor with a huge sphere
		position: vec4f(0.0, -1003, -8, 1000);
		color: vec4f(.6, .6, .6);
		checkBoard: 2000;
		ambient: vec4f(.1);
		diffuse: vec4f(.8);
		specular: vec4f(.5);
		reflection: .5;
	};
	Sphere { // put a shiny sphere in the middle
		position: vec4f(0, 2, -10, 2);
		color: vec4f(.8, .8, .8);
		ambient: vec4f(.05);
		diffuse: vec4f(.1);
		specular: vec4f(1);
		reflection: 1;
	};
};

// make a bunch of random spheres
for (int i = 2; i < things.length; i += 1) {
	float fi = i * 11;
	Sphere sphere = {
		position: {
			x: float.sin(fi / 5) * 6;
			y: float.sin(fi / 4.1f) * 2.5f;
			z: -18 - float.sin(fi / 3.1f + 1.2f) * 10;
			w: float.pow(float.sin(fi / 1.34 + 65.3) * .5 + .5, 3) + .2;
		};
		color: {
			x: float.cos(fi / 2.1 + 1.3) * .5 + .5;
			y: float.cos(fi / 0.1 + 1.3) * .5 + .5;
			z: float.cos(fi / 5.1 + 6.3) * .5 + .5;
		};
		ambient: vec4f(.1);
		diffuse: vec4f(.7);
		specular: vec4f(1);
		reflection: float.pow(float.sin(fi / 2.1 + 1.243) * .5 + .5, 5);
	};
	things[i] = sphere;
}

/// returns the distance of the closest intersection
float intersect(const vec4f pos, const vec4f dir, int hitIndex&) {
	float result = Math.inf;
	for (int i = 0; i < things.length; i += 1) {
		const Sphere thing& = things[i];
		vec4f dst = sub(pos, thing.position);
		float R = thing.position.w;
		float B = dp3(dst, dir);
		float C = dp3(dst, dst) - R * R;
		float D = (B * B) - C;

		if (D > 0) {
			float d = -B - float32.sqrt(D);
			if(d > 0 && d < result) {
				hitIndex = i;
				result = d;
			}
		}
	}

	return result;
}

/// returns how much light is reflected by the object
vec4f shade(const Sphere thing&, vec4f pos, vec4f dir, vec4f rayDir) {
	inline mad(vec4f a, float b, vec4f c, vec4f d) = add(a, mul(b, mul(c, d)));

	vec4f result = thing.ambient;
	for (int i = 0; i < lights.length; i += 1) {
		const Light light& = lights[i];
		vec4f dst = sub(light.position, pos);
		vec4f l = normalize(dst);
		float d = length(dst);
		int hitIdx;

		// exclude light if the ray intersects an object closer than the light
		if (intersect(pos, l, &hitIdx) > d) {

			float attn = 1 / light.attenuation.eval(d);
			float diffuse = dp3(dir, l);

			if (diffuse > 0) {
				vec4f r = sub(l, mul(2 * diffuse, dir));
				float specular = dp3(r, rayDir);

				if (specular > 0) {
					specular = float.pow(specular, thing.shininess);
					result = result.mad(attn * specular, thing.specular, light.specular);
				}

				result = result.mad(attn * diffuse, thing.diffuse, light.diffuse);
			}

			result = result.mad(attn, thing.ambient, light.ambient);
		}
	}
	return result;
}

/// returns reflection vector
inline reflect(vec4f v, vec4f n) = sub(v, mul(2 * dp3(v, n), n));

// returns the color of the ray-traced scene
vec4f raytrace(vec4f xy) {
	inline MAX_RAY_SHOTS = 100;

	// calculate direction vector for this pixel
	vec4f rayDir = normalize(vec4f(2 * xy.x - 1, -2 * xy.y + 1, -2));
	vec4f rayPos = vec4f(0);
	int hitIdx;

	vec4f result = vec4f(0);
	vec4f colorScale = vec4f(1);

	for (int depth = 0; depth < MAX_RAY_SHOTS; depth += 1) {
		float distance = intersect(rayPos, rayDir, &hitIdx);
		if (distance >= Math.inf) {
			// no intersection
			return result;
		}

		Sphere thing& = things[hitIdx];
		vec4f hitPos = add(rayPos, mul(rayDir, distance));
		vec4f hitDir = normalize(sub(hitPos, thing.position));

		// material color
		vec4f color = thing.color;
		if (thing.checkBoard != 0) {
			bool zx = thing.checkBoard < 0;
			// fake check board texture with spherical uv mapping
			float u = thing.checkBoard * (1 + float.atan2(zx ? hitDir.x : hitDir.y, hitDir.z) / Math.pi);
			float v = thing.checkBoard * (1 - Math.acos(zx ? hitDir.y : hitDir.x) / Math.pi);
			if ((Math.floor(u) + Math.floor(v)) % 2 == 0) {
				color = mul(color, .5f);
			}
		}

		// blend light with material color
		vec4f light = thing.shade(hitPos, hitDir, rayDir);
		result = result.add(mul(colorScale, mul(color, light)));

		if (thing.reflection <= 0) {
			// no reflection, stop ray tracing
			return result;
		}

		// blend according to reflectivity
		colorScale = mul(colorScale, mul(thing.reflection, color));

		// update next ray position an direction
		rayDir = normalize(reflect(rayDir, hitDir));
		rayPos = hitPos;
	}
	return result;
}

Image image = Image(512, 512, 32);
int64 time = System.millis();
image.eval(null, 0, 0, raytrace);
time = System.millis() - time;
debug("raytrace millis", time);
image.show();
image.destroy();
