// DatePicker

inline "/cmplStd/lib/time.ci";
inline "/cmplGfx/lib/micro.ui.ci";
bool onClick(Button this);

struct IntButton: View {
	char text[16] = null;
	int value;

	static bool increment(IntButton this, int value) {
		this.text.append(0, this.value += value);
		return value != 0;
	}

	static bool update(IntButton this, int value) {
		if (this.value == value) {
			return false;
		}
		this.value = value;
		this.text.append(0, value);
		return true;
	}

	void onCreate(IntButton this) {
		View.onCreate(this);
		increment(this, 0);
	}

	bool onMeasure(IntButton this, Rect rect&, const Style style&, int visible) {
		style.measure(&rect, this.text);
		return View.onMeasure(this, &rect, style, visible);
	}

	void onDraw(IntButton this, Image offs, Rect rect, const Style style&) {
		style.align(rect, &rect, this.text);
		offs.drawText(rect, style.font, this.text, style.textColor);
	}
}
struct DayButton: IntButton {
	int64 timestamp = 0;
}
struct WeekButton: IntButton {}

IntButton btnYear = {
	enabled: false;
	value: 2020;
};
Button btnYearDec = {
	onClick: onClick;
	focusable: false;
	text: "<";
};
Button btnYearInc = {
	onClick: onClick;
	focusable: false;
	text: ">";
};

IntButton btnMonth = {
	enabled: false;
	value: 12;
};
Button btnMonthDec = {
	onClick: onClick;
	focusable: false;
	text: "<";
};
Button btnMonthInc = {
	onClick: onClick;
	focusable: false;
	text: ">";
};

IntButton btnDay = {
	enabled: false;
	value: 21;
};
Button btnDayDec = {
	onClick: onClick;
	focusable: false;
	text: "<";
};
Button btnDayInc = {
	onClick: onClick;
	focusable: false;
	text: ">";
};

Button btnToday = {
	onClick: onClick;
	focusable: false;
	text: "Today";
};

View btnDays[] = {
	Button {text: "Week", enabled: false};
	Button {text: "Mon", enabled: false};
	Button {text: "Tue", enabled: false};
	Button {text: "Wed", enabled: false};
	Button {text: "Thu", enabled: false};
	Button {text: "Fri", enabled: false};
	Button {text: "Sat", enabled: false};
	Button {text: "Sun", enabled: false};

	WeekButton {enabled: false};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};

	WeekButton {enabled: false};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};

	WeekButton {enabled: false};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};

	WeekButton {enabled: false};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};

	WeekButton {enabled: false};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};

	WeekButton {enabled: false};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
	DayButton {focusable: false; onClick: onClick;};
};

bool resetCounter(IntButton this) {
	this.value = -1;
	return true;
}

IntButton counter = {focusable: false, width: -200, height: -100, onClick: resetCounter};

Image offs = Image(512, 512, 32);

Style style = {
	font: Gui.font;
	padding: 10;
	align: Style.center;
	fmtInt: { padLen: 4 };
	fmtFlt: { padLen: 4, precision: 2 };
};
Widget ui = Widget(offs, style
	, Layout.Custom(-1, Style.fill
		, Layout.Row(btnYearDec, btnYear, btnYearInc)
		, Layout.Row(btnMonthDec, btnMonth, btnMonthInc)
		, Layout.Row(btnDayDec, btnDay, btnDayInc)
		, btnToday
	)
	, Layout.Custom(8, Style.fill, ...btnDays)
	, counter
).margin(Style.fill, 0, 0).padding(10);

int64 now = System.millis();
bool onClick(Button this) {
	if (DayButton day = this.as(DayButton)) {
		now = day.timestamp;
	}
	else if (this == btnYearInc) {
		Date parts = Date.parts(now);
		now = Date.millis(parts.year + 1, parts.month, parts.dayOfMonth);
	}
	else if (this == btnYearDec) {
		Date parts = Date.parts(now);
		now = Date.millis(parts.year - 1, parts.month, parts.dayOfMonth);
	}
	else if (this == btnMonthInc) {
		Date parts = Date.parts(now);
		if (parts.month < 12) {
			parts.month += 1;
		} else {
			parts.year += 1;
			parts.month = 1;
		}
		now = Date.millis(parts.year, parts.month, parts.dayOfMonth);
	}
	else if (this == btnMonthDec) {
		Date parts = Date.parts(now);
		if (parts.month > 1) {
			parts.month -= 1;
		} else {
			parts.year -= 1;
			parts.month = 12;
		}
		now = Date.millis(parts.year, parts.month, parts.dayOfMonth);
	}
	else if (this == btnDayInc) {
		now += Date.MillisPerDay;
	}
	else if (this == btnDayDec) {
		now -= Date.MillisPerDay;
	}
	else if (this == btnToday) {
		now = System.millis();
	}

	// update year, month and day buttons
	Date parts = Date.parts(now);
	btnYear.update(parts.year);
	btnMonth.update(parts.month);
	btnDay.update(parts.dayOfMonth);

	// calculate first day of month
	int64 today = Date.millis(parts.year, parts.month, parts.dayOfMonth);
	int64 start = Date.millis(parts.year, parts.month, 1);
	parts = Date.parts(start);

	// calculate first monday
	start -= (parts.dayOfWeek - 1) * Date.MillisPerDay;

	WeekButton week = null;
	// fill the days in the "grid", skip header with week names
	for (int i = 8; i < btnDays.length; i += 1) {
		parts = Date.parts(start);
		if (WeekButton button = btnDays[i].as(WeekButton)) {
			button.update(parts.weekOfYear);
			week = button;
		}
		if (DayButton button = btnDays[i].as(DayButton)) {
			if (today == start) {
				ui.setFocused(button);
			}
			if (btnMonth.value == parts.month) {
				button.timestamp = start;
				button.enabled = true;
			} else {
				button.timestamp = now;
				button.enabled = false;
			}
			button.update(parts.dayOfMonth);
			start += Date.MillisPerDay;

			if (week != null && week.value > parts.weekOfYear) {
				week.update(parts.weekOfYear);
			}
		}
	}

	return true;
}

int onEvent(int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	if (!ui.onEvent(action, button, x, y)) {
		return 0;
	}
	if (action == Gui.WINDOW_INIT) {
		onClick(btnToday);
	}
	offs.fill(0);
	counter.increment(1);
	return ui.draw();
}
offs.show(onEvent);
