// analog clock using antialias lines
static if (typename(Image.drawAALine) == null) {
inline "/cmplGfx/lib/emulated/aaDraw.ci";
}

inline hourText = 0xadadad;
inline hourHand = 0xff0000;
inline minuteHand = 0x00ff00;
inline secondHand = 0xffffff;
Image offs = Image(320, 320, 32);

int onEvent(int action, int button, int ex, int ey) {
	static bool aaDraw = true;
	if (action == Gui.KEY_RELEASE) {
		if (button == ' ') {
			aaDraw = !aaDraw;
		}
		if (button == 27) {
			// exit with escape button
			return -1;
		}
	}

	// clear surface
	offs.fill(0x00000000);

	Image font = Gui.font;
	int x1 = offs.width() / 2;
	int y1 = offs.height() / 2;
	int r = Math.min(x1, y1) - 2;
	offs.fillAAOval(x1 - r, y1 - r, x1 + r, y1 + r, 0x4a4a4a);

	if (hourText != 0) {
		for (int i = 1; i <= 12; i += 1) {
			double size = r - font.height() * 3 / 4;
			double angle = Math.radians(i % 12 * (360 / 12) - 90);
			int x2 = x1 + int(Math.cos(angle) * size);
			int y2 = y1 + int(Math.sin(angle) * size);
			char text[8] = {0};
			text.append(0, i);
			offs.drawText(x2 - 4, y2 - 8, font, text, hourText);
		}
	}

	char txtClock[*] = "Utc Clock";
	Rect roiClock = {};
	inline padding = 5;
	inline radius = 5;
	font.clipText(&roiClock, txtClock);
	roiClock.x = x1 - roiClock.w / 2;
	roiClock.y = y1 + y1 / 3;
	roiClock.adjust(padding);
	offs.fillRect(roiClock, radius, 0x101010);
	roiClock.adjust(-padding);
	offs.drawText(roiClock, font, txtClock, 0xadadad);

	inline secondsInMillis = 1000;
	inline minutesInMillis = 60 * secondsInMillis;
	inline hoursInMillis = 60 * minutesInMillis;

	float64 time = System.millis();
	if (hourHand != 0) {
		double size = r * 2 / 4.;
		double angle = Math.radians(((time / hoursInMillis) % 12) * (360 / 12) - 90);
		int x2 = x1 + int(Math.cos(angle) * size);
		int y2 = y1 + int(Math.sin(angle) * size);
		if (aaDraw) {
			offs.drawAALine(x1, y1, x2, y2, hourHand);
		} else {
			offs.drawLine(x1, y1, x2, y2, hourHand);
		}
	}

	if (minuteHand != 0) {
		double size = r * 3 / 4.;
		double angle = Math.radians(((time / minutesInMillis) % 60) * 6 - 90);
		int x2 = x1 + int(Math.cos(angle) * size);
		int y2 = y1 + int(Math.sin(angle) * size);
		if (aaDraw) {
			offs.drawAALine(x1, y1, x2, y2, minuteHand);
		} else {
			offs.drawLine(x1, y1, x2, y2, minuteHand);
		}
	}

	if (secondHand != 0) {
		double size = r * 4 / 4. - 6;
		double angle = Math.radians(((time / secondsInMillis) % 60) * 6 - 90);
		int x2 = x1 + int(Math.cos(angle) * size);
		int y2 = y1 + int(Math.sin(angle) * size);
		if (aaDraw) {
			offs.drawAALine(x1, y1, x2, y2, secondHand);
		} else {
			offs.drawLine(x1, y1, x2, y2, secondHand);
		}
	}

	// sleep for a while
	return 25;
}

Gui.showWindow(offs, onEvent);
offs.destroy();
