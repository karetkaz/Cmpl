/* Brightness contrast gamma demo using a lookup table
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back);

inline "/cmplGfx/lib/micro.ui.ci";
void drawColorSlider(Slider this, Image offs, Rect rect, const Style style&);
void updateSlider(Slider min, Slider max, int value);
bool syncMinMax(Slider this, int value);

Histogram histogram = {
	enabled: false;
	color: true;
};

Slider sldHueMin = {
	onDrawSlider: drawColorSlider;
	onUpdate: syncMinMax;
	text: "Hue.min";
	focusable: false;
	maximum: 359;
};
Slider sldHueMax = {
	onDrawSlider: drawColorSlider;
	onUpdate: syncMinMax;
	text: "Hue.max";
	focusable: false;
	maximum: 359;
};

Slider sldLumMin = {
	onDrawSlider: drawColorSlider;
	onUpdate: syncMinMax;
	text: "Luminance.min";
	focusable: false;
	maximum: 255;
};
Slider sldLumMax = {
	onDrawSlider: drawColorSlider;
	onUpdate: syncMinMax;
	text: "Luminance.max";
	focusable: false;
	maximum: 255;
	value: 255;
};

Slider sldVal = {
	text: "Amount";
	focusable: false;
	maximum: 255;
	divisor: 255;
	value: 26;
};

DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

// blending method executed for each pixel in the image
vec4f blendHsl(vec4f base, vec4f blend) {
	float val = sldVal.value / 255f;

	float lum = lum(blend);
	float min = sldLumMin.value / 255f;
	float max = sldLumMax.value / 255f;
	if (lum < min) {
		lum = Math.smooth(min - lum, 0f, val);
	}
	else if (lum > max) {
		lum = Math.smooth(lum - max, 0f, val);
	}
	else {
		lum = 0;
	}

	min = Math.min(Math.min(blend.x, blend.y), blend.z);
	max = Math.max(Math.max(blend.x, blend.y), blend.z);
	if (max == min) {
		// return blue mask with computed alpha component
		return mix(lum, vec4f(0, 0, 1), base);
	}

	float hue = 1;
	float delta = max - min;
	if (max == blend.x) {
		hue = ((blend.y - blend.z) / delta) / 6;
	}
	else if (max == blend.y) {
		hue = (2 + (blend.z - blend.x) / delta) / 6;
	}
	else {// if (max == blend.z)
		hue = (4 + (blend.x - blend.y)  / delta) / 6;
	}
	if (hue < 0) {
		hue += 1;
	}
	min = sldHueMin.value / 359f;
	max = sldHueMax.value / 359f;
	if (hue < min) {
		hue = Math.smooth(min - hue, 0f, val);
	}
	else if (hue > max) {
		hue = Math.smooth(hue - max, 0f, val);
	}
	else {
		hue = 0;
	}

	// return red mask with computed alpha component
	float32 a = 1 - (1 - hue) * (1 - lum);
	return mix(a, vec4f(1, 0, 0), base);
}

int onEvent(Window win&, int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	Widget ui = win.widget;
	if (!win.dispatchEvent(ui, action, button, x, y)) {
		if (ui.pressedIndex != -1) {
			// redraw only ui, in case there is an active control
			return win.draw(ui);
		}
		if (action != Gui.MOUSE_MOTION && action != Gui.FINGER_MOTION && action != Gui.MOUSE_RELEASE) {
			// event not processed, wait for the next one
			return 0;
		}
		if (button == 0 && (action == Gui.MOUSE_MOTION || action == Gui.FINGER_MOTION)) {
			return 0;
		}
		// read the color under the cursor and update sliders
		vec4f col = rgb2hsl(vec4f(argb(back.get(x, y))));
		updateSlider(sldHueMin, sldHueMax, col.x * 359);
		updateSlider(sldLumMin, sldLumMax, col.z * 255);
		if (action == Gui.MOUSE_MOTION) {
			return win.draw(ui);
		}
	}

	if (button == 0 && (action == Gui.MOUSE_MOTION || action == Gui.FINGER_MOTION)) {
		return win.draw(ui);
	}

	offs.copy(0, 0, back, null);

	// blending is slow, so blend only when mouse button is released
	if (button == 1 && (action == Gui.MOUSE_RELEASE || action == Gui.FINGER_RELEASE)) {
		debug.startTimer();
		offs.blend(0, 0, back, null, blendHsl);
	}

	histogram.update(offs);
	return win.draw(ui);
}

void drawColorSlider(Slider this, Image offs, Rect rect, const Style style&) {
	const int yOff = 1;
	const int yOn = yOff + style.padding / 3;
	const int y = rect.y + rect.h;
	if (this == sldHueMin || this == sldHueMax) {
		const int x1 = rect.x + rect.w;
		const int x0 = rect.x + int64(this.value - this.minimum) * rect.w / (this.maximum - this.minimum);
		for (int x = rect.x; x < x0; x += 1) {
			float32 val = float32(x - rect.x) / rect.w;
			argb color = argb(hsl2rgb(vec4f(val, 1f, .5f)));
			offs.fillRect(x, y - yOn, x + 1, y, color.v);
		}
		for (int x = x0; x < x1; x += 1) {
			float32 val = float32(x - rect.x) / rect.w;
			argb color = argb(hsl2rgb(vec4f(val, 1f, .5f)));
			offs.fillRect(x, y - yOff, x + 1, y, color.v);
		}
		return;
	}
	if (this == sldLumMin || this == sldLumMax) {
		const int x1 = rect.x + rect.w;
		const int x0 = rect.x + int64(this.value - this.minimum) * rect.w / (this.maximum - this.minimum);
		for (int x = rect.x; x < x0; x += 1) {
			float32 val = float32(x - rect.x) / rect.w;
			argb color = argb(vec4f(val, val, val));
			offs.fillRect(x, y - yOn, x + 1, y, color.v);
		}
		for (int x = x0; x < x1; x += 1) {
			float32 val = float32(x - rect.x) / rect.w;
			argb color = argb(vec4f(val, val, val));
			offs.fillRect(x, y - yOff, x + 1, y, color.v);
		}
		return;
	}
}
void updateSlider(Slider min, Slider max, int value) {
	int gap = max.value - min.value;
	if (gap < 0) {
		return;
	}
	if (value < min.value) {
		min.onUpdate(value);
		max.onUpdate(value + gap);
	}
	if (value > max.value) {
		max.onUpdate(value);
		min.onUpdate(value - gap);
	}
}
bool syncMinMax(Slider this, int value) {
	bool result = Slider.onUpdate(this, value);
	if (this == sldHueMin || this == sldHueMax) {
		if (sldHueMin.value > sldHueMax.value) {
			sldHueMin.value = this.value;
			sldHueMax.value = this.value;
			return true;
		}
	}
	if (this == sldLumMin || this == sldLumMax) {
		if (sldLumMin.value > sldLumMax.value) {
			sldLumMin.value = this.value;
			sldLumMax.value = this.value;
			return true;
		}
	}
	return result;
}

Gui.showWindow(offs, onEvent, Widget(
	histogram,

	null,
	sldHueMin, sldHueMax,
	sldLumMin, sldLumMax,
	sldVal,

	null, debug
));
offs.destroy();
back.destroy();
