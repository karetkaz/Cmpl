/* Brightness contrast demo using non linear functions
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse up or down in the window to adjust control value
 */

Image back = Image("asset/image/forest.png", 32);
Image font = Image.openFnt("asset/font/Modern-1.fnt");
Image offs = Image(back.width(), back.height(), back.depth());

void brightnessContrastGamma(uint32 lut[256], int brightness, int contrast) {
	inline "/lib/std/math/Easing.ci";
	float64 cVal = (256 + contrast) / 256.;
	argb lut2[*] = lut;

	float64 easing(float64 ratio) = Easing.Circle;
	for (int idx = 0; idx < lut.length; idx += 1) {
		float64 value = idx / 256.;
		if (contrast < 0) {
			value = Math.lerp(-contrast / 256., value, easing.easeOutIn(value));
		} else {
			value = Math.lerp(contrast / 256., value, easing.easeInOut(value));
		}
		if (brightness < 0) {
			value = Math.lerp(-brightness / 256., value, easing(value));
		} else {
			value = Math.lerp(brightness / 256., value, easing.easeOut(value));
		}

		int rgb = clamp_s8(256 * value);
		lut2[idx].r = rgb;
		lut2[idx].g = rgb;
		lut2[idx].b = rgb;
		lut2[idx].a = idx;
	}
}

int onEvent(int action, int button, int x, int y);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();

int onEvent(int action, int button, int x, int y) {
	inline "/lib/gfx/micro.ui.ci";

	static Slider brightness = {
		text: "brightness";
		minimum: -256;
		maximum: 256;
	};
	static Slider contrast = {
		text: "contrast";
		minimum: -256;
		maximum: 256;
	};
	static Histogram histogram = {
		image: offs;
		enabled: false;
	};
	static Histogram curves = {
		image: offs;
		lines: true;
		enabled: false;
	};
	static Slider time = {
		text: "time";
		enabled: false;
	};

	static Layout ui = Layout(offs, -30, 30, font,
		histogram,
		curves,
		brightness,
		contrast,
		time
	);

	bool redraw = uiEvent(ui, action, button, x, y);
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}
	if (redraw) {
		uint64 start = System.millis();
		brightnessContrastGamma(curves.data, brightness.value, contrast.value);
		offs.resize(null, back, null, 1);
		offs.colorMap(null, curves.data);
		offs.calcHist(null, 0x00ffffff, histogram.data);

		time.value = System.millis() - start;
		ui.draw();
	}
	return 0;
}
