/* Brightness contrast demo using non linear functions
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image back = Image("asset/image/forest.jpg", 32);
Image offs = Image(back);

void brightnessContrast(argb lut[256], int brightness, int contrast) {
	inline "/cmplStd/lib/math/Easing.ci";
	float64 cVal = (256 + contrast) / 256.;

	float64 easing(float64 ratio) = Easing.circle;
	for (int idx = 0; idx < lut.length; idx += 1) {
		float64 value = idx / 256.;
		if (contrast < 0) {
			value = Math.lerp(-contrast / 256., value, easing.outIn(value));
		} else {
			value = Math.lerp(contrast / 256., value, easing.inOut(value));
		}
		if (brightness < 0) {
			value = Math.lerp(-brightness / 256., value, easing(value));
		} else {
			value = Math.lerp(brightness / 256., value, easing.out(value));
		}

		int rgb = sat_s8(256 * value);
		lut[idx].r = rgb;
		lut[idx].g = rgb;
		lut[idx].b = rgb;
		lut[idx].a = idx;
	}
}

inline "/cmplGfx/lib/micro.ui.ci";
Slider brightness = {
	text: "brightness";
	minimum: -256;
	maximum: 256;
};
Slider contrast = {
	text: "contrast";
	minimum: -256;
	maximum: 256;
};
Histogram histogram = {
	enabled: false;
};
Histogram curves = {
	lines: true;
	enabled: false;
};
DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

int onEvent(Window win&, int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}
	Widget ui = win.widget;
	if (!win.dispatchEvent(ui, action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}

	debug.startTimer();
	brightnessContrast(&curves.data, brightness.value, contrast.value);
	offs.copy(0, 0, back, null);
	offs.colorMap(null, curves.data);
	histogram.update(offs);
	return win.draw(ui);
}

Gui.showWindow(offs, onEvent, FxWidget(
	histogram,
	curves,

	null,
	brightness, contrast,

	null, debug
));
offs.destroy();
back.destroy();
