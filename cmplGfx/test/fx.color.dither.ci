/* Color dithering demo
 *
 * use 'tab' / 'shift' + 'tab' to select next control
 * use 'enter' / 'shift' + 'enter' to select next control
 * use '+' / '-' to adjust value of selected control (use shift for more precision)
 * use 'backspace' / 'shift' + 'backspace' to reset selected / every control value
 * use 'space' to press a button, toggle switch or reset slider value
 * use '[' or ']' to show and hide the controls
 *
 * drag the mouse left or right in the window to adjust selected slider value
 */

Image back = Image("asset/image/forest.jpg");
Image offs = Image(back);

void ditherThreshold(Image dst, Image src, bool grayscale, uint32 levels) {
	if (levels >= 256) {
		levels = 256;
	}
	int cols[256] = {0};
	int colors = levels - 1;
	for (int i = 0; i < cols.length; i += 1) {
		cols[i] = (i * levels / cols.length) * cols.length / colors;
	}

	int width = src.width();
	int height = src.height();

	if (grayscale) {
		for (int y = 0; y < height; y += 1) {
			for (int x = 0; x < width; x += 1) {
				argb col = argb(src.get(x, y));
				int gray = cols[lum(col)];
				dst.set(x, y, gray(gray));
			}
		}
		return;
	}
	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			argb col = argb(src.get(x, y));
			int r = cols[rch(col)];
			int g = cols[gch(col)];
			int b = cols[bch(col)];
			dst.set(x, y, argb(r, g, b));
		}
	}
}

void ditherBayer(Image dst, Image src, bool grayscale, uint32 levels, const int pattern[64]) {
	if (levels >= 256) {
		levels = 256;
	}
	int cols[256] = {0};
	int colors = levels - 1;
	for (int i = 0; i < levels; i += 1) {
		cols[i] = i * 255 / colors;
	}

	int width = src.width();
	int height = src.height();

	int num2;
	int num3;

	static void bayer(int num2&, int num3&, int col, int levels) {
		inline d = 64;
		int tmp = col * ((levels * d) + 1) / 256;
		num3 = tmp / d;
		num2 = tmp - num3 * d;
	}

	if (grayscale) {
		for (int y = 0; y < height; y += 1) {
			for (int x = 0; x < width; x += 1) {
				int pat = pattern[(x & 7) + 8 * (y & 7)];
				int col = lum(argb(src.get(x, y)));

				bayer(&num2, &num3, col, colors);
				int gray = cols[num3 + int(num2 > pat)];

				dst.set(x, y, gray(gray));
			}
		}
		return;
	}

	for (int y = 0; y < height; y += 1) {
		for (int x = 0; x < width; x += 1) {
			int pat = pattern[(x & 7) + 8 * (y & 7)];
			argb col = argb(src.get(x, y));

			bayer(&num2, &num3, rch(col), colors);
			int r = cols[num3 + int(num2 > pat)];

			bayer(&num2, &num3, gch(col), colors);
			int g = cols[num3 + int(num2 > pat)];

			bayer(&num2, &num3, bch(col), colors);
			int b = cols[num3 + int(num2 > pat)];

			dst.set(x, y, argb(r, g, b));
		}
	}
}

void ditherBayer(Image dst, Image src, bool grayscale, uint32 levels) {
	static const int pattern[8 * 8] = {
		 0, 32,  8, 40,  2, 34, 10, 42,
		48, 16, 56, 24, 50, 18, 58, 26,
		12, 44,  4, 36, 14, 46,  6, 38,
		60, 28, 52, 20, 62, 30, 54, 22,
		 3, 35, 11, 43,  1, 33,  9, 41,
		51, 19, 59, 27, 49, 17, 57, 25,
		15, 47,  7, 39, 13, 45,  5, 37,
		63, 31, 55, 23, 61, 29, 53, 21
	};
	return ditherBayer(dst, src, grayscale, levels, pattern);
}

void ditherBayer2(Image dst, Image src, bool grayscale, uint32 levels) {
	static const int pattern2[8 * 8] = {
		// https://github.com/safecomp/AndroidImageProcessing/blob/master/AndroidImageProcessing/src/safecomp/ir/androidimageprocessing/Dithering.java#L207
		1, 49, 13, 61, 4, 52, 16, 64,
		33, 17, 45, 29, 36, 20, 48, 32,
		9, 57, 5, 53, 12, 60, 8, 56,
		41, 25, 37, 21, 44, 28, 40, 24,
		3, 51, 15, 63, 2, 50, 14, 62,
		35, 19, 47, 31, 34, 18, 46, 30,
		11, 59, 7, 55, 10, 58, 6, 54,
		43, 27, 39, 23, 42, 26, 38, 22
	};
	static const int pattern3[8 * 8] = {
		// https://github.com/makeworld-the-better-one/dither/blob/master/ordered_ditherers.go#L44
		24, 10, 12, 26, 35, 47, 49, 37,
		8, 0, 2, 14, 45, 59, 61, 51,
		22, 6, 4, 16, 43, 57, 63, 53,
		30, 20, 18, 28, 33, 41, 55, 39,
		34, 46, 48, 36, 25, 11, 13, 27,
		44, 58, 60, 50, 9, 1, 3, 15,
		42, 56, 62, 52, 23, 7, 5, 17,
		32, 40, 54, 38, 31, 21, 19, 29,
	};
	static const int pattern4[8 * 8] = {
		// https://github.com/makeworld-the-better-one/dither/blob/master/ordered_ditherers.go#L107
		13, 11, 12, 15, 18, 20, 19, 16,
		4, 3, 2, 9, 27, 28, 29, 22,
		5, 0, 1, 10, 26, 31, 30, 21,
		8, 6, 7, 14, 23, 25, 24, 17,
		18, 20, 19, 16, 13, 11, 12, 15,
		27, 28, 29, 22, 4, 3, 2, 9,
		26, 31, 30, 21, 5, 0, 1, 10,
		23, 25, 24, 17, 8, 6, 7, 14,
	};
	static const int pattern5[8 * 8] = {
		// https://github.com/makeworld-the-better-one/dither/blob/master/ordered_ditherers.go#L219
		3, 9, 17, 27, 25, 15, 7, 1,
		11, 29, 38, 46, 44, 36, 23, 5,
		19, 40, 52, 58, 56, 50, 34, 13,
		31, 48, 60, 63, 62, 54, 42, 21,
		30, 47, 59, 63, 61, 53, 41, 20,
		18, 39, 51, 57, 55, 49, 33, 12,
		10, 28, 37, 45, 43, 35, 22, 4,
		2, 8, 16, 26, 24, 14, 6, 0,
	};
	static const int pattern6[8 * 8] = {
		// https://github.com/makeworld-the-better-one/dither/blob/master/ordered_ditherers.go#L275
		13, 9, 5, 12, 18, 22, 26, 19,
		6, 1, 0, 8, 25, 30, 31, 23,
		10, 2, 3, 4, 21, 29, 28, 27,
		14, 7, 11, 15, 17, 24, 20, 16,
		18, 22, 26, 19, 13, 9, 5, 12,
		25, 30, 31, 23, 6, 1, 0, 8,
		21, 29, 28, 27, 10, 2, 3, 4,
		17, 24, 20, 16, 14, 7, 11, 15,
	};
	return ditherBayer(dst, src, grayscale, levels, pattern3);
}

enum Dithering: int32 {
	SteinbergFalse;
	Steinberg;
	Stucki;
}
void dither(Image img, bool grayscale, uint32 levels, Dithering method) {
	if (levels >= 256) {
		levels = 256;
	}
	int cols[256] = {0};
	int colors = levels - 1;
	for (int i = 0; i < cols.length; i += 1) {
		cols[i] = (i * levels / cols.length) * cols.length / colors;
	}

	int width = img.width();
	int height = img.height();

	if (method == Dithering.SteinbergFalse) {
		/* False Floyd-Steinberg Dithering kernel (/8)
		 * 	*   3
		 *	3   2
		 */
		if (grayscale) {
			for(int y = 0; y < height; y += 1) {
				for (int x = 0; x < width; x += 1) {
					argb col = argb(img.get(x, y));
					int lum = lum(col);
					int gray = cols[lum];

					int quant_error = lum - gray;
					inline rgbError(int col, int s) = gray(lum(argb(col)) + s * quant_error / 8);

					img.set(x, y, gray(gray));
					img.set(x + 1, y + 0, rgbError(img.get(x + 1, y + 0), 3));
					img.set(x + 0, y + 1, rgbError(img.get(x + 0, y + 1), 3));
					img.set(x + 1, y + 1, rgbError(img.get(x + 1, y + 1), 2));
				}
			}
		}
		else {
			for (int y = 0; y < height; y += 1) {
				for (int x = 0; x < width; x += 1) {
					argb col = argb(img.get(x, y));
					int r = cols[rch(col)];
					int g = cols[gch(col)];
					int b = cols[bch(col)];

					int quant_error_r = rch(col) - r;
					int quant_error_g = gch(col) - g;
					int quant_error_b = bch(col) - b;

					inline rgbError(int col, int s) = argb(
						rch(argb(col)) + s * quant_error_r / 8,
						gch(argb(col)) + s * quant_error_g / 8,
						bch(argb(col)) + s * quant_error_b / 8
					);

					img.set(x, y, argb(r, g, b));
					img.set(x + 1, y + 0, rgbError(img.get(x + 1, y + 0), 3));
					img.set(x + 0, y + 1, rgbError(img.get(x + 0, y + 1), 3));
					img.set(x + 1, y + 1, rgbError(img.get(x + 1, y + 1), 2));
				}
			}
		}
	}
	else if (method == Dithering.Steinberg) {
		/* Floyd-Steinberg Dithering kernel (/16)
		 * 		*   7
		 *	3   5   1
		 */
		if (grayscale) {
			for(int y = 0; y < height; y += 1) {
				for (int x = 0; x < width; x += 1) {
					argb col = argb(img.get(x, y));
					int lum = lum(col);
					int gray = cols[lum];

					int quant_error = lum - gray;
					inline rgbError(int col, int s) = gray(lum(argb(col)) + s * quant_error / 16);

					img.set(x, y, gray(gray));
					img.set(x + 1, y + 0, rgbError(img.get(x + 1, y + 0), 7));
					img.set(x - 1, y + 1, rgbError(img.get(x - 1, y + 1), 3));
					img.set(x + 0, y + 1, rgbError(img.get(x + 0, y + 1), 5));
					img.set(x + 1, y + 1, rgbError(img.get(x + 1, y + 1), 1));
				}
			}
		}
		else {
			for(int y = 0; y < height; y += 1) {
				for (int x = 0; x < width; x += 1) {
					argb col = argb(img.get(x, y));
					int r = cols[rch(col)];
					int g = cols[gch(col)];
					int b = cols[bch(col)];

					int quant_error_r = rch(col) - r;
					int quant_error_g = gch(col) - g;
					int quant_error_b = bch(col) - b;

					inline rgbError(int col, int s) = argb(
						rch(argb(col)) + s * quant_error_r / 16,
						gch(argb(col)) + s * quant_error_g / 16,
						bch(argb(col)) + s * quant_error_b / 16
					);

					img.set(x, y, argb(r, g, b));
					img.set(x + 1, y + 0, rgbError(img.get(x + 1, y + 0), 7));
					img.set(x - 1, y + 1, rgbError(img.get(x - 1, y + 1), 3));
					img.set(x + 0, y + 1, rgbError(img.get(x + 0, y + 1), 5));
					img.set(x + 1, y + 1, rgbError(img.get(x + 1, y + 1), 1));
				}
			}
		}
	}
	else if (method == Dithering.Stucki) {
		/* Stucki Dithering kernel (/42)
		 * 			*   8   4
		 *	2   4   8   4   2
		 *	1   2   4   2   1
		 */
		if (grayscale) {
			for(int y = 0; y < height; y += 1) {
				for (int x = 0; x < width; x += 1) {
					argb col = argb(img.get(x, y));
					int lum = lum(col);
					int gray = cols[lum];

					int quant_error = lum - gray;
					inline rgbError(int col, int s) = gray(lum(argb(col)) + s * quant_error / 42);

					img.set(x, y, gray(gray));
					img.set(x + 1, y + 0, rgbError(img.get(x + 1, y + 0), 8));
					img.set(x + 2, y + 0, rgbError(img.get(x + 2, y + 0), 4));
					img.set(x - 2, y + 1, rgbError(img.get(x - 2, y + 1), 2));
					img.set(x - 1, y + 1, rgbError(img.get(x - 1, y + 1), 4));
					img.set(x + 0, y + 1, rgbError(img.get(x + 0, y + 1), 8));
					img.set(x + 1, y + 1, rgbError(img.get(x + 1, y + 1), 4));
					img.set(x + 2, y + 1, rgbError(img.get(x + 2, y + 1), 2));
					img.set(x - 2, y + 2, rgbError(img.get(x - 2, y + 2), 1));
					img.set(x - 1, y + 2, rgbError(img.get(x - 1, y + 2), 2));
					img.set(x + 0, y + 2, rgbError(img.get(x + 0, y + 2), 4));
					img.set(x + 1, y + 2, rgbError(img.get(x + 1, y + 2), 2));
					img.set(x + 2, y + 2, rgbError(img.get(x + 2, y + 2), 1));
				}
			}
		}
		else {
			for(int y = 0; y < height; y += 1) {
				for (int x = 0; x < width; x += 1) {
					argb col = argb(img.get(x, y));
					int r = cols[rch(col)];
					int g = cols[gch(col)];
					int b = cols[bch(col)];

					int quant_error_r = rch(col) - r;
					int quant_error_g = gch(col) - g;
					int quant_error_b = bch(col) - b;

					inline rgbError(int col, int s) = argb(
						rch(argb(col)) + s * quant_error_r / 42,
						gch(argb(col)) + s * quant_error_g / 42,
						bch(argb(col)) + s * quant_error_b / 42
					);

					img.set(x, y, argb(r, g, b));
					img.set(x + 1, y + 0, rgbError(img.get(x + 1, y + 0), 8));
					img.set(x + 2, y + 0, rgbError(img.get(x + 2, y + 0), 4));
					img.set(x - 2, y + 1, rgbError(img.get(x - 2, y + 1), 2));
					img.set(x - 1, y + 1, rgbError(img.get(x - 1, y + 1), 4));
					img.set(x + 0, y + 1, rgbError(img.get(x + 0, y + 1), 8));
					img.set(x + 1, y + 1, rgbError(img.get(x + 1, y + 1), 4));
					img.set(x + 2, y + 1, rgbError(img.get(x + 2, y + 1), 2));
					img.set(x - 2, y + 2, rgbError(img.get(x - 2, y + 2), 1));
					img.set(x - 1, y + 2, rgbError(img.get(x - 1, y + 2), 2));
					img.set(x + 0, y + 2, rgbError(img.get(x + 0, y + 2), 4));
					img.set(x + 1, y + 2, rgbError(img.get(x + 1, y + 2), 2));
					img.set(x + 2, y + 2, rgbError(img.get(x + 2, y + 2), 1));
				}
			}
		}
	}
}

inline "/cmplGfx/lib/micro.ui.ci";
Histogram histogram = {
	enabled: false;
};

Slider sldLevels = {
	text: "Levels";
	minimum: 2;
	maximum: 255;
	value: 5;
};

Switch chkGrayscale = {
	text: "Grayscale";
	selected: 1;
	states: null;
	focusable: false;
};

char ditherOptions[*][] = {
	"Threshold";
//	"Bayer2";
	"Bayer";
	"SteinbergFalse";
	"Steinberg";
	"Stucki";
};
Switch selDither = {
	text: "Dithering";
	states: ditherOptions;
	focusable: false;
};

DebugView debug = {
	focusable: false;
	measures: -1;
	draws: -1;
};

int onEvent(Window win&, int action, int button, int x, int y) {
	if (action == Gui.KEY_RELEASE && button == 27) {
		// exit when releasing escape key
		return -1;
	}

	Widget ui = win.widget;
	if (!win.dispatchEvent(ui, action, button, x, y)) {
		// event not processed, wait for the next one
		return 0;
	}
	if (!win.processableEvent(action, button, x, y)) {
		// hover view, focus view, and such things
		return win.draw(ui);
	}

	debug.startTimer();
	offs.copy(0, 0, back, null);
	if (ditherOptions[selDither.selected] == "Threshold") {
		offs.ditherThreshold(back, chkGrayscale.checked(), sldLevels.value);
	}
	else if (ditherOptions[selDither.selected] == "Bayer") {
		offs.ditherBayer(back, chkGrayscale.checked(), sldLevels.value);
	}
	else if (ditherOptions[selDither.selected] == "Bayer2") {
		offs.ditherBayer2(back, chkGrayscale.checked(), sldLevels.value);
	}
	else if (ditherOptions[selDither.selected] == "SteinbergFalse") {
		offs.dither(chkGrayscale.checked(), sldLevels.value, Dithering.SteinbergFalse);
	}
	else if (ditherOptions[selDither.selected] == "Steinberg") {
		offs.dither(chkGrayscale.checked(), sldLevels.value, Dithering.Steinberg);
	}
	else if (ditherOptions[selDither.selected] == "Stucki") {
		offs.dither(chkGrayscale.checked(), sldLevels.value, Dithering.Stucki);
	}
	else {
		abort("invalid value");
	}


	histogram.update(offs);
	return win.draw(ui);
}

Gui.showWindow(offs, onEvent, Widget(
	histogram,
	selDither,
	chkGrayscale,
	sldLevels,
	null, debug
));
offs.destroy();
back.destroy();

/* todo
https://github.com/cyotek/Dithering/blob/master/src/Dithering/StuckiDithering.cs
https://github.com/safecomp/AndroidImageProcessing/blob/master/AndroidImageProcessing/src/safecomp/ir/androidimageprocessing/Dithering.java
https://www.arabicprogrammer.com/article/5386388171/
*/
