// micro ui, TODO: add comments

struct Style {
	const Image font;

	const FormatFlags flagsInt;
	const FormatFlags flagsFlt;

	int backgroundColor = 0x1a1a1a;
	int focusedColor = 0x3b4754;
	int valueColor = 0x6897bb;
	int textColor = 0xdadada;

	int border = 3;
	int padding = 8;

	enum: int32 {
		left: 1;
		right: 2;

		top: 4;
		bottom: 8;

		center: 0;

		fitVertical: left + right;
		fitHorizontal: top + bottom;
	}

	/// Align one rect containing text relative to its container
	static void align(const Style this&, Rect rect, Rect valueRect&, const char value[*], int align) {
		rect.x += this.padding;
		rect.y += this.padding;
		rect.w -= 2 * this.padding;
		rect.h -= 2 * this.padding;
		this.font.clipText(&valueRect, value);

		if (valueRect.w > rect.w) {
			valueRect.w = rect.w;
		}

		int vertical = align & fitVertical;
		if (vertical == center) {
			valueRect.x = rect.x + (rect.w - valueRect.w) / 2;
		}
		else if (vertical == right) {
			valueRect.x = rect.x + (rect.w - valueRect.w);
		}
		else if (vertical == left) {
			valueRect.x = rect.x;
		}
		else { // fit
			valueRect.x = rect.x;
			valueRect.w = rect.w;
		}

		int horizontal = align & fitHorizontal;
		if (horizontal == center) {
			valueRect.y = rect.y + (rect.h - valueRect.h) / 2;
		}
		else if (horizontal == bottom) {
			valueRect.y = rect.y + (rect.h - valueRect.h);
		}
		else if (horizontal == top) {
			valueRect.y = rect.y;
		}
		else { // fit
			valueRect.y = rect.y;
			valueRect.h = rect.h;
		}
	}

	//- private debug function
	static void align(const Style this&, Rect rect, Rect valueRect&, const char value[*], int align, Image offs) {
		enum: uint32 {
			// chromium inspector colors
			margin: 0xf9cc9d; //dark: 0xae8152;
			border: 0xffeebc; //dark: 0xe3c381;
			padding: 0xc3d799; //dark: 0xb6c373;
			content: 0x8cb7c5; //dark: 0x87b1bc;
		}
		align(&this, rect, &valueRect, value, align);
		offs.fill(valueRect, this.padding, padding);
		offs.fill(valueRect, content);
	}// */
}
struct KeyEvent {
	const bool release;
	const bool isShift;
	const bool isCtrl;
	const bool isAlt;
	const int repeat;
	const int key;
}
struct MouseEvent {
	const Rect clientRect&;
	const bool release;
	const bool isShift;
	const bool isCtrl;
	const bool isAlt;
	const int repeat;
	const int button;
	const int dx = 0;
	const int dy = 0;
	const int x;
	const int y;
}

struct View: object {
	const int height = 0;
	const int group = 0;
	bool enabled = true;
	bool selectable = true;
	const variant data = null;

	bool onMouseEvent(View this, const MouseEvent event&) = null;
	bool onClick(View this) = null;
	bool onReset(View this) = null;
}

struct Button: View {
	const char text[*];
	/* FIXME: do the override, use this method as default initializer
	// TODO: override or overload: bool onClick(Button this) { ... }
	bool onClick(Button this) {
		View.onClick(this);   // call super
		trace("onClick", this);
		return this.enabled;
	}// */

	void onDraw(Button this, Image offs, Rect rect, const Style style&) {
		Style.align(style, rect, &rect, this.text, Style.left);
		offs.drawText(rect, style.font, this.text, style.textColor);
	}
}

struct Switch: View {
	const char text[*];
	/* TODO: allow selecting one out of multiple choices
	const char choices[*][] = {
		"off",
		"on"
	};
	int selected = 0;*/

	const char on[*] = "on";
	const char off[*] = "off";

	bool checked = false;
	const bool resetValue = false;

	bool onUpdate(Switch this, bool checked) {
		this.checked = checked;
		return true;
	}

	void onDraw(Switch this, Image offs, Rect rect, const Style style&) {
		Rect valueRoi = rect;
		char value[*] = this.checked ? this.on : this.off;

		Style.align(style, valueRoi, &valueRoi, value, Style.right);
		rect.w -= valueRoi.w + style.padding;
		Style.align(style, rect, &rect, this.text, Style.left);
		offs.drawText(valueRoi, style.font, value, style.valueColor);
		offs.drawText(rect, style.font, this.text, style.textColor);
	}
}

struct Slider: View {
	const char text[*];
	int value = 0;
	const int minimum = 0;
	const int maximum = -1u >> 1;
	const int divisor = 0;
	const int resetValue = 0;

	bool onUpdate(Slider this, int value) {
		if (value > this.maximum) {
			value = this.maximum;
		}
		if (value < this.minimum) {
			value = this.minimum;
		}
		if (this.value == value) {
			return false;
		}
		this.value = value;
		return true;
	}

	void onDraw(Slider this, Image offs, Rect rect, const Style style&) {
		Rect valueRoi = rect;
		char value[64] = {0};
		if (this.divisor != 0) {
			float32 valueF64 = float64(this.value) / this.divisor;
			value.append(0, valueF64, style.flagsFlt);
		} else {
			value.append(0, this.value, style.flagsInt);
		}

		Style.align(style, valueRoi, &valueRoi, value, Style.right);
		rect.w -= valueRoi.w + style.padding;
		Style.align(style, rect, &rect, this.text, Style.left);
		offs.drawText(valueRoi, style.font, value, style.valueColor);
		offs.drawText(rect, style.font, this.text, style.textColor);
	}
}

struct Histogram: View {
	const bool lines = false;
	// histogram data is in alpha channel, display it with color rgb
	bool color = false;
	argb data[256] = null;   // FIXME: this should be not possible

	void update(Histogram this, Image image) {
		uint32 data[*] = pointer(this.data);
		image.calcRgbHist(null, &data);
		this.color = false;
	}

	bool onUpdate(Histogram this, int idx, int value) {
		this.data[idx] = argb(idx, value, value, value);
		return true;
	}

	void onDraw(Histogram this, Image offs, const Rect rect, const Style style&) {
		enum {
			colB: 0x4371c6;
			colG: 0x72d874;
			colR: 0xfc6165;
			colL: 0xdadada;
		}
		int px = (rect.w - 256) / 2;
		if (this.lines) {
			int y = rect.y + rect.h - 1;
			int pb = bch(this.data[0]) * rect.h / 256;
			int pg = gch(this.data[0]) * rect.h / 256;
			int pr = rch(this.data[0]) * rect.h / 256;
			int pl = ach(this.data[0]) * rect.h / 256;

			for (int i = 1; i < this.data.length; i += 1) {
				int x = rect.x + i + px;
				argb data = this.data[i];
				int bv = bch(data) * rect.h / 256;
				int gv = gch(data) * rect.h / 256;
				int rv = rch(data) * rect.h / 256;
				int lv = ach(data) * rect.h / 256;

				if (this.color) {
					offs.drawLine(x, y - pl, x, y - lv, uint32(data));
				} else {
					offs.drawLine(x, y - pb, x, y - bv, colB);
					offs.drawLine(x, y - pg, x, y - gv, colG);
					offs.drawLine(x, y - pr, x, y - rv, colR);
					offs.drawLine(x, y - pl, x, y - lv, colL);
				}

				pb = bv;
				pg = gv;
				pr = rv;
				pl = lv;
			}
		} else {
			for (int i = 0; i < this.data.length; i += 1) {
				argb data = this.data[i];
				if (this.color) {
					int x = rect.x + i + px;
					int y1 = rect.y + rect.h;
					int y0 = y1 - ach(data) * rect.h / 256;
					offs.fillRect(x, y0 - 1, x + 1, y1, uint32(data));
				} else {
					int x = rect.x + px + i;
					int bv = bch(data) * rect.h / 256;
					int gv = gch(data) * rect.h / 256;
					int rv = rch(data) * rect.h / 256;
					int lv = ach(data) * rect.h / 256;
					for (int y = 0; y < rect.h; y += 1) {
						uint32 b = colB * uint32(y < bv);
						uint32 g = colG * uint32(y < gv);
						uint32 r = colR * uint32(y < rv);
						uint32 l = colL * uint32(y < lv);
						offs.set(x, rect.h - y + rect.y - 1, r | g | b | l);
					}
				}
			}
		}
	}
}

struct Layout: object {
	Style style;
	Image offs;
	Rect rect;

	bool visible = true;
	bool measure = true;
	int selectedIndex = -1;
	int activeIndex = -1;
	bool colorPick = false;
	View views[64] = null;
	Rect rects[64] = null;
	int items = 0;
	int group = 0;
}

float64 valFlt(Slider slider&) {
	float64 value = slider.value;
	if (slider.divisor != 0) {
		return value / slider.divisor;
	}
	return value / (slider.maximum - slider.minimum);
}

inline selected(const Layout layout&) = layout.selectedIndex < 0 ? null : pointer(layout.views[layout.selectedIndex]);
inline selected(const Layout layout&, typename type) = layout.selectedIndex < 0 ? null : layout.views[layout.selectedIndex].as(type);

inline activeIndex(const Layout layout&) = layout.activeIndex != -1 ? layout.activeIndex : layout.selectedIndex;

bool isSelected(const Layout layout&, View items...) {
	View selected = layout.selected();
	for (int i = 0; i < items.length; i += 1) {
		if (items[i] == selected) {
			return true;
		}
	}
	return false;
}
bool isActive(const Layout layout&, View views...) {
	int activeIndex = layout.activeIndex != -1 ? layout.activeIndex : layout.selectedIndex;
	if (activeIndex < 0) {
		return false;
	}
	View view = layout.views[activeIndex];
	for (int i = 0; i < views.length; i += 1) {
		if (views[i] == view) {
			return true;
		}
	}
	return false;
}

bool setSelected(Layout layout&, View view) {
	if (view == null) {
		layout.selectedIndex = -1;
		return true;
	}
	for (int i = 0; i < layout.items; i += 1) {
		if (layout.views[i] == view) {
			layout.selectedIndex = i;
			return true;
		}
	}
	return false;
}
bool setGroup(Layout layout&, int group) {
	if (layout.group != group) {
		layout.group = group;
		layout.measure = true;
		return true;
	}
	return false;
}

void onInit(View this, Layout layout&, int idx) {
	// FIXME: dispatch click event using inheritance and override
	if (Histogram item = this.as(Histogram)) {
		for (int i = 0; i < 256; i += 1) {
			item.data[i] = argb(i, i, i, i);
		}
		return;
	}
	if (Slider item = this.as(Slider)) {
		Slider.onUpdate(item, item.value);// clamp initial value
		int resetValue& = pointer(item.resetValue);
		resetValue = item.value;
		return;
	}
	if (Switch item = this.as(Switch)) {
		bool resetValue& = pointer(item.resetValue);
		resetValue = item.checked;
		return;
	}
	if (Button item = this.as(Button)) {
		return;
	}
	abort("invalid view", this);
}
bool onClick(View this) {
	if (this.onClick != null) {
		return this.onClick(this);
	}
	return true;
}
bool onReset(View this) {
	if (this.onReset != null) {
		return this.onReset(this);
	}
	// FIXME: dispatch click event using inheritance and override
	if (Histogram item = this.as(Histogram)) {
		if (item.onUpdate == null) {
			return false;
		}
		bool result = false;
		for (int i = 0; i < 256; i += 1) {
			result |= item.onUpdate(i, i);
		}
		return result;
	}
	if (Slider item = this.as(Slider)) {
		if (item.onUpdate == null) {
			return false;
		}
		return item.onUpdate(item.resetValue);
	}
	if (Switch item = this.as(Switch)) {
		if (item.onUpdate == null) {
			return false;
		}
		return item.onUpdate(item.resetValue);
	}
	if (Button item = this.as(Button)) {
		return false;
	}
	abort("invalid view", this);
	return false;
}
bool onEvent(View this, const KeyEvent event&) {
	// FIXME: dispatch click event using inheritance and override
	if (!event.release) {
		return false;
	}
	if (Histogram item = this.as(Histogram)) {
		if (event.key == ' ' || event.key == 8) {
			return item.onReset();
		}
		return false;
	}
	if (Slider item = this.as(Slider)) {
		if (event.key == '+' || event.key == '=') {
			if (item.onUpdate == null) {
				return false;
			}
			return item.onUpdate(item.value + (event.isShift ? 1 : 10));
		}
		if (event.key == '-' || event.key == '_') {
			if (item.onUpdate == null) {
				return false;
			}
			return item.onUpdate(item.value - (event.isShift ? 1 : 10));
		}
		if (event.key == ' ' || event.key == 8) {
			return item.onReset();
		}
		return false;
	}
	if (Switch item = this.as(Switch)) {
		if (event.key == ' ') {
			if (item.onUpdate != null) {
				item.onUpdate(!item.checked);
			}
			return item.onClick();
		}
		if (event.key == 8) {
			return item.onReset();
		}
		return false;
	}
	if (Button item = this.as(Button)) {
		if (event.key == ' ') {
			return item.onClick();
		}
		return false;
	}
	abort("invalid view", this);
	return false;
}
bool onEvent(View this, const MouseEvent event&) {
	if (this.onMouseEvent != null) {
		return this.onMouseEvent(event);
	}

	// FIXME: dispatch click event using inheritance and override
	if (Histogram item = this.as(Histogram)) {
		if (event.release) {
			if (event.repeat > 1) {
				// double click to reset
				return item.onReset();
			}
			return item.onClick();
		}
		if (item.onUpdate == null) {
			return false;
		}

		const Rect rect& = event.clientRect;
		int x0 = event.x - rect.x;
		int x1 = x0 + event.dx;
		int y0 = event.y - rect.y;
		int y1 = y0 + event.dy;

		if (x0 > x1) {
			int x = x0;
			x0 = x1;
			x1 = x;
			int y = y0;
			y0 = y1;
			y1 = y;
		}
		int y = y0 << 16;
		int dy = y1 - y0;
		if (x1 != x0) {
			dy = (dy << 16) / (x1 - x0);
		}
		if (x0 < 0) {
			y -= x0 * dy;
			x0 = 0;
		}
		if (x1 > 256) {
			x1 = 256;
		}
		int h = rect.h;
		for (int x = x0; x < x1; x += 1) {
			int val = 255 * (h - (y >> 16)) / h;
			item.onUpdate(x, val);
			y += dy;
		}
		return true;
	}
	if (Slider item = this.as(Slider)) {
		if (event.release) {
			if (event.repeat > 1) {
				// double click to reset
				return item.onReset();
			}
			return item.onClick();
		}
		if (item.onUpdate == null) {
			return false;
		}
		if (event.dy == 0) {
			// do not update to the same value
			return false;
		}
		return item.onUpdate(item.value + event.dy);
	}
	if (Switch item = this.as(Switch)) {
		if (event.release) {
			if (item.onUpdate != null) {
				item.onUpdate(!item.checked);
			}
			return item.onClick();
		}
		return false;
	}
	if (Button item = this.as(Button)) {
		if (event.release) {
			if (event.repeat > 1) {
				// double click to reset
				return item.onReset();
			}
			return item.onClick();
		}
		return false;
	}
	abort("invalid view", this);
	return false;
}

void onMeasure(View this, Rect rect&, const Style style&) {
	// FIXME: dispatch click event using inheritance and override
	if (Histogram item = this.as(Histogram)) {
		if (item.height == 0) {
			rect.h = 128;
		} else {
			rect.h = item.height;
		}
		return;
	}
	if (Slider item = this.as(Slider)) {
		if (item.height == 0) {
			rect.h = style.font.height() + 2 * style.padding;
		} else {
			rect.h = item.height;
		}
		return;
	}
	if (Switch item = this.as(Switch)) {
		if (item.height == 0) {
			rect.h = style.font.height() + 2 * style.padding;
		} else {
			rect.h = item.height;
		}
		return;
	}
	if (Button item = this.as(Button)) {
		if (item.height == 0) {
			rect.h = style.font.height() + 2 * style.padding;
		}
		else if (item.text == null) {
			// TODO: remove hack: empty button used for separator
			rect.h = item.height + style.padding;
		}
		else {
			rect.h = item.height;
		}
		return;
	}
	if (typename(item) == View) {
		rect.h = this.height;
		return;
	}
	abort("invalid view", this);
}
bool onDraw(View view, Image offs, const Rect rect&, const Style style&) {
	// FIXME: dispatch click event using inheritance and override
	if (Histogram item = view.as(Histogram)) {
		return item.onDraw(item, offs, rect, style);
	}
	if (Slider item = view.as(Slider)) {
		return item.onDraw(item, offs, rect, style);
	}
	if (Switch item = view.as(Switch)) {
		return item.onDraw(item, offs, rect, style);
	}
	if (Button item = view.as(Button)) {
		return item.onDraw(item, offs, rect, style);
	}
	abort("invalid view", view);
}

bool uiEvent(Layout layout&, int action, int button, int x, int y) {
struct Mouse {
	int32 clicks;   // click count
	int64 time;     // old clock
	int32 btn;      // old button
	int32 x;        // old x coord
	int32 y;        // old y coord

	static int click(Mouse old&, int btn, int x, int y) {
		if ((btn != 0 && btn != old.btn) || x != old.x || y != old.y) {
			// reset values
			old.clicks = 1;
			old.time = System.millis();
			old.btn = btn;
			old.x = x;
			old.y = y;
			return 0;
		}
		if (btn == 0) {
			// release button
			// old.time = keep value?;
			// old.btn = keep value?;
			// old.cnt = keep value?;
			return old.clicks;
		}
	
		int64 now = System.millis();
		if ((now - old.time) / 1000. > .5) {
			// reset counter
			old.clicks = 0;
		}
		old.time = now;
		old.btn = btn;
		old.clicks += 1;
		return old.clicks;
	}
}

static int click(Layout layout&, int x, int y) {
	static bool test(const Rect rect&, int x, int y) {
		if (x < rect.x || x >= rect.x + rect.w) {
			return false;
		}
		if (y < rect.y || y >= rect.y + rect.h) {
			return false;
		}
		return true;
	}

	if (!layout.visible) {
		return -1;
	}
	if (!layout.rect.test(x, y)) {
		return -1;
	}
	for (int i = 0; i < layout.items; i += 1) {
		if (!layout.rects[i].test(x, y)) {
			continue;
		}

		View view = layout.views[i];
		if (!view.enabled) {
			return -1;
		}
		return i;
	}
	return -1;
}
static bool select(Layout layout&, int index) {
	assert(index >= 0, "invalid selection");
	assert(index < layout.items, "invalid selection");

	View view = layout.views[index];
	if (!view.enabled) {
		return false;
	}
	if (!view.selectable) {
		return false;
	}
	if (layout.group != view.group) {
		if (layout.group != 0) {
			if (view.group != 0) {
				return false;
			}
		}
	}
	layout.selectedIndex = index;
	return true;
}
static bool select(Layout layout&, bool prev) {
	layout.activeIndex = -1;
	int selectedIndex = layout.selectedIndex;
	for (int i = 1; i < layout.items; i += 1) {
		int index = selectedIndex + (prev ? -i : i);
		if (index >= layout.items) {
			index -= layout.items;
		}
		else if (index < 0) {
			index += layout.items;
		}
		if (layout.select(index)) {
			return true;
		}
	}
	return false;
}
static View active(const Layout layout&) {
	int idx = layout.activeIndex;
	if (idx < 0) {
		idx = layout.selectedIndex;
	}
	if (idx < 0) {
		return null;
	}
	return layout.views[idx];
}
static void measure(Layout layout&) {
	int bottom = layout.rect.y;
	for (int i = 0; i < layout.items; i += 1) {
		Rect rect& = layout.rects[i];
		View view = layout.views[i];

		rect.x = layout.rect.x;
		rect.y = bottom;
		rect.w = layout.rect.w;
		rect.h = view.height;

		view.onMeasure(&rect, layout.style);
		if (layout.group != view.group) {
			if (layout.group != 0) {
				if (view.group != 0) {
					rect.h = 0;
				}
			}
		}
		if (rect.h > 0) {
			bottom += rect.h;
		}
	}
	layout.rect.h = bottom - layout.rect.y;
}
static void draw(Layout layout&) {
	if (!layout.visible) {
		return;
	}

	// draw background
	if (layout.style.backgroundColor != -1) {
		int b = layout.style.border;
		const Rect r& = layout.rect;
		layout.offs.fillRect(r.x - b, r.y - b, r.x + r.w + b, r.y + r.h + b, layout.style.backgroundColor);
	}

	// draw items
	Image offs = layout.offs.slice(null);
	for (int i = 0; i < layout.items; i += 1) {
		View view = layout.views[i];
		const Rect rect& = layout.rects[i];

		if (i == layout.selectedIndex) {
			layout.offs.fillRect(rect.x, rect.y, rect.x + rect.w, rect.y + rect.h, layout.style.focusedColor);
		}

		if (rect.w > 0 && rect.h > 0) {
			offs.slice(layout.offs, rect);
			Rect rect = {
				x: 0; y: 0;
				w: offs.width();
				h: offs.height();
			};
			view.onDraw(offs, rect, layout.style);
		}

		if (i == layout.activeIndex) {
			layout.offs.drawRect(rect.x, rect.y, rect.x + rect.w - 1, rect.y + rect.h - 1, layout.style.valueColor);
		}
	}
	offs.destroy();
}

	static Mouse mouse = {};
	static bool isShift;
	static bool isCtrl;
	static bool isAlt;

	layout.colorPick = false;
	if (action == Gui.WINDOW_INIT) {
		layout.selectedIndex = -1;
		layout.measure = true;
		layout.select(false);
		return true;
	}
	if (action == Gui.WINDOW_DRAW) {
		if (layout.measure) {
			layout.measure = false;
			measure(layout);
		}
		layout.draw();
		return true;
	}
	if (action == Gui.WINDOW_ENTER) {
		// do not process event
		return false;
	}
	if (action == Gui.WINDOW_LEAVE) {
		// do not process event
		return false;
	}

	if (action == Gui.FINGER_PRESS) {
		// finger press results also a mouse event
		// skip the finger event
		return false;
	}
	if (action == Gui.FINGER_MOTION) {
		// translate to mouse event
		action = Gui.MOUSE_MOTION;
	}
	if (action == Gui.FINGER_RELEASE) {
		// finger release results also a mouse event
		// skip the finger event
		return false;
	}

	if (action == Gui.MOUSE_PRESS) {
		Mouse.click(&mouse, button, x, y);
		if (button != 1) {
			return false;
		}
		bool result = false;
		int activeIndex = layout.click(x, y);
		if (layout.activeIndex != activeIndex) {
			// active index changed, most probably from -1
			layout.activeIndex = activeIndex;
			result = true;
		}
		if (activeIndex < 0) {
			// allow update of selected control
			activeIndex = layout.selectedIndex;
			layout.colorPick = true;
			if (activeIndex < 0) {
				return result;
			}
		}
		if (View view = layout.views[activeIndex]) {
			Rect rect& = layout.rects[activeIndex];
			MouseEvent event = {
				clientRect: rect;
				release: false;
				isShift: isShift;
				isCtrl: isCtrl;
				isAlt: isAlt;
				repeat: mouse.clicks;
				button: button;
				x: x;
				y: y;
			};
			if (view.onEvent(event)) {
				return true;
			}
		}
		return result;
	}
	if (action == Gui.MOUSE_MOTION) {
		int ox = mouse.x;
		int oy = mouse.y;
		Mouse.click(&mouse, -1, x, y);
		if (button != 1) {
			return false;
		}
		if (ox == x && oy == y) {
			return false;
		}
		int activeIndex = layout.activeIndex;
		if (activeIndex < 0) {
			// allow update of selected control
			activeIndex = layout.selectedIndex;
			layout.colorPick = true;
			if (activeIndex < 0) {
				return true;
			}
		}
		if (View view = layout.views[activeIndex]) {
			Rect rect& = layout.rects[activeIndex];
			MouseEvent event = {
				clientRect: rect;
				release: false;
				isShift: isShift;
				isCtrl: isCtrl;
				isAlt: isAlt;
				repeat: mouse.clicks;
				button: button;
				dx: ox - x;
				dy: oy - y;
				x: x;
				y: y;
			};
			if (view.onEvent(event)) {
				return true;
			}
		}
		return false;
	}
	if (action == Gui.MOUSE_RELEASE) {
		int btn = mouse.btn;
		Mouse.click(&mouse, 0, x, y);
		if (button != 1) {
			return false;
		}

		bool result = false;
		int activeIndex = layout.activeIndex;
		if (activeIndex >= 0) {
			layout.activeIndex = -1;
			result = true;
		}
		if (activeIndex != layout.click(x, y)) {
			// release on a different view
			return result;
		}
		if (activeIndex < 0) {
			// might be a disabled view
			layout.colorPick = true;
			return result;
		}
		// select / focus the view
		if (layout.select(activeIndex)) {
			result = true;
		}
		if (View view = layout.views[activeIndex]) {
			Rect rect& = layout.rects[activeIndex];
			MouseEvent event = {
				clientRect: rect;
				release: true;
				isShift: isShift;
				isCtrl: isCtrl;
				isAlt: isAlt;
				repeat: mouse.clicks;
				button: button;
				x: x;
				y: y;
			};
			if (view.onEvent(event)) {
				result = true;
			}
		}
		return result;
	}

	if (action == Gui.KEY_PRESS) {
		isShift = (y & Gui.KEY_MASK_SHIFT) != 0;
		isCtrl = (y & Gui.KEY_MASK_CTRL) != 0;
		isAlt = (y & Gui.KEY_MASK_ALT) != 0;
		if (View view = layout.active()) {
			KeyEvent event = {
				release: false;
				isShift: isShift;
				isCtrl: isCtrl;
				isAlt: isAlt;
				repeat: 0;
				key: button;
			};
			if (view.onEvent(event)) {
				return true;
			}
		}
		if (button == '\t' || button == '\r') {
			// Tab, Enter: select prev or next control.
			return layout.select(isShift);
		}
		if (button == '[' || button == ']') {
			// hide, show controls
			layout.visible = !layout.visible;
			return true;
		}
		if (button == 8 && isShift) {
			for (int i = 0; i < layout.items; i += 1) {
				layout.views[i].onReset();
			}
			return true;
		}
		return false;
	}
	if (action == Gui.KEY_RELEASE) {
		isShift = (y & Gui.KEY_MASK_SHIFT) != 0;
		isCtrl = (y & Gui.KEY_MASK_CTRL) != 0;
		isAlt = (y & Gui.KEY_MASK_ALT) != 0;
		if (View view = layout.active()) {
			KeyEvent event = {
				release: true;
				isShift: isShift;
				isCtrl: isCtrl;
				isAlt: isAlt;
				repeat: 0;
				key: button;
			};
			if (view.onEvent(event)) {
				return true;
			}
		}
		return false;
	}

	debug("event not processed", action);
	return false;
}

Layout Layout(Image offs, int x, int y, Image font, View items...) {
	Layout layout = {
		offs: offs;
		rect: {
			x: x;
			y: y;
			w: 256;
			h: 0;
		};
		style: {
			font: font;
			flagsInt: { padLen: 4 };
			flagsFlt: { padLen: 4, precision: 2 };
		};
	};

	for (int i = 0; i < layout.views.length; i += 1) {
		layout.views[i] = null;
	}

	for (int i = 0; i < items.length; i += 1) {
		assert(i < layout.views.length);
		layout.views[i] = items[i];
		items[i].onInit(&layout, i);
	}
	layout.items = items.length;

	if (y < 0) {
		layout.uiEvent(Gui.WINDOW_INIT, 0, 0, 0);
		layout.rect.y = offs.height() - layout.rect.h + y;
	}
	if (x < 0) {
		layout.rect.x = offs.width() - layout.rect.w + x;
	}
	return layout;
}

inline draw(Layout layout&) = uiEvent(layout, Gui.WINDOW_DRAW, 0, 0, 0);
