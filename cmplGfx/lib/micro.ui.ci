// micro ui, TODO: add comments

inline "micro.ui.core.ci";

Widget Widget(int width, int height, const Style style&) {
	Widget widget = {
		rect: {
			w: width;
			h: height;
		};
		width: width;
		height: height;
		style: style;
		focus: widget;	// focus first visible view
	};
	return widget;
}
Widget Widget(int width, int height) {
	static const Style style = {
		format: { padLen: 5, precision: 2 };
	};
	return Widget(width, height, style);
}
Widget Widget(View views...) {
struct Popup: Widget {

	int align = Style.fill;
	int margin = 0;
	int radius = 0;

	// forward the drag event to the focused view
	bool onTouchEvent(Popup this, const Rect rect&, const TouchEvent event&) {
		if (Widget.onTouchEvent(this, rect, event)) {
			return true;
		}

		if (!(event.button && (event.dx || event.dy))) {
			// event is not a drag event
			return false;
		}

		if (this.pressedIndex != -1) {
			// there is a pressed view, and is different than the focused one
			return false;
		}

		View view = Widget.getFocused(this);
		if (view == null) {
			// there is no focused view
			return false;
		}
		Layout parent = view.parent.as(Layout);
		Rect r& = parent.items[parent.focusedIndex].rect;
		// forward the event to the view
		return view.onTouchEvent(view, r, event);
	}
	bool onKeyEvent(Popup this, const KeyEvent event&) {
		if (event.release) {
			return Widget.onKeyEvent(this, event);
		}

		if (event.key == '[' || event.key == ']') {
			this.clearState(Style.hovered);
			// hide, show controls
			if (event.key == '[') {
				if (this.align == Style.topLeft) {
					this.enabled = !this.enabled;
					this.invalidate();
					return true;
				}
				this.align = Style.topLeft;
			}
			if (event.key == ']') {
				if (this.align == Style.topRight) {
					this.enabled = !this.enabled;
					this.invalidate();
					return true;
				}
				this.align = Style.topRight;
			}

			this.enabled = true;
			this.measure = true;
			this.invalidate();
			return true;
		}

		if (event.key == 8 && event.isShift) {
			return this.onReset(this);
		}

		return Widget.onKeyEvent(this, event);
	}

	bool onMeasure(Popup this, Rect measured&) {
		int margin = this.margin;
		int align = this.align;
		Rect rect = {
			x: margin;
			y: margin;
			w: measured.w - 2 * margin;
			h: measured.h - 2 * margin;
		};

		measured.x = measured.y = 0;
		Layout.onMeasure(this, &measured);
		this.onLayout(this, &measured);
		Style.align(rect, &measured, align);
		return true;
	}

	void onDraw(Popup this, Image offs, Rect rect) {
		offs = offs.slice(rect);
		Style style& = this.style;
		if (style.backgroundColor != -1) {
			Rect r = { w: offs.width(), h: offs.height() };
			offs.fillRRect(r, this.radius, style.backgroundColor);
		}
		Widget.onDraw(this, offs, rect);
		offs.destroy();
	}
}

	static const Style style = {
		align: Style.left;
		format: { padLen: 5, precision: 2 };
	};
	Popup widget = {
		rect: {};

		radius: 5;
		margin: 10;
		align: Style.topRight;

		paddingTop: 3;
		paddingLeft: 3;
		paddingRight: 3;
		paddingBottom: 3;
		style: style;
		focus: widget;	// focus first visible view
	};

	if (views.length > 0) {
		widget.addItems(...views);
	}
	return widget;
}

struct Button: View {
	const char text[*];

	bool onMeasure(Button this, Rect rect&) {
		Style style& = this.style;
		style.measure(&rect, this.text);
		return View.onMeasure(this, &rect);
	}

	void onDraw(Button this, Image offs, Rect rect) {
		View.onDraw(this, offs, rect, null, this.text);
	}
}

struct Switch: View {
	static const char onOff[*][] = {
		"off",
		"on"
	};

	const char text[*];
	const char states[*][] = onOff;

	int selected = 0;
	const int resetValue = 0;//TODO: selected;

	// if the view is clicked but not focused, first just focus it
	const bool clickToFocus = false;

	static bool checked(Switch this) {
		return this.selected != 0;
	}

	bool onUpdate(Switch this, int selected) {
		int maxValue = this.states.length;
		if (maxValue == 0) {
			// graphical switch
			maxValue = 2;
		}
		if (selected >= maxValue) {
			selected = maxValue - 1;
		}
		else if (selected < 0) {
			selected = 0;
		}

		if (this.selected == selected) {
			return this.isDirty();
		}

		this.selected = selected;
		return true;
	}

	bool onReset(Switch this) {
		return this.onUpdate(this, this.resetValue);
	}

	bool onClick(Switch this) {
		if (this.focusable && this.clickToFocus) {
			if (!this.isFocused()) {
				return true;
			}
		}
		int maxValue = this.states.length;
		int value = this.selected + 1;
		if (maxValue == 0) {
			// graphical switch
			maxValue = 2;
		}
		if (value >= maxValue) {
			value = 0;
		}
		return this.onUpdate(this, value);
	}

	void onCreate(Switch this, View parent) {
		View.onCreate(this, parent);
		// clamp to initial value and force update with a reset
		int resetValue& = pointer(this.resetValue);
		Switch.onUpdate(this, this.selected);
		resetValue = this.selected;
		this.onReset(this);
	}

	bool onKeyEvent(Switch this, const KeyEvent event&) {
		if (!this.enabled || event.release) {
			return View.onKeyEvent(this, event);
		}
		if (event.key == '+' || event.key == '=') {
			int value = this.selected + 1;
			return this.onUpdate(this, value);
		}
		if (event.key == '-' || event.key == '_') {
			int value = this.selected - 1;
			return this.onUpdate(this, value);
		}
		return View.onKeyEvent(this, event);
	}

	bool onTouchEvent(Switch this, const Rect rect&, const TouchEvent event&) {
		if (!this.enabled || !event.release) {
			return View.onTouchEvent(this, rect, event);
		}
		if (event.isShift && event.clicks >= 0) {
			int value = this.selected - 1;
			return this.onUpdate(this, value);
		}
		return View.onTouchEvent(this, rect, event);
	}

	bool onMeasure(Switch this, Rect rect&) {
		int maxWidth = 0;
		Style style& = this.style;
		for (int i = 0; i < this.states.length; i += 1) {
			Rect measured = {};
			style.measure(&measured, this.states[i]);
			if (maxWidth < measured.w) {
				maxWidth = measured.w;
			}
		}
		style.measure(&rect, this.text);
		if (this.states.length == 0) {
			rect.w += rect.h * 3 / 2;
		} else {
			rect.w += maxWidth;
		}
		return View.onMeasure(this, &rect);
	}

	void onDraw(Switch this, Image offs, Rect rect) {
		char value[*] = null;
		Style style& = this.style;
		if (this.states.length == 0) {
			Rect onOffRect = {
				x: rect.x;
				y: rect.y;
				w: rect.h * 3 / 2;
				h: rect.h;
			};
			Style.align(rect, &onOffRect, Style.right);

			onOffRect.adjust(-style.padding);
			uint32 color = style.focusedColor;
			if (this.checked()) {
				color = style.valueColor;
			}
			else if (this.isFocused()) {
				color = style.hoveredColor;
			}
			offs.fillRRect(onOffRect, onOffRect.h / 2, color);

			if (this.checked()) {
				onOffRect.x += rect.h / 2;
			}

			onOffRect.w = onOffRect.h;
			offs.fillOval(onOffRect, style.textColor);
			rect.w -= rect.h * 3 / 2;
		} else {
			value = this.states[this.selected];
		}
		View.onDraw(this, offs, rect, this.text, value);
	}
}

struct Slider: View {
	const char text[*];

	int value = 0;
	const int minimum = 0;
	const int maximum = -1u >> 1;
	const int divisor = 0;
	const int resetValue = 0; // TODO: resetValue = value;

	static float64 valueF64(Slider this) {
		double value = this.value;
		if (this.divisor != 0) {
			return value / this.divisor;
		}
		return value;
	}

	bool onUpdate(Slider this, int value) {
		if (value > this.maximum) {
			value = this.maximum;
		}
		if (value < this.minimum) {
			value = this.minimum;
		}
		if (this.value == value) {
			return this.isDirty();
		}
		this.value = value;
		return true;
	}

	bool onReset(Slider this) {
		return this.onUpdate(this, this.resetValue);
	}

	void onCreate(Slider this, View parent) {
		View.onCreate(this, parent);
		// clamp to initial value and force update with a reset
		int resetValue& = pointer(this.resetValue);
		Slider.onUpdate(this, this.value);
		resetValue = this.value;
		this.onReset(this);
	}

	bool onKeyEvent(Slider this, const KeyEvent event&) {
		if (event.release) {
			return View.onKeyEvent(this, event);
		}
		if (event.key == ' ') {
			return this.onReset(this);
		}
		if (event.key == '+' || event.key == '=') {
			return this.onUpdate(this, this.value + (event.isShift ? 1 : 10));
		}
		if (event.key == '-' || event.key == '_') {
			return this.onUpdate(this, this.value - (event.isShift ? 1 : 10));
		}
		return View.onKeyEvent(this, event);
	}

	bool onTouchEvent(Slider this, const Rect rect&, const TouchEvent event&) {
		if (event.button == 0) {
			return false;
		}
		if (event.release && (event.clicks < 0 || event.clicks > 1)) {
			return this.onReset(this);
		}

		if (event.clicks < 1) {
			float64 value = event.dx;
			if (!event.isShift && value != 0) {
				value *= float64(this.maximum - this.minimum) / rect.w;
				if (value > -1 && value < 1) {
					value = value < 0 ? -1 : 1;
				}
			}
			value += this.value;
			if (value > this.maximum) {
				value = this.maximum;
			}
			if (value < this.minimum) {
				value = this.minimum;
			}
			return this.onUpdate(this, value);
		}
		if (event.release) {
			if (event.y < rect.y + rect.h - rect.h / 3) {
				// clicking the upper part to focus control
				return true;
			}
			float64 value = event.x - rect.x;
			value *= float64(this.maximum - this.minimum) / rect.w;
			return this.onUpdate(this, this.minimum + value);
		}
		return View.onTouchEvent(this, rect, event);
	}

	bool onMeasure(Slider this, Rect rect&) {
		char value[64] = {0};
		Style style& = this.style;
		if (this.divisor != 0) {
			value.append(0, this.valueF64(), style.format);
		} else {
			value.append(0, this.value, style.format);
		}
		Rect valueRect = {};
		style.measure(&valueRect, value);
		style.measure(&rect, this.text);
		rect.w += valueRect.w;
		return View.onMeasure(this, &rect);
	}

	void onDrawSlider(Slider this, Image offs, Rect rect) {
		if (this.maximum == this.minimum) {
			return;
		}
		Style style& = this.style;
		const int y1 = rect.y + rect.h;
		const int y0 = y1 - style.padding / 4;
		const int x0 = rect.x;
		const int x1 = rect.x + rect.w;
		const int x = x0 + int64(this.value - this.minimum) * rect.w / (this.maximum - this.minimum);
		if (x > x0) {
			offs.fillRect(x0, y0, x, y1, style.valueColor);
		}
		if (x < x1) {
			offs.fillRect(x, y0, x1, y1, style.focusedColor);
		}
	}

	void onDraw(Slider this, Image offs, Rect rect) {
		char value[64] = {0};
		if (this.divisor != 0) {
			value.append(0, this.valueF64(), this.style.format);
		} else {
			value.append(0, this.value, this.style.format);
		}
		if (this.onDrawSlider != null) {
			this.onDrawSlider(this, offs, rect);
		}
		View.onDraw(this, offs, rect, this.text, value);
	}
}

struct Histogram: View {
	const bool lines = false;
	// histogram data is in alpha channel, display it with color rgb
	bool color = false;
	argb data[256];

	static void update(Histogram this, Image image) {
		uint32 data[*] = pointer(this.data);
		image.calcRgbHist(null, &data);
		this.color = false;
	}

	bool onUpdate(Histogram this, int idx, int value) {
		this.data[idx] = argb(idx, value, value, value);
		return true;
	}

	bool onReset(Histogram this) {
		bool result = false;
		for (int i = 0; i < 256; i += 1) {
			result |= Histogram.onUpdate(this, i, i);
		}
		return result;
	}

	void onCreate(Histogram this, View parent) {
		View.onCreate(this, parent);
		Histogram.onReset(this);
	}

	bool onTouchEvent(Histogram this, const Rect rect&, const TouchEvent event&) {
		if (event.release || !event.button) {
			return View.onTouchEvent(this, rect, event);
		}

		int px = Math.max(0, rect.w - 256) / 2;
		int x0 = event.x - rect.x - px;
		int x1 = x0 - event.dx;
		int y0 = event.y - rect.y;
		int y1 = y0 - event.dy;

		if (x0 > x1) {
			int x = x0;
			x0 = x1;
			x1 = x;
			int y = y0;
			y0 = y1;
			y1 = y;
		}
		int y = y0 << 16;
		int dy = y1 - y0;
		if (x1 != x0) {
			dy = (dy << 16) / (x1 - x0);
		}
		if (x0 < 0) {
			y -= x0 * dy;
			x0 = 0;
		}
		if (x1 > 256) {
			x1 = 256;
		}
		int h = rect.h;
		for (int x = x0; x < x1; x += 1) {
			int val = 255 * (h - (y >> 16)) / h;
			this.onUpdate(this, x, val);
			y += dy;
		}
		return true;
	}

	bool onMeasure(Histogram this, Rect rect&) {
		if (this.width < 0) {
			rect.w = 256;
		}
		if (this.height < 0) {
			rect.h = 128;
		}
		return View.onMeasure(this, &rect);
	}

	void onDraw(Histogram this, Image offs, const Rect rect) {
		enum {
			colB: 0x4371c6;
			colG: 0x72d874;
			colR: 0xfc6165;
			colL: 0xdadada;
		}
		int px = (rect.w - 256) / 2;
		if (this.lines) {
			int y = rect.y + rect.h;
			int pb = bch(this.data[0]) * rect.h / 256;
			int pg = gch(this.data[0]) * rect.h / 256;
			int pr = rch(this.data[0]) * rect.h / 256;
			int pl = ach(this.data[0]) * rect.h / 256;

			for (int i = 1; i < this.data.length; i += 1) {
				int x = rect.x + i + px;
				argb data = this.data[i];
				int bv = bch(data) * rect.h / 256;
				int gv = gch(data) * rect.h / 256;
				int rv = rch(data) * rect.h / 256;
				int lv = ach(data) * rect.h / 256;

				if (this.color) {
					offs.fillRect(x, y - pl, x + 1, y - lv + int(pl == lv), data.v);
				} else {
					offs.fillRect(x, y - pb, x + 1, y - bv + int(pb == bv), colB);
					offs.fillRect(x, y - pg, x + 1, y - gv + int(pg == gv), colG);
					offs.fillRect(x, y - pr, x + 1, y - rv + int(pr == rv), colR);
					offs.fillRect(x, y - pl, x + 1, y - lv + int(pl == lv), colL);
				}

				pb = bv;
				pg = gv;
				pr = rv;
				pl = lv;
			}
		}
		else if (this.color) {
			for (int i = 0; i < this.data.length; i += 1) {
				argb data = this.data[i];
				int x = rect.x + i + px;
				int y1 = rect.y + rect.h;
				int y0 = y1 - ach(data) * rect.h / 256;
				offs.fillRect(x, y0 - int(y1 == y0), x + 1, y1, uint32(data));
			}
		}
		else {
			for (int i = 0; i < this.data.length; i += 1) {
				int x = rect.x + i + px;
				argb data = this.data[i];
				int bv = bch(data) * rect.h / 256;
				int gv = gch(data) * rect.h / 256;
				int rv = rch(data) * rect.h / 256;
				int lv = ach(data) * rect.h / 256;
				for (int y = 0; y < rect.h; y += 1) {
					uint32 b = colB * uint32(y < bv);
					uint32 g = colG * uint32(y < gv);
					uint32 r = colR * uint32(y < rv);
					uint32 l = colL * uint32(y < lv);
					offs.set(x, rect.h - y + rect.y - 1, r | g | b | l);
				}
			}
		}
	}
}

/// debug view to count draws
struct DebugView: View {
	char text[64];

	int64 started = 0;
	int64 maxDuration = 0;
	int64 durations[64];

	int64 measures = 0;
	int64 draws = 0;

	static void startTimer(DebugView this) {
		this.started = System.millis();
		this.maxDuration = 0;
		// todo: don't copy, use a circular queue
		for (int i = this.durations.length - 1; i >= 1; i -= 1) {
			int64 duration = this.durations[i - 1];
			this.durations[i] = duration;
			if (this.maxDuration < duration) {
				this.maxDuration = duration;
			}
		}
		this.durations[0] = this.maxDuration;
	}

	static void update(DebugView this) {
		int pos = 0;
		if (this.measures > 0) {
			pos = this.text.append(pos, pos > 0 ? ", " : "");
			pos = this.text.append(pos, "measures: ");
			pos = this.text.append(pos, this.measures);
		}

		if (this.draws > 0) {
			pos = this.text.append(pos, pos > 0 ? ", " : "");
			pos = this.text.append(pos, "draws: ");
			pos = this.text.append(pos, this.draws);
		}

		if (this.durations[0] > 0 || pos == 0) {
			pos = this.text.append(pos, pos > 0 ? ", " : "");
			pos = this.text.append(pos, "time: ");
			pos = this.text.append(pos, this.durations[0]);
		}
	}

	bool onClick(DebugView this) {
		return this.onReset(this);
	}

	bool onReset(DebugView this) {
		if (this.measures > 0) {
			this.measures = 0;
		}
		if (this.draws > 0) {
			this.draws = 0;
		}
		for (int i = 0; i < this.durations.length; i += 1) {
			this.durations[i] = 0;
		}
		this.maxDuration = 0;
		this.started = 0;
		return true;
	}

	void onCreate(DebugView this, View parent) {
		View.onCreate(this, parent);
		onReset(this);
	}

	bool onMeasure(DebugView this, Rect rect&) {
		if (this.measures >= 0) {
			this.measures += 1;
		}
		this.update();
		Style style& = this.style;
		style.measure(&rect, this.text);
		return View.onMeasure(this, &rect);
	}

	void onDraw(DebugView this, Image offs, Rect rect) {
		if (this.started > 0) {
			int64 duration = System.millis() - this.started;
			this.durations[0] = duration;
			if (this.maxDuration < duration) {
				this.maxDuration = duration;
			}
			this.started = 0;
		}

		Style style& = this.style;
		if (this.maxDuration > 0) {
			int y0 = rect.y + rect.h;
			float64 ys = rect.h / float64(this.maxDuration);
			float64 xs = rect.w / float64(this.durations.length);
			for (int i = 0; i < this.durations.length; i += 1) {
				int y1 = y0 - ys * this.durations[i];
				int x1 = rect.x + xs * (this.durations.length - i);
				offs.fillRect(x1 - xs, y0, x1, y1, style.focusedColor);
			}
		}

		if (this.draws >= 0) {
			this.draws += 1;
		}
		this.update();
		style.align(rect, &rect, this.text);
		offs.drawText(rect, style.font, this.text, style.textColor);
	}
}

struct Panel: Layout {
	bool visible = false;

	static bool visible(Panel this, bool value) {
		if (this.visible == value) {
			return false;
		}

		this.visible = value;
		this.invalidate();
		return true;
	}

	bool onMeasure(Panel this, Rect rect&) {
		if (!this.visible) {
			// view is hidden
			rect.w = rect.h = 0;
			return false;
		}
		return Layout.onMeasure(this, &rect);
	}
}

// todo this should be a TabPage and/or Accordion
// tab/expand item should be a custom 2 state button
// use a flag to enable multi selection for both TabPage or Accordion
// in case of TabPage the `select button` should be in the tab list
// in case of Accordion the `expand button` should be in the same list with the pages
struct TabPage: Layout {
	Layout tabs = null;
	Layout active = null;
	argb background = argb(0);

	void onCreate(TabPage this, View parent) {
		Layout.onCreate(this, parent);
		this.active = this.items[1].view;
		Style style&  = this.style;
		this.background = mix_rgb8(128, argb(style.backgroundColor), argb(style.hoveredColor));
	}

	static bool onMeasurePage(Layout layout, Rect rect&) {
		TabPage parent = layout.data.as(TabPage);
		if (parent != null && parent.active != layout) {
			// view is hidden
			rect.w = rect.h = 0;
			return false;
		}
		return Layout.onMeasure(layout, &rect);
	}

	static void onDrawPage(Layout panel, Image offs, Rect rect) {
		TabPage page = panel.data.as(TabPage);
		offs.fillRect(rect, page.background.v);
		Layout.onDraw(panel, offs, rect);
	}

	static void onDrawBar(Layout tabs, Image offs, Rect rect) {
		TabPage page = tabs.data.as(TabPage);
		offs.fillRect(rect, page.background.v);
		Layout.onDraw(tabs, offs, rect);
	}

	static void onDrawTab(Button tab, Image offs, Rect rect) {
		TabPage page = tab.parent.parent.as(TabPage);
		Style style& = tab.style;
		if (page.active == tab.data.as(Layout)) {
			offs.fillRect(rect, style.focusedColor);
			style.align(rect, &rect, tab.text);
			offs.drawText(rect, style.font, tab.text, style.textColor);
			return;
		}
		Button.onDraw(tab, offs, rect);
	}

	static void onDrawSeparator(View this, Image offs, Rect rect) {}

	static bool onClickTab(Button button) {
		if (Layout page = button.data.as(Layout)) {
			if (TabPage tabs = page.data.as(Layout)) {
				if (tabs.active == page) {
					return false;
				}
				tabs.active = page;
				tabs.invalidate();
				page.focus();
			}
		}
		return true;
	}

	static TabPage addItems(TabPage this, const char text[*], int align, View views...) {
		inline padding = 1;
		Layout page = {
			data: this;
			// fixme: orientation;
			onDraw: onDrawPage;
			onMeasure: onMeasurePage;
		};
		Button tab = {
			text: text;
			data: page;
			focusable: false;
			onDraw: onDrawTab;
			onClick: onClickTab;
		};

		if (this.tabs == null) {
			Layout tabs = {
				paddingTop: padding;
				paddingLeft: padding;
				paddingRight: padding;
				paddingBottom: padding;
				data: this;
				onDraw: onDrawBar;
				orientation: -this.orientation;
			};

			this.tabs = tabs;
			Layout.addItems(this, Style.center, tabs);
		}

		if (this.tabs.itemCount > 0) {
			// todo: replace separator with rowSpacing and colSpacing
			Layout tabs = this.tabs;
			if (tabs.separator == null) {
				View separator = {
					width: padding;
					height: padding;
					enabled: false;
					focusable: false;
					onDraw: onDrawSeparator;
				};
				tabs.separator = separator;
			}
			tabs.addItems(0, tabs.separator);
		}

		this.tabs.addItems(0, tab);
		page.addItems(align, ...views);
		Layout.addItems(this, Style.fill, page);
		return this;
	}
}

static struct Gui {
	static void showWindow(Image offscreen, int onEvent(Window window&, int action, int button, int x, int y), Widget widget) {
		Window window = {
			offscreen: offscreen;
			widget: widget;
		};
		Gui.showWindow(offscreen, window, onEvent);
	}

	static void showWindow(Image offscreen, Widget widget) {
		static int showWindowEvent(Window win&, int action, int button, int x, int y) {
			if (action == Gui.KEY_RELEASE && button == 27) {
				// exit when releasing escape key
				return -1;
			}
			Widget widget = win.widget;
			if (!win.dispatchEvent(widget, action, button, x, y)) {
				// event not processed, wait for the next one
				return 0;
			}
			return win.draw(widget);
		}
		return showWindow(offscreen, showWindowEvent, widget);
	}

	static void showWindow(Widget widget) {
		widget.onCreate(widget, widget);
		widget.onMeasure(widget, &widget.rect);
		widget.measure = true;
		Image offscreen = Image(widget.rect.w, widget.rect.h, 32);
		showWindow(offscreen, widget);
		offscreen.destroy();
	}
}

/* original design
struct View: object {...}	// garbage collected
struct Text: View {...}
struct Label: View {...}
struct Image: View {...}
struct Check: View {...}	// Switch?
struct Input: View {...}	// single line, multi line
struct Select: View {...}	// ComboBox
struct Slider: View {...}
struct Button: View {...}

struct Panel ~= Layout
struct List: View {...}
struct Grid: View {...}
struct Page: View {...}
struct Window: View {...}

Window window = {
	width: 100;
	height: 100;
	items: {
		Button {
			label: "button1";
			onClick: print("x");
		};
	};
};
window.show();
*/
