// adapted from: https://gitlab.bestminr.com/bestminr/FrontShaders/-/blob/master/shaders/hsl.glsl
/// Convert color from Rgb color space to Hsl color space
vec4f rgb2hsl(vec4f rgb) {
	inline min(float32 x, float32 y) = x < y ? x : y;
	inline max(float32 x, float32 y) = x > y ? x : y;
	inline clamp(float32 value, float32 min, float32 max) = min(max(value, min), max);
	float fmin = min(min(rgb.x, rgb.y), rgb.z);    //Min. value of RGB
	float fmax = max(max(rgb.x, rgb.y), rgb.z);    //Max. value of RGB
	float delta = fmax - fmin;             //Delta RGB value

	// Luminance
	float lum = (fmax + fmin) / 2;

	if (delta == 0) {
		//This is a gray, no chroma...
		return {
			x: 0;   // Hue
			y: 0;   // Saturation
			z: lum; // Luminance
		};
	}

	// Chromatic data...
	float sat;
	if (lum < 0.5f) {
		sat = delta / (fmax + fmin);
	} else {
		sat = delta / (2 - fmax - fmin);
	}

	float deltaR = (((fmax - rgb.x) / 6) + (delta / 2)) / delta;
	float deltaG = (((fmax - rgb.y) / 6) + (delta / 2)) / delta;
	float deltaB = (((fmax - rgb.z) / 6) + (delta / 2)) / delta;

	float hue;
	if (rgb.x == fmax) {
		hue = deltaB - deltaG;
	}
	else if (rgb.y == fmax) {
		hue = (1 / 3f) + deltaR - deltaB;
	}
	else if (rgb.z == fmax) {
		hue = (2 / 3f) + deltaG - deltaR;
	}

	if (hue < 0) {
		hue += 1;
	}
	else if (hue > 1) {
		hue -= 1;
	}

	return {
		x: clamp(hue, 0, 1); // Hue
		y: clamp(sat, 0, 1); // Saturation
		z: clamp(lum, 0, 1); // Luminance
	};
}

/// Convert color from Hsl color space to Rgb color space
vec4f hsl2rgb(vec4f hsl) {
float hue2rgb(float f1, float f2, float hue) {
	if (hue < 0) {
		hue += 1;
	}
	else if (hue > 1) {
		hue -= 1;
	}
	float res;
	if ((6 * hue) < 1) {
		res = f1 + (f2 - f1) * 6 * hue;
	}
	else if ((2 * hue) < 1) {
		res = f2;
	}
	else if ((3 * hue) < 2) {
		res = f1 + (f2 - f1) * ((2 / 3f) - hue) * 6;
	}
	else {
		res = f1;
	}
	return res;
}

	if (hsl.y == 0) {
		return vec4f(hsl.z); // Luminance
	}

	float f2;
	if (hsl.z < .5f) {
		f2 = hsl.z * (1 + hsl.y);
	}
	else {
		f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);
	}

	float f1 = 2 * hsl.z - f2;
	return {
		x: hue2rgb(f1, f2, hsl.x + (1 / 3f));
		y: hue2rgb(f1, f2, hsl.x);
		z: hue2rgb(f1, f2, hsl.x - (1 / 3f));
	};
}

/* TODO: integer based hsl and hsv calculation
/// hue saturation lightness color model
struct hsl {
	/// hue: 0 ... 359
	uint16 hue;
	/// sat: 0 ... 255
	uint8 sat;
	/// lum: 0 ... 255
	uint8 lum;
}

///@public
hsl hsl(argb rgb) {
	// adapted from: https://gist.github.com/mity/6034000
	int r = rch(rgb);
	int g = gch(rgb);
	int b = bch(rgb);

	int min = r;
	if (min > g) min = g;
	if (min > b) min = b;

	int max = r;
	if (max < g) max = g;
	if (max < b) max = b;

	int lum = lum(rgb);
	if (max == min) {
		return {
			hue: 0;
			sat: 0;
			lum: lum;
		};
	}

	int hue = 0;
	int sat = max - min;
	//int lum = (min + max) / 2;
	if (max == r) {
		hue = ((g - b) * 60) / sat;
	}
	else if (max == g) {
		hue = ((b - r) * 60) / sat + 120;
	}
	else /+if(max == b)+/ {
		hue = ((r - g) * 60) / sat + 240;
	}
	if (hue < 0) {
		hue += 360;
	}
	return {
		hue: hue;
		sat: sat;
		lum: lum;
	};
}
*/
