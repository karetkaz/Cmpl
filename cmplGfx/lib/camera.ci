struct Camera {
	vec4f position = vec4f(0, 0, 0, 1);
	vec4f forward = vec4f(0, 0, 0, 1);
	vec4f right = vec4f(0, 0, 0, 1);
	vec4f up = vec4f(0, 1, 0, 1);

	/// create an orthographic or perspective projection matrix
	static mat4f projection(float32 fov, float32 asp, float32 n, float32 f) {
		float32 bot = 1;
		float32 nf = n - f;

		if (fov == 0) {
			// orthographic
			return {
				x: vec4f(1 / asp, 0,       0,      0);
				y: vec4f(0,       1 / bot, 0,      0);
				z: vec4f(0,       0,       2 / nf, -(f+n) / nf);
				w: vec4f(0,       0,       0,      1);
			};
		}

		// perspective
		bot = float32.tan(Math.radians(fov));
		asp *= bot;

		return {
			x: vec4f(n / asp, 0,       0,          0);
			y: vec4f(0,       n / bot, 0,          0);
			z: vec4f(0,       0,       (n+f) / nf, -2 * n * f / nf);
			w: vec4f(0,       0,       1,          0);
		};
	}

	/// Create a camera at the given `position` looking at the given `target`
	static Camera lookAt(vec4f position, vec4f target, vec4f up) {
		vec4f forward = normalize(sub(target, position));
		vec4f right = normalize(cross(up, forward));
		return {
			position: position;
			forward: forward;
			right: right;
			up: cross(forward, right);
		};
	}

	/// get the matrix of the camera, which can be multiplied with the projection matrix
	static mat4f matrix(const Camera camera&) {
		return {
			x: camera.forward;
			y: camera.right;
			z: camera.up;
			w: vec4f(0, 0, 0, 1);
		};
	}

	/// get the matrix of the camera multiplied with the projection matrix
	static mat4f matrix(const mat4f projection&, const Camera camera&) {
		return projection.mul(camera.matrix());
	}

	/// Move the camera in the given `direction` with the given `amount`
	static void move(Camera camera&, vec4f direction, float32 amount) {
		camera.position = add(camera.position, mul(direction, amount));
	}

	/// Rotate the camera around `orbit` in the given `direction` with the given `amount`
	static void rotate(Camera camera&, vec4f orbit, vec4f direction, float32 amount) {
		if (amount == 0) {
			return;
		}

		// rotate the camera
		mat4f matrix = rotation(orbit, direction, amount);
		camera.forward = normalize(dp3(matrix, camera.forward));
		camera.right = normalize(dp3(matrix, camera.right));
		camera.up = cross(camera.forward, camera.right);
		camera.position = dph(matrix, camera.position);
	}
}
