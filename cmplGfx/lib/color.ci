/// an 32 bit argb color
struct argb: 0 {
	/// value of color
	uint32 v;
	struct: 1 {
		/// blue component
		uint8 b;

		/// green component
		uint8 g;

		/// red component
		uint8 r;

		/// alpha component
		uint8 a;
	}
}

/// cast unsigned integer to argb value
inline argb(uint32 argb) = argb(emit(uint32(argb)));
/// cast argb value to unsigned integer
inline uint32(argb value) = uint32(emit(struct(value)));


/// clamp signed gray or color component to fit in 8 bits (0 ... 255)
inline sat_s8(int32 c) = uint32(c > 255 ? 255 : c < 0 ? 0 : c);
/// clamp unsigned gray or color component to fit in 8 bits (0 ... 255)
inline sat_u8(uint32 c) = uint32(c > 255 ? 255 : c);

// construct a rgb8 gray color from the given value
inline _gray(uint32 c) = argb((((c << 8) | c) << 8) | c);
/// construct a rgb8 color from the given gray value, clamp the input
inline gray(int32 c) = _gray(sat_s8(c));
/// construct a rgb8 color from the given gray value, clamp the input
inline gray(uint32 c) = _gray(sat_s8(c));
/// construct a rgb8 color from the given gray value, clamp the input
inline gray(float32 c) = gray(int32(c * 255));
/// construct a rgb8 color from the given gray value, clamp the input
inline gray(float64 c) = gray(int32(c * 255));


/// construct an argb color from the given components
inline _argb(uint32 r, uint32 g, uint32 b) = argb(uint32((((r << 8) | g) << 8) | b));
/// construct an argb color from the given components
inline _argb(uint32 a, uint32 r, uint32 g, uint32 b) = argb(uint32((((((a << 8) | r) << 8) | g) << 8) | b));

/// construct a rgb8 color from the given components, clamp the input
inline argb(int32 r, int32 g, int32 b) = _argb(sat_s8(r), sat_s8(g), sat_s8(b));
/// construct a rgb8 color from the given components, clamp the input
inline argb(uint32 r, uint32 g, uint32 b) = _argb(sat_u8(r), sat_u8(g), sat_u8(b));
/// construct a rgb8 color from the given components, clamp the input
inline argb(float32 r, float32 g, float32 b) = argb(int32(r * 255), int32(g * 255), int32(b * 255));
/// construct a rgb8 color from the given components, clamp the input
inline argb(float64 r, float64 g, float64 b) = argb(int32(r * 255), int32(g * 255), int32(b * 255));
/// construct a rgb8 color from the given components, clamp the input
inline argb(int32 a, int32 r, int32 g, int32 b) = _argb(sat_s8(a), sat_s8(r), sat_s8(g), sat_s8(b));
/// construct a rgb8 color from the given components, clamp the input
inline argb(uint32 a, uint32 r, uint32 g, uint32 b) = _argb(sat_u8(a), sat_u8(r), sat_u8(g), sat_u8(b));
/// construct a rgb8 color from the given components, clamp the input
inline argb(float32 a, float32 r, float32 g, float32 b) = argb(int32(a * 255), int32(r * 255), int32(g * 255), int32(b * 255));
/// construct a rgb8 color from the given components, clamp the input
inline argb(float64 a, float64 r, float64 g, float64 b) = argb(int32(a * 255), int32(r * 255), int32(g * 255), int32(b * 255));


/// get the Alpha channel of the color
inline ach(argb color) = int32((uint32(color) >> 24));
/// get the Red channel of the color
inline rch(argb color) = int32(uint32(color) >> 16 & 0xff);
/// get the Green channel of the color
inline gch(argb color) = int32(uint32(color) >> 8 & 0xff);
/// get the Blue channel of the color
inline bch(argb color) = int32(uint32(color) & 0xff);

/// get the luminosity of the color (0.299 * color.r + 0.587 * color.g + 0.114 * color.b)
inline lum(argb color) = int32((19595 * rch(color) + 38470 * gch(color) + 7471 * bch(color)) >> 16);

/// get the hue of the color
uint32 hue(argb rgb) {
	// adapted from: https://gist.github.com/mity/6034000
	int r = rch(rgb);
	int g = gch(rgb);
	int b = bch(rgb);
	int min = r;
	int max = r;

	if (min > g) {
		min = g;
	}
	if (min > b) {
		min = b;
	}
	if (max < g) {
		max = g;
	}
	if (max < b) {
		max = b;
	}

	if (max == min) {
		return 0;
	}

	int hue = 0;
	if (max == r) {
		hue = ((g - b) * 60) / (max - min);
	}
	else if (max == g) {
		hue = ((b - r) * 60) / (max - min) + 120;
	}
	else if (max == b) {
		hue = ((r - g) * 60) / (max - min) + 240;
	}
	if (hue < 0) {
		hue += 360;
	}
	return hue;
}

inline mix_s8(int32 t, uint32 a, uint32 b) = int32(a + (t * (b - a + 1) >> 8));
inline mix_s16(int32 t, uint32 a, uint32 b) = int32(a + (t * (b - a + 1) >> 16));
inline mix_rgb8(int32 t, argb a, argb b) = argb(mix_s8(t, rch(a), rch(b)), mix_s8(t, gch(a), gch(b)), mix_s8(t, bch(a), bch(b)));

/// linear interpolate a lookup-table with the given colors
void lerpLut(argb lut[], argb colors...) {
	int dt = (colors.length - 1 << 16) / (lut.length - 1);
	for (int i = 0; i < lut.length; i += 1) {
		int t = i * dt;
		argb c1 = colors[t >> 16];
		argb c2 = colors[(t >> 16) + 1];
		int32 a = mix_s16(t & 0xffff, ach(c1), ach(c2));
		int32 r = mix_s16(t & 0xffff, rch(c1), rch(c2));
		int32 g = mix_s16(t & 0xffff, gch(c1), gch(c2));
		int32 b = mix_s16(t & 0xffff, bch(c1), bch(c2));
		lut[i].v = a << 24 | r << 16 | g << 8 | b;
	}
}

/// linear interpolate a alpha lookup-table with the given colors
void alphaLut(uint32 lut[], int hardness, int alpha, bool reflect) {
	int mid = hardness <= 0 ? -1 : 255;
	int div = 256 - sat_u8(hardness < 0 ? -hardness : hardness);
	for (int i = 0; i < lut.length; i += 1) {
		int t = i * 255 / (lut.length - 1);
		lut[i] = sat_s8((t - mid) * 255 / div + mid);
		if (alpha < 0) {
			lut[i] = 255 - (255 - lut[i]) * -alpha / 255;
		} else {
			lut[i] = 255 - lut[i] * alpha / 255;
		}
	}
	if (reflect) {
		int end = lut.length - 1;
		int mid = lut.length / 2;
		for (int i = end; i >= mid; i -= 1) {
			lut[i] = lut[end];
			end -= 2;
		}
		for (int i = 0; i < mid; i += 1) {
			lut[i] = lut[lut.length - i - 1];
		}
	}
}

static if (typename(vec4f) != null) {

/// convert an argb color to a floating point vector
inline vec4f(argb rgb) = vec4f(rch(rgb) / 255f, gch(rgb) / 255f, bch(rgb) / 255f, ach(rgb) / 255f);

/// convert a floating point vector to an argb color
inline argb(const vec4f vec&) = argb(vec.w, vec.x, vec.y, vec.z);

/// calculate the luminosity of a color
inline lum(const vec4f vec&) = 0.299f * vec.x + 0.587f * vec.y + 0.114f * vec.z;

inline "color.hsl.ci";
}
