/// apply a color matrix to each pixel defined by the `roi` on the `image`
void colorMat(Image image, const Rect roi&, const mat4f mat&) {
	static if (preferNativeCalls && typename(Image.colorMat) != null) {
		return Image.colorMat(image, roi, mat.data);
	}
	assert(image.depth() == 32);

	// clip roi with source image
	Rect r = {
		x0: roi != null ? roi.x0 : 0;
		y0: roi != null ? roi.y0 : 0;
		x1: roi != null ? roi.x1 : image.width();
		y1: roi != null ? roi.y1 : image.height();
	};
	if (!image.clip(&r)) {
		// nothing to set
		return;
	}

	int m00 = 65536 * mat.xx;
	int m01 = 65536 * mat.xy;
	int m02 = 65536 * mat.xz;
	int m03 = 256 * 65536 * mat.xw;

	int m10 = 65536 * mat.yx;
	int m11 = 65536 * mat.yy;
	int m12 = 65536 * mat.yz;
	int m13 = 256 * 65536 * mat.yw;

	int m20 = 65536 * mat.zx;
	int m21 = 65536 * mat.zy;
	int m22 = 65536 * mat.zz;
	int m23 = 256 * 65536 * mat.zw;

	for (int y = r.y0; y < r.y1; y += 1) {
		for (int x = r.x0; x < r.x1; x += 1) {
			argb col = argb(image.get(x, y));
			int r = rch(col);
			int g = gch(col);
			int b = bch(col);
			col.r = sat_s8((r * m00 + g * m01 + b * m02 + m03) >> 16);
			col.g = sat_s8((r * m10 + g * m11 + b * m12 + m13) >> 16);
			col.b = sat_s8((r * m20 + g * m21 + b * m22 + m23) >> 16);
			image.set(x, y, col);
		}
	}
}
