/// Checks whether the given `rectangle` is empty or not.
bool empty(const Rect rectangle&) {
// fixme: inline empty(const Rect roi&) = roi.x0 >= roi.x1 || roi.y0 >= roi.y1;
	return rectangle.x0 >= rectangle.x1 || rectangle.y0 >= rectangle.y1;
}

/// Checks whether the given `rectangle` contains the point (`x`, `y`).
bool contains(const Rect rect&, int x, int y) {
	return x >= rect.x0 && x < rect.x1 && y >= rect.y0 && y < rect.y1;
}

/// Computes the width of the given `rectangle`.
inline width(const Rect rectangle&) = rectangle.x1 - rectangle.x0;
/// Sets the width of the given `rectangle`.
void width(Rect rectangle&, int width) {
	rectangle.x1 = rectangle.x0 + width;
}

/// Computes the height of the given `rectangle`.
inline height(const Rect rectangle&) = rectangle.y1 - rectangle.y0;
/// Sets the height of the given `rectangle`.
void height(Rect rectangle&, int height) {
	rectangle.y1 = rectangle.y0 + height;
}

/// Sets the width and height of the given `rectangle`.
void setSize(Rect rectangle&, int width, int height) {
	rectangle.x1 = rectangle.x0 + width;
	rectangle.y1 = rectangle.y0 + height;
}

/// Sets the x position of the given `rectangle`.
void positionX(Rect rectangle&, int x) {
	rectangle.x1 = x + rectangle.x1 - rectangle.x0;
	rectangle.x0 = x;
}
/// Sets the y position of the given `rectangle`.
void positionY(Rect rectangle&, int y) {
	rectangle.y1 = y + rectangle.y1 - rectangle.y0;
	rectangle.y0 = y;
}

/// Sets the x and y position of the given `rectangle`.
void position(Rect rectangle&, int x, int y) {
	rectangle.positionX(x);
	rectangle.positionY(y);
}

///@public
void adjust(Rect rect&, int dx0, int dy0, int dx1, int dy1) {
	rect.x0 += dx0;
	rect.y0 += dy0;
	rect.x1 += dx1;
	rect.y1 += dy1;
}

///@public
void padded(Rect rect&, int padding) {
	rect.x0 -= padding;
	rect.y0 -= padding;
	rect.x1 += padding;
	rect.y1 += padding;
}

/// Moves the given `rectangle` by `dx` and `dy`.
inline translate(Rect rectangle&, int dx, int dy) = rectangle.adjust(dx, dy, dx, dy);
/// Moves the given `rectangle` horizontally by `dx`.
void translateX(Rect rectangle&, int dx) {
	rectangle.x0 += dx;
	rectangle.x1 += dx;
}
/// Moves the given `rectangle` vertically by `dy`.
void translateY(Rect rectangle&, int dy) {
	rectangle.y0 += dy;
	rectangle.y1 += dy;
}
