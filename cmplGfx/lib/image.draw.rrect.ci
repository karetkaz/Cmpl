/// Fill a rounded rectangle on `image` specified by the coordinates and rounding, with the given `color`
void fillRRect(Image image, int x0, int y0, int x1, int y1, int rx, int ry, uint32 color) {
	if (x0 > x1) {
		int t = x0;
		x0 = x1;
		x1 = t;
	}
	if (y0 > y1) {
		int t = y0;
		y0 = y1;
		y1 = t;
	}
	x1 -= int(x1 > x0);
	y1 -= int(y1 > y0);

	int dx = x1 - x0;
	int dy = y1 - y0;
	if (dx < 3 || dy < 3) {
		// no rounding is needed
		return image.fillRect(x0, y0, x1, y1, 1, color);
	}

	ry = Math.min(ry, (dy - int(dx > 16)) / 2);
	rx = Math.min(rx, (dx - int(dy > 16)) / 2);
	if (rx < 8 || ry < 8) {
		if (rx < 1 || ry < 1) {
			// no rounding is needed
			return image.fillRect(x0, y0, x1, y1, 1, color);
		}
		// apply some visual fixes
		rx += int(rx == 7) - int(rx == 6);
		ry += int(ry == 7) - int(ry == 6);
	}

	int64 sx = rx * rx;
	int64 sy = ry * ry;
	int64 rdy = sx * ry;
	int64 rdx = 0;
	int64 r = rdy / 2;

	x0 += rx;
	x1 -= rx;
	for (;y0 < y1;) {
		image.fillRect(x0, y0, x1, y0, 1, color);
		image.fillRect(x0, y1, x1, y1, 1, color);
		if (r >= 0) {
			x0 -= 1;
			x1 += 1;
			r -= rdx += sy;
		}
		if (r < 0) {
			y0 += 1;
			y1 -= 1;
			r += rdy -= sx;
		}
	}
	image.fillRect(x0, y0, x1, y1, 1, color);
}

/// Draw a rounded rectangle on `image` specified by the coordinates and rounding, with the given `color`
void drawRRect(Image image, int x0, int y0, int x1, int y1, int rx, int ry, uint32 color) {
	if (x0 > x1) {
		int t = x0;
		x0 = x1;
		x1 = t;
	}
	if (y0 > y1) {
		int t = y0;
		y0 = y1;
		y1 = t;
	}
	x1 -= int(x1 > x0);
	y1 -= int(y1 > y0);

	int dx = x1 - x0;
	int dy = y1 - y0;
	if (dx < 2 || dy < 2) {
		// no gap between top and bottom or left and right; draw all at once
		return image.fillRect(x0, y0, x1, y1, 1, color);
	}

	ry = Math.min(ry, (dy - int(dx > 16)) / 2);
	rx = Math.min(rx, (dx - int(dy > 16)) / 2);
	if (rx < 8 || ry < 8) {
		if (rx < 1 || ry < 1) {
			// no rounding is needed
			return image.drawRect(x0, y0, x1 + 1, y1 + 1, 1, color);
		}
		// apply some visual fixes
		rx += int(rx == 7) - int(rx == 6);
		ry += int(ry == 7) - int(ry == 6);
	}

	int64 sx = rx * rx;
	int64 sy = ry * ry;
	int64 rdy = sx * ry;
	int64 rdx = 0;
	int64 r = rdy / 2;

	x0 += rx;
	x1 -= rx;
	image.fillRect(x0, y0, x1, y0, 1, color);
	image.fillRect(x0, y1, x1, y1, 1, color);
	for (;y0 < y1;) {
		image.set(x0, y0, color);
		image.set(x1, y0, color);
		image.set(x0, y1, color);
		image.set(x1, y1, color);
		if (r >= 0) {
			x0 -= 1;
			x1 += 1;
			r -= rdx += sy;
		}
		if (r < 0) {
			y0 += 1;
			y1 -= 1;
			r += rdy -= sx;
		}
	}
	image.fillRect(x0, y0, x0, y1, 1, color);
	image.fillRect(x1, y0, x1, y1, 1, color);
}

/// Fill the given rectangle rounding the corners using the given radius
inline fillRRect(Image image, int x1, int y1, int x2, int y2, int r, uint32 color) = fillRRect(image, x1, y1, x2, y2, r, r, color);

/// Draw the given rectangle rounding the corners using the given radius
inline drawRRect(Image image, int x1, int y1, int x2, int y2, int r, uint32 color) = drawRRect(image, x1, y1, x2, y2, r, r, color);

/// Fill the given rectangle rounding the corners using the given radius
void fillRRect(Image image, const Rect roi&, int rx, int ry, uint32 color) {
	if (roi.w <= 0 || roi.h <= 0) {
		// empty rectangle
		return;
	}
	image.fillRRect(roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, rx, ry, color);
}

/// Fill the given rectangle rounding the corners using the given radius
inline fillRRect(Image image, const Rect roi&, int r, uint32 color) = fillRRect(image, roi, r, r, color);
