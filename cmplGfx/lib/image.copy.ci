/// emulated implementation of blend function (incomplete)
void copy(Image image, int32 x0, int32 y0, const Image src, const Rect roi&, int32 alpha, pointer extra, argb blend(pointer extra, argb base, argb with)) {
	static if (fastNativeCalls && typename(Image.copy) != null) {
		return Image.copy(image, x0, y0, src, roi, alpha, extra, pointer(blend));
	}
	// clip roi with source imag
	Rect r = {
		x: roi != null ? roi.x : 0;
		y: roi != null ? roi.y : 0;
		w: roi != null ? roi.w : src.width();
		h: roi != null ? roi.h : src.height();
	};
	if (!src.clip(&r)) {
		// nothing to get
		return;
	}

	// clip also destination
	r.x = x0;
	r.y = y0;
	if (!image.clip(&r)) {
		// nothing to set
		return;
	}

	if (blend != null && alpha != 256) {
		for (int y = r.y; y < r.y + r.h; y += 1) {
			for (int x = r.x; x < r.x + r.w; x += 1) {
				argb col = argb(src.get(x - x0, y - y0));
				argb base = argb(image.get(x, y));
				col = blend(extra, base, col);
				col = mix_s8(alpha, base, col);
				image.set(x, y, col);
			}
		}
	}
	else if (blend != null) {
		for (int y = r.y; y < r.y + r.h; y += 1) {
			for (int x = r.x; x < r.x + r.w; x += 1) {
				argb col = argb(src.get(x - x0, y - y0));
				argb base = argb(image.get(x, y));
				col = blend(extra, base, col);
				image.set(x, y, col);
			}
		}
	}
	else if (alpha != 256) {
		for (int y = r.y; y < r.y + r.h; y += 1) {
			for (int x = r.x; x < r.x + r.w; x += 1) {
				argb col = argb(src.get(x - x0, y - y0));
				argb base = argb(image.get(x, y));
				col = mix_s8(alpha, base, col);
				image.set(x, y, col);
			}
		}
	}
	else {
		for (int y = r.y; y < r.y + r.h; y += 1) {
			for (int x = r.x; x < r.x + r.w; x += 1) {
				argb col = argb(src.get(x - x0, y - y0));
				image.set(x, y, col);
			}
		}
	}
}

/// emulated implementation of blend function (incomplete)
void copy(Image image, int32 x0, int32 y0, const Image src, const Rect roi&, int32 alpha, vec4f blend(vec4f base, vec4f with)) {
	static argb blendVec4f(vec4f blend(vec4f base, vec4f with), argb base, argb with) {
		return argb(blend(vec4f(base), vec4f(with)));
	}
	if (blend == null) {
		return copy(image, x0, y0, src, roi, alpha, null, null);
	}
	return copy(image, x0, y0, src, roi, alpha, blend, blendVec4f);
}

/// emulated implementation of blend function (incomplete)
void copy(Image image, int32 x, int32 y, Image src, const Rect roi&) {
	return copy(image, x, y, src, roi, 256, null, null);
}

/// Create an image by copying another one
Image Image(Image copy) {
	Image result = Image.create(copy.width(), copy.height(), copy.depth());
	result.copy(0, 0, copy, null);
	return result;
}

///@public
void tile(Image image, int x, int y, Image src, const Rect roi&) {
	Rect rect = {
		x: roi != null ? roi.x : 0;
		y: roi != null ? roi.y : 0;
		w: roi != null ? roi.w : src.width();
		h: roi != null ? roi.h : src.height();
	};

	if (!src.clip(&rect)) {
		return;
	}

	if (x < 0) {
		x = -(-x % rect.w);
	}
	if (y < 0) {
		y = -(-y % rect.h);
	}
	int width = image.width();
	int height = image.height();
	for (int j = y; j < height; j += rect.h) {
		for (int i = x; i < width; i += rect.w) {
			image.copy(i, j, src, rect);
		}
	}
}
