// standard library extension

static if (typename(raise) == function) {

inline verbose(char message[*], variant inspect) = raise(raise.verbose, message, inspect, raise.noTrace);
inline verbose(char message[*]) = raise(raise.verbose, message, null, raise.noTrace);

inline trace(char message[*], variant inspect) = raise(raise.debug, message, inspect, raise.defTrace);
inline trace(char message[*]) = raise(raise.debug, message, null, raise.defTrace);

inline debug(char message[*], variant inspect) = raise(raise.debug, message, inspect, raise.noTrace);
inline debug(char message[*]) = raise(raise.debug, message, null, raise.noTrace);

inline info(char message[*], variant inspect) = raise(raise.info, message, inspect, raise.noTrace);
inline info(char message[*]) = raise(raise.info, message, null, raise.noTrace);

inline warn(char message[*], variant inspect) = raise(raise.warn, message, inspect, raise.noTrace);
inline warn(char message[*]) = raise(raise.warn, message, null, raise.noTrace);

inline error(char message[*], variant inspect) = raise(raise.error, message, inspect, raise.defTrace);
inline error(char message[*]) = raise(raise.error, message, null, raise.defTrace);

inline abort(char message[*], variant inspect) = raise(raise.abort, message, inspect, raise.defTrace);
inline abort(char message[*]) = raise(raise.abort, message, null, raise.defTrace);
inline abort() = raise(raise.abort, "execution aborted!", null, raise.defTrace);

inline assert(bool condition, char message[*], variant inspect) = void(condition ? void(0) : abort(message, inspect));
inline assert(bool condition, char message[*]) = void(condition ? void(0) : abort(message));
inline assert(bool condition) = void(condition ? void(0) : abort("assertion failed!"));

}

inline sizeof(typename type) = int(type.size);
