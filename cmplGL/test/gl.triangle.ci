inline fpsCounter = !true;
int maxx = 500;
int maxy = 500;

struct vertex:1 {
	float32 x;
	float32 y;
	int32 c;
}

vertex vertices[] = {
	{ x:  0, y: +1, c: 0xff0000 };  // red vertex
	{ x: -1, y: -1, c: 0x00ff00 };  // green vertex
	{ x: +1, y: -1, c: 0x0000ff };  // blue vertex
};

void mouse(int btn, int x, int y) {
	// trace("mouse");
	uint32 idx = btn - 1;
	if (idx >= vertices.length) {
		return;
	}

	vertices[idx].x = -1.f + x / (.5f * maxx);
	vertices[idx].y = 1.f - y / (.5f * maxy);
	glut.postRedisplay();
}

void keyboard(int key) {
	// trace("keyboard", key);
	if (key == 27) {
		glut.exit();
	}
	if (key == 'f') {
		glut.fullScreen();
	}
	if (key == ' ') {
		char buff[65536] = {};
		char text[*] = buff;
		// gl.Vendor
		gl.getString(gl.Vendor, buff);
		debug("gl.Vendor", text);

		// gl.Renderer
		gl.getString(gl.Renderer, buff);
		debug("gl.Renderer", text);

		// gl.Version
		gl.getString(gl.Version, buff);
		debug("gl.Version", text);

		// gl.Extensions
		gl.getString(gl.Extensions, buff);
		debug("gl.Extensions", text);
	}
}

void reshape(int x, int y) {
	//trace("reshape");
	gl.viewport(0, 0, x, y);
	glut.postRedisplay();
	maxx = x;
	maxy = y;
}

void display() {
	//trace("display");

	gl.clear(gl.ColorBuffer);
	gl.begin(gl.Triangles);
	for (int i = 0; i < vertices.length; i += 1) {
		vertex vtx& = vertices[i];
		float r = float32(vtx.c >> 16 & 0xff) / 255f;
		float g = float32(vtx.c >> 8 & 0xff) / 255f;
		float b = float32(vtx.c >> 0 & 0xff) / 255f;
		gl.color(r, g, b, 1);
		gl.vertex(vtx.x, vtx.y, 0, 1);
	}
	gl.end();
	glut.swapBuffers();

	static if (fpsCounter) {
		static int clk = 0;
		static int fps = 0;

		fps += 1;
		int now = System.time();
		if (clk != now) {
			debug("fps", fps);
			clk = now;
			fps = 0;
		}
		glut.postRedisplay();
	}
}

glut.onMouse(mouse);
glut.onMotion(mouse);
glut.onKeyboard(keyboard);

glut.onReshape(reshape);
glut.onDisplay(display);

glut.initDisplayMode(glut.Double|glut.Rgb);

// this wont let wmExec to exit.
glut.mainLoop(800, 600, "Cmpl - OpenGL");
