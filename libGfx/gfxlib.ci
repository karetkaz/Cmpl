
static if (typename(vec2d) == null) {
inline "gfxlib.vec2d.ci";
}
static if (typename(vec4f) == null) {
inline "gfxlib.vec4f.ci";
}

static if (true) {
inline "gfxlib.color.ci";

inline rgb(vec4f vec) = rgbClamp(int32(vec.x * 255), int32(vec.y * 255), int32(vec.z * 255));

vec4f Hsv2Rgb(vec4f hsv) {
	float32 h = hsv.x;
	float32 s = hsv.y;
	float32 v = hsv.z;

	if (s == 0) {
		return vec4f(v);
	}

	h *= 360 / 60;

	int i = int(h);		// round
	float32 f = h - i;	// fract

	float32 u = v;
	float32 p = v * (1 - s);
	float32 q = v * (1 - s * f);
	float32 t = v * (1 - s * (1 - f));

	if (i == 0) {
		return vec4f(u, t, p);
	}
	if (i == 1) {
		return vec4f(q, u, p);
	}
	if (i == 2) {
		return vec4f(p, u, t);
	}
	if (i == 3) {
		return vec4f(p, q, u);
	}
	if (i == 4) {
		return vec4f(t, p, u);
	}
	return vec4f(u, p, q);
}

}

inline gxSurf(int width, int height, int depth) = gxSurf.create(width, height, depth);

gxSurf gxSurf(char fileName[*], int depth) {
	if (fileName.endsWith(".jpeg", ignCaseCmp)) {
		return gxSurf.openJpg(fileName, depth);
	}
	if (fileName.endsWith(".jpg", ignCaseCmp)) {
		return gxSurf.openJpg(fileName, depth);
	}
	if (fileName.endsWith(".png", ignCaseCmp)) {
		return gxSurf.openPng(fileName, depth);
	}
	if (fileName.endsWith(".bmp", ignCaseCmp)) {
		return gxSurf.openBmp(fileName, depth);
	}
	abort("unknown file extension", fileName);
}

gxMesh gxMesh(char fileName[*]) {
	if (fileName.endsWith(".obj", ignCaseCmp)) {
		return gxMesh.openObj(fileName);
	}
	if (fileName.endsWith(".3ds", ignCaseCmp)) {
		return gxMesh.open3ds(fileName);
	}
	abort("unknown file extension", fileName);
}

//inline gxSurf(char fileName[*]) = gxSurf(fileName, 32);
//inline gxSurf(int width, int height) = gxSurf.create(width, height, 32);
// TODO: inline gxSurf(gxSurf copy) = copySurf(newSurf(width(copy), height(copy)), 0, 0, copy, null);

//inline fillRect(gxSurf dst, gxRect roi, int col) = fillRect(dst, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, col);
//inline drawRect(gxSurf dst, gxRect roi, int col) = drawRect(dst, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, col);

bool clipRect(gxSurf src, gxRect roi&) {
	int minx = 0;
	int miny = 0;
	int maxx = src.width();
	int maxy = src.height();

	roi.w += roi.x;
	roi.h += roi.y;

	if (roi.x < minx)
		roi.x = minx;
	if (roi.y < miny)
		roi.y = miny;
	if (roi.w > maxx)
		roi.w = maxx;
	if (roi.h > maxy)
		roi.h = maxy;

	roi.w -= roi.x;
	roi.h -= roi.y;

	return roi.w > 0 && roi.h > 0;
}
void evalSurf(gxSurf out, gxRect roi&, float32 aspect, float32 time, vec4f eval(vec4f in)) {
	/*FIXME:
	gxRect rect;
	if (roi == null) {
		rect.x = rect.y = 0;
		rect.w = dst.width();
		rect.h = dst.height();
	}
	else {
		rect = roi;
	}
	double dx = 1. / rect.w;
	double dy = 1. / rect.h;

	double y01 = 0;
	for (int y = rect.y; y < rect.y + rect.h; y += 1) {
		double x01 = 0;
		for (int x = rect.x; x < rect.x + rect.w; x += 1) {
			dst.set(x, y, rgb(eval(x01, y01)));
			x01 += dx;
		}
		y01 += dy;
	}*/
	vec4f in = {
		x: 0;
		y: 0;
		z: aspect;
		w: time;
	};
	int w = out.width();
	int h = out.height();
	for (int iy = 0; iy < h; iy += 1) {
		in.y = iy / double(h);
		for (int ix = 0; ix < w; ix += 1) {
			in.x = ix / double(w);
			out.set(ix, iy, rgb(eval(in)));
		}
	}
}

void tileSurf(gxSurf dst, int x, int y, gxSurf src, gxRect roi&) {
	gxRect clip = {
		x: 0;
		y: 0;
		w: src.width();
		h: src.height();
	};

//	if (roi != null) {
//		clip = roi;
//	}

	if (clipRect(src, clip)) {
		int dstw = dst.width();
		int dsth = dst.height();
		if (x < 0) x = -(-x % clip.w);
		//~ if (y < 0) y = y % clip.h;
		for (int j = y; j < dsth; j += clip.h) {
			for (int i = x; i < dstw; i += clip.w) {
				dst.copySurf(i, j, src, clip);
			}
		}
	}
}

void showMesh(gxMesh mesh, int w, int h, float32 fovy) {

	struct Closure {
		gxSurf offs;
		gxMesh mesh;
	}

	static int onEvent(Closure closure&, int action, int button, int ex, int ey) {
		static int ox = 0;
		static int oy = 0;
		static const float speed = 1. / 100;

		if (action == Gui.KEY_PRESS) {
			if (button == 27) {
				return -1;
			}
		}
		if (action == Gui.MOUSE_MOTION) {
			float32 dir[3];
			int dx = ex - ox;
			int dy = ey - oy;

			if (button == 1) {
				// orbit
				float32 orig[3];
				orig[0] = 0;
				orig[1] = 0;
				orig[2] = 0;

				camera.readUp(dir);
				camera.rotate(dir, orig, dx * speed);
				camera.readRight(dir);
				camera.rotate(dir, orig, dy * speed);
			}
			else if (button == 2) {
				// rotate
				camera.readUp(dir);
				camera.rotate(dir, null, -dx * speed);
				camera.readRight(dir);
				camera.rotate(dir, null, -dy * speed);
			}
			else if (button == 3) {
				// move
				camera.readForward(dir);
				camera.move(dir, dy * speed);
			}
			else if (button == 4) {
				// pan
				camera.readRight(dir);
				camera.move(dir, -dx * speed);
				camera.readUp(dir);
				camera.move(dir, dy * speed);
			}
		}

		ox = ex;
		oy = ey;
		closure.offs.drawMesh(closure.mesh);

		return 1;
	}

	Closure closure = {
		offs: gxSurf.create3d(w, h);
		mesh: mesh;
	};
	camera.projection(fovy, w / float32(h), 1, 100);
	Gui.showWindow(closure.offs, closure, onEvent);
	closure.offs.destroy();
}

void showWindow(int w, int h, int t, vec4f eval(vec4f in)) {
	static const int64 start = System.millis();
	struct Closure {
		const gxSurf offs;
		const gxSurf thumb;
		const float64 aspect;
		const vec4f eval(vec4f in);
	}

	static int onEvent(Closure closure&, int action, int button, int ex, int ey) {
		if (action == Gui.WINDOW_CLOSE) {
			trace("closing ...");
			return 0;
		}
		if (action == Gui.KEY_PRESS) {
			if (button == 27) {
				return -1;
			}
		}
		if (action == Gui.KEY_RELEASE) {
			if (button == ' ') {
				float32 time = (System.millis() - start) / 1000f;
				closure.offs.evalSurf(null, closure.aspect, time, closure.eval);
				return 1;
			}
		}

		float32 time = (System.millis() - start) / 1000f;
		closure.thumb.evalSurf(null, closure.aspect, time, closure.eval);
		closure.offs.zoomSurf(null, closure.thumb, null, 1);

		// do not block for any input
		return 0;
	}

	Closure closure = {
		offs: gxSurf(w, h, 32);
		thumb: gxSurf(t, t, 32);
		aspect: w / double(h);
		eval: eval;
	};
	Gui.showWindow(closure.offs, closure, onEvent);
	closure.thumb.destroy();
	closure.offs.destroy();
}

