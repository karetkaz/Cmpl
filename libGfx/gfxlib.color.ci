
uint32 grayClamp(uint32 c) {
	if (c > 255) {
		return 255;
	}
	return c;
}
uint32 grayClamp(int32 c) {
	if (c < 0) {
		return 0;
	}
	if (c > 255) {
		return 255;
	}
	return c;
}
inline grayAnd(uint32 c) = uint32(c & 255);

inline rgb(uint32 r, uint32 g, uint32 b) = uint32((((r << 8) | g) << 8) | b);
inline rgbClamp(uint32 r, uint32 g, uint32 b) = rgb(grayClamp(r), grayClamp(g), grayClamp(b));
inline rgbClamp(int32 r, int32 g, int32 b) = rgb(grayClamp(r), grayClamp(g), grayClamp(b));
inline rgbAnd(uint32 r, uint32 g, uint32 b) = rgb(grayAnd(r), grayAnd(g), grayAnd(b));

inline rgb(float64 r, float64 g, float64 b) = rgbClamp(int32(r * 255), int32(g * 255), int32(b * 255));
inline rgb(float32 r, float32 g, float32 b) = rgbClamp(int32(r * 255), int32(g * 255), int32(b * 255));
inline gray(float64 c) = grayClamp(int32(c * 255));
inline gray(float32 c) = grayClamp(int32(c * 255));

// get the Red channel of the color
inline rch(int32 col) = int32((col >> 16) & 0xff);
// get the Green channel of the color
inline gch(int32 col) = int32((col >> 8) & 0xff);
// get the Blue channel of the color
inline bch(int32 col) = int32(col & 0xff);
// get the luminosity of the color
inline lum(int32 c) = int32((rch(c) * 76 + gch(c) * 150 + bch(c) * 29) >> 8);

/*struct rgb:1 {
	int8 b;
	int8 g;
	int8 r;
	int8 x;
}

define int32(rgb value) = emit(int, rgb(value));
define asrgb(int32 value) = emit(rgb, int32(value));
define asrgb(int r, int g, int b) = emit(rgb, rgb(r, g, b));
*/

uint32 rgbOr(uint32 c1, uint32 c2) {
	return c1 | c2;
}
uint32 rgbXor(uint32 c1, uint32 c2) {
	return c1 ^ c2;
}
uint32 rgbAnd(uint32 c1, uint32 c2) {
	return c1 & c2;
}
uint32 rgbAdd(uint32 c1, uint32 c2) {
	uint32 r = rch(c1) + rch(c2);
	uint32 g = gch(c1) + gch(c2);
	uint32 b = bch(c1) + bch(c2);
	return rgbClamp(r, g, b);
}
uint32 rgbAvg(uint32 c1, uint32 c2) {
	uint32 r = (rch(c1) + rch(c2)) / 2;
	uint32 g = (gch(c1) + gch(c2)) / 2;
	uint32 b = (bch(c1) + bch(c2)) / 2;
	return rgb(r, g, b);
}
uint32 rgbSub(uint32 c1, uint32 c2) {
	int32 r = rch(c1) - rch(c2);
	int32 g = gch(c1) - gch(c2);
	int32 b = bch(c1) - bch(c2);
	return rgbClamp(r, g, b);
}
uint32 rgbMul(uint32 c1, uint32 c2) {
	uint32 r = (rch(c1) * (rch(c2) + 1)) >> 8;
	uint32 g = (gch(c1) * (gch(c2) + 1)) >> 8;
	uint32 b = (bch(c1) * (bch(c2) + 1)) >> 8;
	return rgb(r, g, b);
}
uint32 rgbDiv(uint32 c1, uint32 c2) {
	uint32 r = (rch(c1) << 8) / (rch(c2) + 1);
	uint32 g = (gch(c1) << 8) / (gch(c2) + 1);
	uint32 b = (bch(c1) << 8) / (bch(c2) + 1);
	return rgb(r, g, b);
}

uint32 rgbLerp16(uint32 c1, uint32 c2, uint32 t) {
	inline lrpfix16(uint32 x, uint32 y) = uint32(x + (t * (y - x) >> 16));

	uint32 r = lrpfix16(rch(c1), rch(c2));
	uint32 g = lrpfix16(gch(c1), gch(c2));
	uint32 b = lrpfix16(bch(c1), bch(c2));
	return rgb(r, g, b);
}

uint32 rgbLerp(uint32 c1, uint32 c2, double t) {
	return rgbLerp16(c1, c2, uint32(t * (1 << 16)));
}
