// test the trigonometry functions from Math

void assertEq(char func[*], float64 x, float64 returned, float64 expected) {
	inline epsilon = 1e-15;
	if (Math.cmp(returned, expected, epsilon) == 0) {
		return;
	}

	NotEquals details = {
		expected: expected;
		returned: returned;
		argument: x;
		message: func;
	};
	raise(raise.abort, raise.defTrace, "assertion failed", details);
}

void assertEq(char func[*], float32 x, float32 returned, float32 expected) {
	inline epsilon = 1e-6f;
	if (Math.cmp(returned, expected, epsilon) == 0) {
		return;
	}

	NotEquals details = {
		expected: expected;
		returned: returned;
		argument: x;
		message: func;
	};
	raise(raise.abort, raise.defTrace, "assertion failed", details);
}

for (float64 t = 0; t < Math.pi; t += 1. / 10000) {
	assertEq("Sin", t, Math.sin(t), float64.sin(t));
	assertEq("Cos", t, Math.cos(t), float64.cos(t));
	assertEq("Sin", float32(t), float32(Math.sin(t)), float32.sin(t));
	assertEq("Cos", float32(t), float32(Math.cos(t)), float32.cos(t));
}

// TODO: improve accuracy remove padding of 0.4
for (float64 t = -Math.pi / 2 + .4; t < Math.pi / 2 - .4; t += 1. / 10000) {
	assertEq("Tan", t, Math.tan(t), float64.tan(t));
	assertEq("Tan", float32(t), float32(Math.tan(t)), float32.tan(t));
}
