// test the functions from Math

float64 testMathFloor_1 = Math.floor(3.2);
float64 testMathFloor_2 = Math.floor(3.5);
float64 testMathFloor_3 = Math.floor(3.6);
float64 testMathFloor_4 = Math.floor(-3.2);
float64 testMathFloor_5 = Math.floor(-3.5);
float64 testMathFloor_6 = Math.floor(-3.6);

float64 testMathSign_1F = Math.sign(0.2F);
float64 testMathSign_2F = Math.sign(0.0F);
float64 testMathSign_3F = Math.sign(-.9F);
float64 testMathSign_1f = Math.sign(0.2f);
float64 testMathSign_2f = Math.sign(0.0f);
float64 testMathSign_3f = Math.sign(-.9f);

float64 testMathAbs_1F = Math.abs(0.2F);
float64 testMathAbs_2F = Math.abs(0.0F);
float64 testMathAbs_3F = Math.abs(-.9F);
float64 testMathAbs_1f = Math.abs(0.2f);
float64 testMathAbs_2f = Math.abs(0.0f);
float64 testMathAbs_3f = Math.abs(-.9f);

float64 testMathMin_1f = Math.min(1f, 2f);
float64 testMathMax_2f = Math.max(1f, 2f);
float64 testMathMin_1F = Math.min(1F, 2F);
float64 testMathMax_2F = Math.max(1F, 2F);

float64 testMathClamp_1f = Math.clamp(10f, 0f, 1f);
float64 testMathClamp_1F = Math.clamp(10F, 0F, 1F);

float64 testMathLerp_1f = Math.lerp(.5f, 0f, 2f);
float64 testMathLerp_1F = Math.lerp(.5F, 0F, 2F);

float64 testMathSmooth_0f = Math.smooth(0f);
float64 testMathSmooth_0F = Math.smooth(0F);
float64 testMathSmooth_1f = Math.smooth(1f, 0f, 1f);
float64 testMathSmooth_1F = Math.smooth(1F, 0F, 1F);

float64 testMathMin_nan = Math.min();
float64 testMathMin_1 = Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6);
float64 testMathMax_nan = Math.max();
float64 testMathMax_9 = Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6);

float64 testMathSum_0 = Math.sum();
float64 testMathSum_1 = Math.sum(1);
float64 testMathSum_3 = Math.sum(1, 2);
float64 testMathSum_55 = Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

float64 testMathEval_x = 10;
float64 testMathEval_0 = Math.eval(testMathEval_x);
float64 testMathEval_1 = Math.eval(testMathEval_x, 1.);
float64 testMathEval_2 = Math.eval(testMathEval_x, 1., 1.);
float64 testMathEval_3 = Math.eval(testMathEval_x, 1., 1., 1.);
float64 testMathEval_4 = Math.eval(testMathEval_x, 1., 1., 1., 1.);
float64 testMathEval_5 = Math.eval(testMathEval_x, 1., 1., 1., 1., 1.);
float64 testMathEval_6 = Math.eval(testMathEval_x, 1., 1., 1., 1., 1., 1.);

float64 testMathSin_f64 = Math.sin(Math.pi / 2);
float64 testMathCos_f64 = Math.cos(Math.pi / 2);
float64 testMathTan_f64 = Math.tan(Math.pi / 4);
float64 testMathSinh_f64 = Math.sinh(Math.pi / 2);
float64 testMathCosh_f64 = Math.cosh(Math.pi / 2);
//float64 testMathTanh_f64 = Math.tanh(Math.pi / 4);
float64 testMathAsin_f64 = Math.asin(.2);
float64 testMathAcos_f64 = Math.acos(.2);
//float64 testMathAtan_f64 = Math.atan(.3);

bool testMathCmp_f32 = Math.cmp(1.0e-5f, 1.2e-5f, 1e-5f) == 0;
bool testMathCmp_f64 = Math.cmp(1.0e-5F, 1.2e-5F, 1e-5F) == 0;

float64 testMathAbsMod_f64_0a = Math.absMod(10F, 10F);
float64 testMathAbsMod_f64_0b = Math.absMod(0F, 10F);
float64 testMathAbsMod_f64_0c = Math.absMod(-10F, 10F);

float64 testMathAbsMod_f64_9a = Math.absMod(19F, 10F);
float64 testMathAbsMod_f64_9b = Math.absMod(9F, 10F);
float64 testMathAbsMod_f64_9c = Math.absMod(-1F, 10F);
float64 testMathAbsMod_f64_9d = Math.absMod(-11F, 10F);

float64 testMathAbsMod_f64_8a = Math.absMod(18F, 10F);
float64 testMathAbsMod_f64_8b = Math.absMod(8F, 10F);
float64 testMathAbsMod_f64_8c = Math.absMod(-2F, 10F);
float64 testMathAbsMod_f64_8d = Math.absMod(-12F, 10F);

float32 testMathAbsMod_f32_0a = Math.absMod(10f, 10f);
float32 testMathAbsMod_f32_0b = Math.absMod(0f, 10f);
float32 testMathAbsMod_f32_0c = Math.absMod(-10f, 10f);

float32 testMathAbsMod_f32_9a = Math.absMod(19f, 10f);
float32 testMathAbsMod_f32_9b = Math.absMod(9f, 10f);
float32 testMathAbsMod_f32_9c = Math.absMod(-1f, 10f);
float32 testMathAbsMod_f32_9d = Math.absMod(-11f, 10f);

float32 testMathAbsMod_f32_8a = Math.absMod(18f, 10f);
float32 testMathAbsMod_f32_8b = Math.absMod(8f, 10f);
float32 testMathAbsMod_f32_8c = Math.absMod(-2f, 10f);
float32 testMathAbsMod_f32_8d = Math.absMod(-12f, 10f);

//float64 testMathLog_f64 = Math.log(Math.e * Math.e * Math.e);
//float64 testMathExp_f64 = Math.exp(1F);
//float64 testMathPow_f64 = Math.pow(Math.pi * Math.pi, .5F);
//float64 testMathSqrt_f64 = Math.sqrt(Math.pi * Math.pi);
//float64 testMathAtan_f64 = Math.atan2(Math.pi, 1F);

// TODO: add tests also these functions
//lib/std/math.Complex.ci:20:[.03dda0, .03dda7): exec(0), time(0 / 0.000 ms): Complex(re: float64): Complex
//lib/std/math.Complex.ci:25:[.03dda8, .03ddaf): exec(0), time(0 / 0.000 ms): Complex(re: float64, im: float64): Complex
//lib/std/math.Complex.ci:66:[.03ddb0, .03de2b): exec(0), time(0 / 0.000 ms): div(a: Complex, b: Complex): Complex
//lib/std/math.Complex.ci:93:[.03de30, .03de4f): exec(0), time(0 / 0.000 ms): inv(a: Complex): Complex
//lib/std/math.Complex.ci:107:[.03de50, .03deb4): exec(0), time(0 / 0.000 ms): pow(a: Complex, b: Complex): Complex
