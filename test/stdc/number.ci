// test builtin native functions

double pi64 = 3.14159265358979323846264338327950288419716939937510582097494459;
double e64 = 2.71828182845904523536028747135266249775724709369995957496696763;

float pi32 = pi64;
float e32 = e64;

/// pack 8 bit color components (0 .. 255) to R8G8B8 color format
inline rgb888(int r, int g, int b) = r << 16 & 0xff0000 | g << 8 & 0x00ff00 | b & 0x0000ff;
/// pack 8 bit color components (0 .. 255) to R5G6B5 color format
inline rgb565(int r, int g, int b) = r << 8 & 0xf800 | g << 3 & 0x07e0 | b >> 3 & 0x001f;

int r_comp = 14 << 3;
int g_comp = 63 << 2;
int b_comp = 31 << 3;

int32 r5g6b5 = rgb565(r_comp, g_comp, b_comp);
int32 r8g8b8 = rgb888(r_comp, g_comp, b_comp);

int32 zxtR5 = uint32.zxt(r5g6b5, 11, 5);
int32 zxtG6 = uint32.zxt(r5g6b5, 5, 6);
int32 zxtB5 = uint32.zxt(r5g6b5, 0, 5);

int32 sxtR5 = uint32.sxt(r5g6b5, 11, 5);
int32 sxtG6 = uint32.sxt(r5g6b5, 5, 6);
int32 sxtB5 = uint32.sxt(r5g6b5, 0, 5);

int32 zxtR8 = uint32.zxt(r8g8b8, 16, 8);
int32 zxtG8 = uint32.zxt(r8g8b8, 8, 8);
int32 zxtB8 = uint32.zxt(r8g8b8, 0, 8);

int32 sxtR8 = uint32.sxt(r8g8b8, 16, 8);
int32 sxtG8 = uint32.sxt(r8g8b8, 8, 8);
int32 sxtB8 = uint32.sxt(r8g8b8, 0, 8);

float64 testSin_f64 = float64.sin(pi64 / 2);
float64 testCos_f64 = float64.cos(pi64 / 2);
float64 testTan_f64 = float64.tan(pi64 / 4);
float64 testLog_f64 = float64.log(e64 * e64 * e64);
float64 testExp_f64 = float64.exp(1F);
float64 testPow_f64 = float64.pow(pi64 * pi64, .5F);
float64 testSqrt_f64 = float64.sqrt(pi64 * pi64);
float64 testAtan_f64 = float64.atan2(pi64, 1F);

float32 testSin_f32 = float32.sin(pi32 / 2);
float32 testCos_f32 = float32.cos(pi32 / 2);
float32 testTan_f32 = float32.tan(pi32 / 4);
float32 testLog_f32 = float32.log(e32 * e32 * e32);
float32 testExp_f32 = float32.exp(1f);
float32 testPow_f32 = float32.pow(pi32 * pi32, .5f);
float32 testSqrt_f32 = float32.sqrt(pi32 * pi32);
float32 testAtan_f32 = float32.atan2(pi32, 1f);

int32 testPopulation_u32 = uint32.pop(r5g6b5);
uint32 testSwapBits_u32 = uint32.swap(r5g6b5);
int32 testBitScanReverse_u32 = uint32.bsr(r5g6b5);
int32 testBitScanForward_u32 = uint32.bsf(r5g6b5);
int32 testHighBit_u32 = uint32.hib(r5g6b5);
int32 testLowBit_u32 = uint32.lob(r5g6b5);

int32 testZeroExtend_u32 = uint32.zxt(r5g6b5, 0, 5);
int32 testSignExtend_u32 = uint32.sxt(r5g6b5, 0, 5);

int32 testZeroExtend_u64 = uint64.zxt(r5g6b5, 0, 5);
int32 testSignExtend_u64 = uint64.sxt(r5g6b5, 0, 5);
