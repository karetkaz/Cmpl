
// Value: [init: byVal, pass: byVal, assign: byVal]
int32 val = 9;                            
val = 7;                                    // ok.
//val = null;

// Indirect: [init: byRef, pass: byRef, assign: byVal]
int32 ref& = val;                         
ref = 8;                                    // ok.: byVal => assign value
//ref = null;                                 // err: byVal => can not assign TODO: message: can not type check expression: `ref := null`


// Pointer: [init: byRef, pass: byRef, assign: byRef]
pointer ptr = ref;                        
ptr = null;                                 // ok.: byRef => assign ref
ptr = val;                                  // ok.: byRef => assign ref
ptr = ref;                                  // ok.: byRef => assign ref
//ptr = 7;                                    // err: can not assign TODO: message: can not type check expression: `ptr := 7`


// Function: [init: byRef, pass: byRef, assign: error]
float64 idn(float64 x) {return x;}        
float64 fun(float64 x) = null;             // init: byRef, pass: byRef, assign: error
fun = null;                                 // FIXME: err: assign: disabled
fun = idn;                                  // FIXME: err: assign: disabled


// Array: [init: byVal, pass: byRef, assign: error]
int32 arrFixed[2];// = {1, 2};                // TODO: fill values
//arrFixed = {2, 3};                          // TODO: copy values
//arrFixed = null;                            // FIXME: err: byVal => can not assign
arrFixed[0] = 69;
arrFixed[1] = 96;

// Array: [init: byRef, pass: byRef, assign: byRef]
int32 arrArray[*] = arrFixed;             
arrArray = arrFixed;	// ok.: byRef => assign ref
arrArray = null;	// ok.: byRef => assign ref

// Slice: [init: byRef, pass: byRef, assign: byRef]
int32 arrSlice[] = arrFixed;              
//arrSlice = {2, 3};                          // ???: create array from initializer, and then set ref
arrSlice = arrFixed;                        // ok: byRef => assign(null, 0)
//assert(pointer(arrSlice) == pointer(arrFixed));
//assert(arrSlice.length == arrFixed.length);
arrSlice = null;                            // ok: byRef => assign(null, 0)

