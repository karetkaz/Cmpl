// Hue saturation brightness demo.

static gxSurf offs = gxSurf(1440, 900, 32);
static gxSurf back = gxSurf("asset/image/forest.jpg", 32);
static gxSurf font = gxSurf.openFnt("asset/font/modern-1.fnt");

static int brightness = 0;
static int saturation = 0;
static int hue = 0;

mat4f colorMatrix(float lum, float sat, float hue) {

	static mat4f matLuminosity(float val) {
		return {
			x: vec4f(1., 0., 0., val);
			y: vec4f(0., 1., 0., val);
			z: vec4f(0., 0., 1., val);
			w: vec4f(0., 0., 0.,  1.);
		};
	}

	static mat4f matSaturation(float val) {
		//~ val between 0, 3
		const float inv = 1 - val;
		const float R = .213f * inv;
		const float G = .715f * inv;
		const float B = .072f * inv;
	
		return {
			x: vec4f(R + val, G, B, 0.);
			y: vec4f(R, G + val, B, 0.);
			z: vec4f(R, G, B + val, 0.);
			w: vec4f(0., 0., 0., 1.);
		};
	}

	static mat4f matHue(float val) {
		//~ assert(val >= 0 && val <= 2 * Math.pi);
		inline lR = 0.213;
		inline lG = 0.715;
		inline lB = 0.072;
		float cV = val.cos();
		float sV = val.sin();
		return {
			x: vec4f(lR+cV*(1-lR)+sV*(   -lR), lG+cV*(   -lG)+sV*( -lG), lB+cV*( -lB)+sV*(1 - lB),0.);
			y: vec4f(lR+cV*(0-lR)+sV*(0.1430), lG+cV*(1 - lG)+sV*(0.14), lB+cV*( -lB)+sV*(-0.283),0.);
			z: vec4f(lR+cV*(0-lR)+sV*(lR - 1), lG+cV*(   -lG)+sV*(  lG), lB+cV*(1-lB)+sV*(    lB),0.);
			w: vec4f(0., 0., 0., 1.);
		};
	}

	mat4f result = mat4f(
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1
	);

	mat4f tmp;

	tmp = matLuminosity(lum);
	result = mul(result, tmp);

	tmp = matSaturation(sat);
	result = mul(result, tmp);

	tmp = matHue(hue);
	result = mul(result, tmp);
	return result;
}

int onEvent(int action, int button, int x, int y) {
	static int ox = 0;
	static int oy = 0;
	bool reCalculate = false;
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
		if (button == ' ') {
			reCalculate = true;
		}
		if (button == '\r') {
			brightness = 0;
			saturation = 0;
			hue = 0;
			reCalculate = true;
		}
		if (button == 'S') {
			trace("dumping screen");
			offs.saveBmp("out/dump.bmp", 0);
		}
	}
	else if (action == Gui.MOUSE_PRESS) {
		ox = x;
		oy = y;
		return 0;
	}
	else if (action == Gui.MOUSE_MOTION) {
		int dx = ox - x;
		int dy = oy - y;

		if (button == 1) {
			brightness = Math.clamp(brightness + dy, -100, 100);
			reCalculate = true;
		}
		if (button == 2) {
			saturation = Math.clamp(saturation + dy, -100, 200);
			reCalculate = true;
		}
		if (button == 3) {
			hue = Math.clamp(hue + dy, 0, 360);
			reCalculate = true;
		}
		ox = x;
		oy = y;
	}

	if (reCalculate) {
		mat4f mat = colorMatrix(brightness / 100., saturation / 100. + 1, Math.deg2rad(hue));
		offs.resize(null, back, null, 1);
		offs.colorMat(null, mat.data);
		offs.drawHist(null, 0x00ffffff);

		char text[256];
		FormatFlags flags = { padLen: 4 };
		int pos = text.append(0, "brightness: ");
		pos = text.append(pos, brightness, flags);
		pos = text.append(pos, "\nsaturation: ");
		pos = text.append(pos, saturation, flags);
		pos = text.append(pos, "\nhue: ");
		pos = text.append(pos, hue, flags);

		inline p = 5;
		gxRect rect = { x: 30, y: 30, w: 0, h: 0 };
		font.clipText(rect, text);
		offs.fillRect(rect.x - p, rect.y - p, rect.x + rect.w + p, rect.y + rect.h + p, 0x000000);
		offs.drawText(rect.x, rect.y, font, text, 0xffffff);
	}

	return 0;
}

onEvent(Gui.KEY_PRESS, '\r', 0, 0);
offs.show(onEvent);
offs.destroy();
back.destroy();
font.destroy();
