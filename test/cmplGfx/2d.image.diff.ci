// complex plane domain coloring demo.

inline N = float32(Math.pi);

inline absMod(double val, double mod) = ((val < 0 ? val + mod : val) % mod);

vec4f domain(Complex z, double mod) {
	vec4f result = {
		x: absMod(arg(z) / (2 * Math.pi) + Math.pi / 4, mod);
		y: 4 * absMod(abs(z), 1) * (1 - absMod(abs(z), 1));
		z: 1;// - absMod(Math.abs(z.im), 1);
	};
	return hsv2rgb(result);
}

vec4f rgbOp1(vec4f in) {
	Complex z = {
		re: Math.lerp(in.x, -N, N);
		im: Math.lerp(in.y, -N, N);
	};

	z = z.toPolar();
	z = z.sech();
	return domain(z.sin(), 1);
}

vec4f rgbOp2(vec4f in) {
	Complex z = {
		re: Math.lerp(in.x, -N, N);
		im: Math.lerp(in.y, -N, N);
	};

	z = z.toPolar();
	z = z.csch();
	return domain(z.sin(), 1);
}

static gxSurf image = gxSurf(512, 512, 32);
static gxSurf image1 = gxSurf(image.width(), image.height(), image.depth());
static gxSurf image2 = gxSurf(image.width(), image.height(), image.depth());

image1.eval(null, 1, 0, rgbOp1);
image2.eval(null, 1, 0, rgbOp2);
image.copy(0, 0, image1, null);

int onEvent(int action, int button, int ex, int ey) {
	if (action == Gui.KEY_PRESS) {
		if (button == 27) {
			return -1;
		}
	}
	if (action == Gui.MOUSE_PRESS) {
		image.copy(0, 0, image2, null);
		return 1;
	}
	if (action == Gui.MOUSE_RELEASE) {
		image.copy(0, 0, image1, null);
		return 1;
	}
	return 1;
}

image.show(onEvent);
image1.destroy();
image2.destroy();
image.destroy();
