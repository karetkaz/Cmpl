// test array initializations

static if (typename(integer) == null) {
inline integer = int32;
}

// uninitialized arrays
integer arrFixedNoInit[7];
integer arrSliceNoInit[];  // FIXME: force slice to be initialized
integer arrArrayNoInit[*];

// initialize the array; TODO: initialize with initializer
for (int  i = 0; i < arrFixedNoInit.length; i += 1) {
	arrFixedNoInit[i] = 42 + i;
}

//integer arrFixedInitNull[7] = null;  // compilation error; TODO: custom message
integer arrSliceInitNull[] = null;
integer arrArrayInitNull[*] = null;

//integer arrFixedInitFixed[7] = arrFixedNoInit;  // FIXME: copy elements + compile time length check
integer arrSliceInitFixed[] = arrFixedNoInit;
integer arrArrayInitFixed[*] = arrFixedNoInit;

//integer arrFixedInitSlice[7] = arrSliceInitFixed;  // TODO: copy elements + runtime length check
integer arrSliceInitSlice[] = arrSliceInitFixed;
integer arrArrayInitSlice[*]  = arrSliceInitFixed;

//integer arrFixedInitPtr[7] = arrArrayInitFixed;  // compilation error; TODO: custom message: missing length
//integer arrSliceInitPtr[] = arrArrayInitFixed;  // compilation error: can not emit length of array
integer arrArrayInitPtr[*] = arrArrayInitFixed;

/* TODO: cgen implementation for: array initialization with literal
integer arrFixedInitLiteral[7] = {1, 2, 3, 4};
integer arrSliceInitLiteral[] = {1, 2, 3, 4};
integer arrArrayInitLiteral[*] = {1, 2, 3, 4};
// */

// initialize character arrays with string literals
//char arrFixedInitString[2] = "string";  // compilation error: TODO: custom message: data does not fit
//char arrFixedInitString[7] = "string";  // FIXME: copy elements + compile time length check
char arrSliceInitString[] = "string";
char arrArrayInitString[*] = "string";

//int err_arrSliceInitString[] = "string";  // FIXME: this should not compile: invalid assignment
//int err_arrArrayInitString[*] = "string";  // FIXME: this should not compile: invalid assignment

assert(arrSliceNoInit.length == 0);
assert(arrSliceInitNull.length == 0);

assert(arrFixedNoInit[0] == 42);

int lenSlice(integer values[]) { return values.length; }
integer nthSlice(int idx, integer values[]) { return values[idx]; }
integer nthArray(int idx, integer values[*]) { return values[idx]; }
integer nthFixed(int idx, integer values[7]) { return values[idx]; }

assert(arrFixedNoInit.length == 7);
assert(arrSliceInitFixed.length == arrFixedNoInit.length);
assert(arrSliceInitSlice.length == arrFixedNoInit.length);

assert(lenSlice(null) == 0);
assert(lenSlice(arrSliceInitNull) == 0);
assert(lenSlice(arrFixedNoInit) == arrFixedNoInit.length);
assert(lenSlice(arrSliceInitFixed) == arrFixedNoInit.length);
assert(lenSlice(arrSliceInitSlice) == arrFixedNoInit.length);

for (int i = 0; i < arrFixedNoInit.length; i += 1) {
	integer expected = 42 + i;
	assert(expected == arrFixedNoInit[i]);
	assert(expected == arrArrayInitFixed[i]);
	assert(expected == arrSliceInitFixed[i]);

	assert(expected == nthSlice(i, arrFixedNoInit));
	// assert(expected == nthSlice(i, arrArrayInitFixed));	// compilation error: can not emit length of array
	assert(expected == nthSlice(i, arrSliceInitFixed));

	assert(expected == nthArray(i, arrFixedNoInit));
	assert(expected == nthArray(i, arrArrayInitFixed));
	assert(expected == nthArray(i, arrSliceInitFixed));

	assert(expected == nthFixed(i, arrFixedNoInit));
	assert(expected == nthFixed(i, arrArrayInitFixed));
	assert(expected == nthFixed(i, arrSliceInitFixed));

	assert(expected == arrSliceInitSlice[i]);
}

/*
// initialize all elements with the value 4
int a[100] = {*: 4}; /+ =>
	int a[100];
	for (int i = 0; i < a.length; ++i) {
		a[i] = 4;
	}
+/

// initialize the first 3 elements with the given values
// the rest will be initalized with 64
int a[100] = {1, 2, 3, *: 64}; /+ =>
	int a[100];
	a[0] = 1;
	a[1] = 2;
	a[2] = 3;
	for (int i = 3; i < a.length; ++i) {
		a[i] = 64;
	}
+/

// initialize all elements with null, then override some of them
string xmlEscape[255] = {
	*: null;
	'"': "&quot;";
	'\'': "&apos;";
	'<': "&lt;";
	'>': "&gt;";
	'&': "&amp;";
}; /+ =>
	string xmlEscape[255];
	for (int i = 3; i < xmlEscape.length; ++i) {
		xmlEscape[i] = null;
	}
	xmlEscape['"'] = "&quot;";
	xmlEscape['\''] = "&apos;";
	xmlEscape['<'] = "&lt;";
	xmlEscape['>'] = "&gt;";
	xmlEscape['&'] = "&amp;";
+/
// */