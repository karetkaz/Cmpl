// static, virtual and abstract methods

struct RecordMethodTest {
	// static method
	// is like a `global function` hidden in a record
	static int staticMethod(int x, int y) {
		return x + y;
	}

	// static forward method
	// is like a `forward function reference` hidden in a record
	static int forwardMethod(int x, int y);

	// abstract methods must be overridden when inheriting or instantiating
	// see @lang.member.ci: the compiler sees it as a `constant function reference` without `default type initializer`
	int abstractMethod(int x, int y);

	// virtual method (use to delegate)
	// see @lang.member.ci: the compiler sees it as a `constant function reference` with `default field initializer`
	int delegateMethod(int x, int y) = forwardMethod;

	// virtual methods can be overridden when inheriting or instantiating
	// the compiler will generate a static function and instance member:
	//   1. static int virtualMethod(int x, int y) { ... }
	//   2. int virtualMethod(int x, int y) = /*static*/ virtualMethod;
	int virtualMethod(int x, int y) {
		return x * y;
	}

	// static forward method implementation
	static int forwardMethod(int x, int y) {
		return x * y;
	}

	// int abstractMethod(int x, int y) { return 0; }      // FIXME: virtualize abstract method
	// int delegateMethod(int x, int y) { return 0; }      // Error: redefinition of method
	// int virtualMethod(int x, int y) { return 0; }       // Error: redefinition of method
	// int staticMethod(int x, int y) { return 0; }        // Error: redefinition of method

	void print(RecordMethodTest this) {
		trace("virtual");
	}

	static void printStatic(RecordMethodTest this) {
		trace("static");
	}
}

static int globalFunction(int x, int y) {
	return x * y;
}

RecordMethodTest recordMethodTest = {
	delegateMethod: globalFunction;
	abstractMethod: RecordMethodTest.staticMethod;
	// virtualMethod: RecordMethodTest.staticMethod;          // FIXME: lookup only non static members
};

void customPrint(RecordMethodTest this) {
	trace("override");
}

RecordMethodTest recordMethodTestCustomPrint = {
	abstractMethod: globalFunction;
	print: customPrint;
};

// extension function is not yet defined, call virtual member function
recordMethodTest.print();
recordMethodTestCustomPrint.print();

// extension function is not yet defined, call static member function
recordMethodTest.printStatic();

void print(RecordMethodTest this) {
	trace("extension");
}

void printStatic(RecordMethodTest this) {
	trace("extension");
}

// extension function is defined, it has the highest priority.
recordMethodTest.print();
recordMethodTest.printStatic();
recordMethodTestCustomPrint.print();

// force invoke the original methods
RecordMethodTest.print(recordMethodTest);
RecordMethodTest.printStatic(recordMethodTest);
RecordMethodTest.print(recordMethodTestCustomPrint);

// todo: to force or not the overridden method invocation
