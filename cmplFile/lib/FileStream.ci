///@public
struct FileReader: ByteReader {
	const File file;

	int read(FileReader this, uint8 bytes[]) {
		return File.read(this.file, bytes);
	}

	void close(FileReader this) {
		File.close(this.file);
	}
}

///@public
struct FileWriter: ByteWriter {
	///@public
	const File file;

	void write(FileWriter this, byte bytes[]) {
		int wrote = File.write(this.file, bytes);
		assert(wrote == bytes.length);
	}

	void flush(FileWriter this) {
		File.flush(this.file);
	}

	void close(FileWriter this) {
		File.close(this.file);
	}
}

///@public
struct BufferedFileWriter: FileWriter {
	byte buffer[1024];
	int bufferSize = 0;

	static void flushBuffer(BufferedFileWriter this) {
		int wrote = File.write(this.file, this.buffer[... this.bufferSize]);
		assert(wrote == this.bufferSize);
		this.bufferSize = 0;
	}

	void write(BufferedFileWriter this, byte bytes[]) {
		if (this.bufferSize + bytes.length > this.buffer.length) {
			if (this.bufferSize > 0) {
				this.flushBuffer();
			}
			if (bytes.length > this.buffer.length / 2) {
				// writing more than buffer half size, make the write
				FileWriter.write(this, bytes);
				return;
			}
		}
		// accumulate into buffer
		byte buffer[*] = this.buffer;
		int bufferSize = this.bufferSize;
		for (int i = 0; i < bytes.length; i += 1) {
			buffer[bufferSize + i] = bytes[i];
		}
		this.bufferSize += bytes.length;
	}

	void flush(BufferedFileWriter this) {
		this.flushBuffer();
		FileWriter.flush(this);
	}

	void close(BufferedFileWriter this) {
		this.flushBuffer();
		FileWriter.close(this);
	}
}

///@public
FileReader FileReader(const char path[*]) {
	return FileReader {
		file: File.open(path);
	};
}

///@public
FileWriter FileWriter(const char path[*], bool append) {
	return FileWriter {
		file: append ? File.append(path) : File.create(path);
	};
}

///@public
BufferedFileWriter BufferedFileWriter(const char path[*], bool append) {
	return BufferedFileWriter {
		buffer: null;
		file: append ? File.append(path) : File.create(path);
	};
}
