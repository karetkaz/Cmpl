enum Window {
	draw = RenderMode.swap_buff;
	resx = 512;
	resy = 512;
}

gxSurf bgImg = gxSurf("media/images/Earth.jpg");

define magFactor = 4.4;
define magRadius = 92;

bool reDraw = true;
gxRect roi  = gxRect(Window.resx / 2 - Window.resx / 4, Window.resy / 2 - Window.resy / 4, Window.resx / 2, Window.resy / 2);

int magx = Window.resx / 2;
int magy = Window.resy / 2;
int bgresx = width(bgImg);
int bgresy = height(bgImg);
vec2d magnCoeff[magRadius * 2][magRadius * 2];

void mouseCB(int btn, int x, int y) {
	static int ox;
	static int oy;
	if (btn & 1) {
		reDraw := true;
		magx = x;
		magy = y;
	}
	if (btn & 2) {
		reDraw := true;
		roi.x = Math.clamp(roi.x + ox - x, 0, bgresx - roi.w);
		roi.y = Math.clamp(roi.y + oy - y, 0, bgresy - roi.h);
	}
	ox = x;
	oy = y;
}
void drawCB() {
	if (reDraw) {
		//~ copy background image
		copySurf(offScreen, 0, 0, bgImg, &roi);
		double maxx = bgresx;
		double maxy = bgresy;

		//~ draw lens
		for (int y = -magRadius; y < magRadius; y += 1) {
			for (int x = -magRadius ;x < magRadius; x += 1) {
				vec2d p = magnCoeff[y + magRadius][x + magRadius];
				double px = Math.clamp(roi.x + magx + p.x, 0., maxx);
				double py = Math.clamp(roi.y + magy + p.y, 0., maxy);
				int col = getPixel(bgImg, px, py);
				setPixel(offScreen, x + magx, y + magy, col);
			}
		}
		reDraw = false;
	}
}

Gui.setMouseHandler(mouseCB);
Gui.setDrawCallback(drawCB);

roi = gxRect(0, 0, Window.resx, Window.resy);
double s = sqrt(magRadius * magRadius - magFactor * magFactor);
for (int y = -magRadius; y < magRadius; y += 1) {
	for (int x = -magRadius ;x < magRadius; x += 1) {
		double a = x;
		double b = y;
		if (x * x + y * y <= s * s) {
			double z = sqrt(magRadius*magRadius - x*x - y*y);
			if (z > 0) {
				a = x * (magRadius / magFactor) / z;
				if (Math.abs(a) > Math.abs(x))
					a = x;

				b = y * (magRadius / magFactor) / z;
				if (Math.abs(b) > Math.abs(y))
					b = y;
			}
		}
		//~ magnCoeff[y + magRadius][x + magRadius].x = a;
		//~ magnCoeff[y + magRadius][x + magRadius].y = b;
		magnCoeff[y + magRadius][x + magRadius] = vec2d(a, b);
	}
}
