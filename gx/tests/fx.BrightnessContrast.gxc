// Brightness, contrast, gamma demo.
enum Window {
	draw = RenderMode.swap_buff;
	resx = 512;
	resy = resx;
}

//~ string fileName = "media/images/David.png";
string fileName = "media/images/lenaRGB.png";
//~ string fileName = "media/images/download.jpg";
//~ string fileName = "media/images/dino-blue.jpg";
//~ string fileName = "media/images/Earth.jpg";
//~ string fileName = "media/images/nol.bmp";

define useNativeImpl = true;
gxSurf img = gxSurf(fileName);
gxSurf lui = gxSurf(256, 100);
gxClut histogram;
gxClut lut;

int brightness = 0;
int contrast = 0;

bool reDraw = true;
bool reCalc = true;

void lutBrightnessContrast(gxClut &lut, double easeIn(double ratio), double brightness, double contrast) {

	define processRed = true;
	define processGreen = true;
	define processBlue = true;

	lut.count = 256;
	for (int idx = 0; idx < 256; idx += 1) {
		double value = idx / 255.;
		if (easeIn != null) {
			if (contrast < 0) {
				value = Math.lerp(-contrast, value, Easing.easeOutIn(easeIn, value));
			} else {
				value = Math.lerp(contrast, value, Easing.easeInOut(easeIn, value));
			}
			if (brightness < 0) {
				value = Math.lerp(-brightness, value, easeIn(value));
			} else {
				value = Math.lerp(brightness, value, Easing.easeOut(easeIn, value));
			}
		} else {
			value = brightness + (contrast + 1) * (value - .5) + .5;
		}

		int val = Math.clamp(int(value * 255), 0, 255);
		lut.data[idx] = (processRed ? val : idx) << 16
					  | (processGreen ? val : idx) << 8
					  | (processBlue ? val : idx);
	}
}

void mouseCB(int btn, int x, int y) {
	static int old_btn = -1;
	static int old_x = -1;
	static int old_y = -1;
	int d = old_y - y;

	if (Mouse.dblClick(btn, x, y)) {
		// disable multi clicks
		Mouse.dblClick(-1, 0, 0);
		// reset values
		brightness = 0;
		contrast = 0;
		reDraw = true;
	}

	if (old_btn != btn) {
		if (btn == 0) {
			reCalc = true;
		}
		old_btn = btn;
		reDraw = true;
	}
	if (old_y != y) {
		if (btn == 1) {
			brightness += d;
			reDraw = true;
		}
		if (btn == 2) {
			contrast += d;
			reDraw = true;
		}
		old_y = y;
	}
	old_x = x;
}

void drawCB() {
	if (reDraw) {
		zoomSurf(offScreen, null, img, null, 0);

		brightness = Math.clamp(brightness, -256, 256);
		contrast = Math.clamp(contrast, -256, 256);

		lutBrightnessContrast(&lut, Easing.Circ, brightness / 255., contrast / 255.);
		clutSurf(offScreen, null, &lut);

		if (reCalc) {
			histoLut(&histogram, offScreen, true);
			reCalc = false;
		}

		copySurf(offScreen, Window.resx - 266, 10, lut2Surf(lui, &lut, false), null);
		copySurf(offScreen, Window.resx - 266, 130, lut2Surf(lui, &histogram, true), null);

		static if (true) {
			int y = 0;
			define dy = 12;
			uint8 txt[1024];

			format(txt, "brightness: %+d", brightness);
			drawText(offScreen, 0, y, string(txt), -1);
			y += dy;

			format(txt, "contrast: %+d", contrast);
			drawText(offScreen, 0, y, string(txt), -1);
			y += dy;
		}

		reDraw = false;
	}
}

Gui.setMouseHandler(mouseCB);
Gui.setDrawCallback(drawCB);
