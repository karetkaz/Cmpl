enum Window {
	draw = RenderMode.swap_buff;
	resx = 512;
	resy = resx;
}

//~ string fileName = "media/images/David.png";
//~ string fileName = "media/images/lenaRGB.png";
string fileName = "media/images/download.jpg";
//~ string fileName = "media/images/dino-blue.jpg";
//~ string fileName = "media/images/Earth.jpg";
//~ string fileName = "media/images/nol.bmp";

gxSurf image = gxSurf(fileName);

float intensity = .1;

vec4f grayFp(vec4f rgbColor) {
	static const vec4f RGB2LUM = vec4f(0.2989, 0.587, 0.114, 0);
	result = vec4f(dp3(RGB2LUM, rgbColor));
	//~ result = vec4f(0.2989f * rgbColor.x + 0.5870f * rgbColor.y + 0.1140f * rgbColor.z);
}

vec4f grayFp2(vec4f rgbColor) {
	result = vec4f((rgbColor.x + rgbColor.y + rgbColor.z) / 3);
	//~ result = vec4f(0.2989f * rgbColor.x + 0.5870f * rgbColor.y + 0.1140f * rgbColor.z);
}

vec4f sepiaFp(vec4f rgbColor) {
	static const mat4f RGB2YIQ = mat4f(
		vec4f(0.299,  0.587,  0.114, 0.000),
		vec4f(0.596, -0.275, -0.321, 0.000),
		vec4f(0.212, -0.523,  0.311, 0.000),
		vec4f(0.000,  0.000,  0.000, 1.000)
	);

	static const mat4f YIQ2RGB = mat4f(
		vec4f(1.000,  0.956,  0.621, 0.000),
		vec4f(1.000, -0.272, -0.647, 0.000),
		vec4f(1.000,  -1.10,   1.70, 0.000),
		vec4f(0.000,  0.000,  0.000, 1.000)
	);

	// alpha channel is not needed, so use dot3
	define dot(mat4f mat, vec4f vec) = dp3(mat, vec);

	// convert RGB value to YIQ color space
	vec4f yiqColor = dot(RGB2YIQ, rgbColor);

	// Here we set the I value of the YIQ color to the intensity
	yiqColor.y = intensity;

	// zero out the Q to apply the sepia tone
	yiqColor.z = 0;

	// convert back to RGB.
	result = dot(YIQ2RGB, yiqColor);
}

vec4f sepia2Fp(vec4f c) {
	result = vec4f(
		c.x * 0.400 + c.y * 0.769 + c.z * 0.189,
		c.x * 0.349 + c.y * 0.686 + c.z * 0.168,
		c.x * 0.272 + c.y * 0.534 + c.z * 0.131
	);
}

//~ setupPicView(image, true);
setupPicView(fillSurf(image, null, sepiaFp), true);
