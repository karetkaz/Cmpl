// 2d
define test = 4;
enum Window {
	draw = RenderMode.swap_buff;

	//~ resx = 1440;
	//~ resy = 900;

	//~ resx = 800;
	//~ resy = 800;

	resx = 512;
	resy = 512;
}

define pi = Math.pi;

/* TODO:
//~ operator (gxSurf src).width.get = width(src);
//~ operator (gxSurf src).height.get = height(src);
//~ operator (gxSurf src)[int x, int y].get = getPixel(src, x, y);
//~ operator (gxSurf src)[int x, int y].set(int color) = setPixel(src, x, y, color);

//~ operator (gxSurf src) get width = width(src);
//~ operator (gxSurf src) get height = height(src);
//~ operator (gxSurf src) get [int x, int y] = getPixel(src, x, y);
//~ operator (gxSurf src)[int x, int y].set(int color) = setPixel(src, x, y, color);

string alma() {
	result = "alma";
}
// */

define fillRect(gxSurf dst, int col) = fillRect(dst, 0, 0, 65535, 65535, col);

static if (true) {		// mandelbrot

gxSurf Mandel(gxSurf dst, gxClut &lut, double QMin, double QMax, double PMin, double PMax) {

	define M = 4.;			// It. Limit

	int kmax = lut.count;
	int resx = width(dst);
	int resy = height(dst);

	double xStep = (PMax - PMin) / resx;
	double yStep = (QMax - QMin) / resy;

	for (int sy = 0; sy < resy; sy += 1) {
		double y0 = QMin + sy * yStep;

		for (int sx = 0; sx < resx; sx += 1) {
			double x0 = PMin + sx * xStep;

			double xtemp;
			double x = 0;
			double y = 0;
			int k = 0;

			for (k = 0; k < kmax; k += 1) {
				xtemp = x * x - y * y + x0;
				y = 2 * x * y + y0;
				x = xtemp;

				if (x * x + y * y > M)
					break;
			}

			if (k >= kmax)
				k = 0;

			setPixel(dst, sx, sy, lut.data[k]);
		}
		if (resx > 1000) {
			print("line(");
			print(sy);
			print(") of ");
			println(resy);
		}
	}
	result = dst;
}

gxClut mandelLut;
double QMin = -1.5;
double QMax = +1.5;
double PMin = -2.25;
double PMax = +0.75;
//~ define zoom = 1.17187372574E-2;
//~ double QMin = -1.25632982971-zoom;
//~ double QMax = -1.25632982971+zoom;
//~ double PMin = -0.02761733591558-zoom;
//~ double PMax = -0.02761733591558+zoom;
blendLut(32, &mandelLut, 0xFFFFFF, 0x000000, 0xadadff, 0x000000);

}

int reDraw = 1;
gxRect roi  = gxRect(Window.resx / 2 - Window.resx / 4, Window.resy / 2 - Window.resy / 4, Window.resx / 2, Window.resy / 2);

void mouseMoveSizeRoi(int btn, int x, int y) {
	static int ox = 0;
	static int oy = 0;
	if (btn == 1) {
		reDraw = true;
		roi.x += x - ox;
		roi.y += y - oy;
	}
	if (btn == 2) {
		reDraw = true;
		roi.w = x - roi.x;
		roi.h = y - roi.y;
	}
	ox = x;
	oy = y;
}

static if (test == 0) {		// Quit
Gui.exitLoop();
}
static if (test == 1) {		// mouse
int mbtn = 0;
void mouseCB(int btn, int x, int y) {
	mbtn = btn;
	print("mouseHnd(btn = "); print("%08x", btn); print(", x = "); print(x); print(", y = "); print(y); print(")\n");
}
void drawCB() {
	int color = 0;
	if (mbtn & 1)
		color |= 0xff0000;
	if (mbtn & 2)
		color |= 0x00ff00;
	if (mbtn & 4)
		color |= 0x0000ff;
	fillRect(offScreen, 0, 0, Window.resx, Window.resy, color);
}

Gui.setMouseHandler(mouseCB);
Gui.setDrawCallback(drawCB);

}

static if (test == -2) {	// zoomSurf / tileSurf
gxSurf image = gxSurf("media/images/dino-blue.jpg");
gxSurf bgImg = gxSurf("media/images/nol.bmp");

void mouseCB(int btn, int x, int y) {
	if (reDraw = btn) {
		roi = gxRect(0, 0, x, y);
	}
}
void drawCB() {
	define filter = 1;

	if (reDraw == 1) {
		tileSurf(offScreen, 0, 0, bgImg, null);
		zoomSurf(offScreen, &roi, image, null, filter);
	}
	else if (reDraw == 2) {
		zoomSurf(offScreen, null, image, &roi, filter);
	}
	else if (reDraw >= 4) {
		tileSurf(offScreen, 0, 0, image, &roi);
	}
	reDraw = 0;
}

Gui.setMouseHandler(mouseCB);
Gui.setDrawCallback(drawCB);
//~ reDraw = 0;
}
static if (test == 2) {		// zoomSurf / tileSurf
gxSurf image = gxSurf("media/images/dino-blue.jpg");		// xxx
//~ gxSurf image = gxSurf("media/images/download.jpg");
//~ gxSurf image = gxSurf("media/images/David.png");
gxSurf bgImg = gxSurf("media/images/nol.bmp");

void drawCB() {
	define filter = 1;

	//~ reDraw = 67;
	if (reDraw == 1) {
		tileSurf(offScreen, 0, 0, bgImg, null);
		zoomSurf(offScreen, &roi, image, null, filter);
	}
	else if (reDraw == 2) {
		zoomSurf(offScreen, &roi, image, null, filter);
	}
	else if (reDraw >= 4) {
		tileSurf(offScreen, 0, 0, image, &roi);
	}
	//~ reDraw = 1;
	// */
}

Gui.setMouseHandler(mouseMoveSizeRoi);
Gui.setDrawCallback(drawCB);
}

static if (test == 3) {		// fillRect, drawRect, fillOval, drawOval

gxSurf bgImg = gxSurf("media/images/nol.bmp");

void drawOval(gxSurf s, int x0, int y0, int x1, int y1, int size, long color) {
	if (size == 1) {
		drawOval(s, x0, y0, x1, y1, color);
	}
	else if (size < 0) {
		fillOval(s, x0, y0, x1, y1, color);
	}
	else {
		int dx;
		int dy;
		int sx;
		int sy;
		int r;
		if (x0 > x1) {
			int tmp = x0;
			x0 = x1;
			x1 = tmp;
		}
		if (y0 > y1) {
			int tmp = y0;
			y0 = y1;
			y1 = tmp;
		}

		dx = x1 - x0;
		dy = y1 - y0;

		x1 = x0 += dx >> 1;
		x0 += dx & 1;

		dx += dx & 1;
		dy += dy & 1;

		//~ int step = 2;//size / 2;
		sx = dx * dx;
		sy = dy * dy;

		r = sx * dy >> 2;
		dx = 0;
		dy = r << 1;
		int sdiv2 = size / 2;
		int sdivstep = sdiv2 / 3;
		//~ define pixels(gxSurf s, int &x, int &y, int &sdiv2, int c) = fillRect(s, x-sdiv2, y-sdiv2, x+sdiv2, y+sdiv2, c);
		define pixels(gxSurf s, int &x, int &y, int &sdiv2, int c) = fillOval(s, x-sdiv2, y-sdiv2, x+sdiv2, y+sdiv2, c);
		for (int n = 0; y0 < y1; n += 1) {
			define step = 1;

			if (n % sdivstep == 0) {
				pixels(s, x0, y0, sdiv2, color);
				pixels(s, x0, y1, sdiv2, color);
				pixels(s, x1, y0, sdiv2, color);
				pixels(s, x1, y1, sdiv2, color);
			}

			if (r >= 0) {
				x0 -= step;
				x1 += step;
				r -= dx += sy;
			}

			if (r < 0) {
				y0 += step;
				y1 -= step;
				r += dy -= sx;
			}
		}
		pixels(s, x0, y0, sdiv2, color);
		pixels(s, x0, y1, sdiv2, color);
		pixels(s, x1, y0, sdiv2, color);
		pixels(s, x1, y1, sdiv2, color);
	}
}

void drawLine2(gxSurf s, int x0, int y0, int x1, int y1, long color) {
	drawLine(s, x0, y0, x1, y1, color);
}

void drawCB() {
	define color = 0xff00ff;
	tileSurf(offScreen, 0, 0, bgImg, null);

	drawLine2(offScreen, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, color);
	//~ drawOval(offScreen, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, 30, color);
	//~ fillOval(offScreen, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, color);
	//~ drawOval(offScreen, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, color);
	//~ fillRect(offScreen, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, color);
	//~ drawRect(offScreen, roi.x, roi.y, roi.x + roi.w, roi.y + roi.h, color);
}

Gui.setMouseHandler(mouseMoveSizeRoi);
Gui.setDrawCallback(drawCB);
}

static if (test == 4) {		// copy surface with callback

gxSurf back = gxSurf(Window.resx, Window.resy);
gxSurf mand = gxSurf(Window.resx, Window.resy);
//~ gxSurf back = gxSurf("media/images/download.jpg");

void drawCB() {
	int rgbMax(int dst, int src) {
		define op(int a, int b) = Math.max(a, b);
		int r = op(rch(dst), rch(src));
		int g = op(gch(dst), gch(src));
		int b = op(bch(dst), bch(src));
		result = __rgb(r, g, b);
		//~ result = dst & src;
	}
	int rgbOp(int dst, int src) = rgbMul;

	copySurf(offScreen, 0, 0, back, null);
	copySurfrgb(offScreen, roi.x, roi.y, mand, &roi, rgbOp);
	//~ copySurfrgb(offScreen, roi.x, roi.y, mand, &roi, new int(int dst, int src) {result = dst ^ src;});
	//~ Gui.Repaint();
}

Gui.setMouseHandler(mouseMoveSizeRoi);
Gui.setDrawCallback(drawCB);

Mandel(mand, &mandelLut, QMin, QMax, PMin, PMax);
//~ evalSurfrgb(mand, null, rgbAdd);
evalSurfrgb(back, null, rgbXor);
}

void keyCB(int btn, int ext) {
	if (btn == 27) {
		Gui.exitLoop();
	}
	print("state[%d]: ", ext);
	print("button: `%d`\n", btn);
}

Gui.setKeyboardHandler(keyCB);

//~ define res = 20000;
//~ bmpWrite(Mandel(gxSurf(res, res), mandelLut, QMin, QMax, PMin, PMax), "Mandel.bmp");
//~ Gui.exitLoop();
