enum Window {
	draw = RenderMode.swap_buff;
	resx = 700;
	resy = 500;
	padding = 5;
}

struct Biorithm {
	int color;
	int period;
	int period2;
	string name;
}

const Biorithm biorithms[] = {
	Biorithm(0x5050ff, 23,  0, "Physical - Fizikai %d%%"),
	Biorithm(0xff0000, 28,  0, "Emotional - Erzelmi %d%%"),
	Biorithm(0x00ff00, 33,  0, "Intellectual - Szellemi %d%%"),
	Biorithm(0xdadada, 38,  0, "Intuitive - Megerzes %d%%"),
	Biorithm(0x6f6f6f, 23, 33, "Mastery - Iranyitas %d%%"),
	Biorithm(0xfeab00, 23, 28, "Passion - Szenvedely %d%%"),
	Biorithm(0x9466db, 28, 33, "Wisdom - Bolcsesseg %d%%")
};

int format(char output[], int pos, FormatFlags &flags, uint32 value) {
	static const char digits[] = "0123456789abcdefghijklmnopqrstuvwxyz";

	int rad = flags.radix;
	assert(rad > 0 && rad < digits.length);

	char temp[80];
	int end = temp.length;
	//~ string digits = "0123456789abcdefghijklmnopqrstuvwxyz";

	temp[end -= 1] = 0;
	for ( ; value > 0; value /= rad) {
		temp[end -= 1] = digits[value % rad];
	}
	if (temp[end] == 0) {
		temp[end -= 1] = '0';
	}

	//~ width -= len;
	//~ if (i < 0) width--;
	//~ if (fill == '0' && i < 0) count_kputc('-');
	//~ if (adjust == RIGHT) {
		//~ while (width > 0) { count_kputc(fill); width--; }
	//~ }
	//~ if (fill == ' ' && i < 0) count_kputc('-');
	//~ while (len > 0) { count_kputc((unsigned char) *p++); len--; }
	//~ while (width > 0) { count_kputc(fill); width--; }

	//~ int sgnChr;	// should be one of: 0, '-', '+'
	//~ int padChr;	// padding character: 0, '0'
	//~ int padLen;	// padding length
	//~ int maxLen;	// maximum length
	//~ int fmtChr; // format char
	int strLen = temp.length - end;
	int padLen = flags.padLen;

	/*if (sgnChr != 0) {
		padLen -= 1;
	}*/

	int max = pos + padLen - strLen + 1;
	if (max > output.length) {
		max = output.length - 1;
	}
	for (; pos < max; pos += 1) {
		output[pos] = flags.padChr;
	}

	max = pos + strLen;
	if (max > output.length) {
		max = output.length - 1;
	}

	for (; pos < max; pos += 1) {
		output[pos] = temp[end];
		end += 1;
	}
	return pos - 1;
}

void format(char output[], string format, Date value) {
	int y;
	int m;
	int d;

	Date.ToParts(value.days, &y, &m, &d);

	if (format == null) {
		format = "%04y.%02m.%02d";
	}

	int pos = 0;
	int spos = 0;
	for (int chr; chr = format[spos]; spos += 1) {
		if (chr != '%') {
			if (pos < output.length) {
				output[pos] = chr;
				pos += 1;
			}
			continue;
		}

		//~ print("pos : %d\n", pos);
		chr = format[spos += 1];
		int sgnChr = 0;
		if (chr == '-' || chr == '+') {
			sgnChr = chr;
			chr = format[spos += 1];
		}

		int padChr = ' ';
		if (chr == '0') {
			padChr = chr;
			chr = format[spos += 1];
		}

		int padLen = 0;
		for (;chr >= '0' && chr <= '9';) {
			padLen = padLen * 10 + chr - '0';
			chr = format[spos += 1];
		}

		int maxLen = 10;
		if (chr == '.') {
			maxLen = 0;
			chr = format[spos += 1];
			for (;chr >= '0' && chr <= '9';) {
				maxLen = maxLen * 10 + chr - '0';
				chr = format[spos += 1];
			}
		}

		if (chr == 'y') {
			uint32 val = y;
			if (y < 0) {
				val = -val;
				sgnChr = '-';
			}
			FormatFlags flags = FormatFlags(sgnChr, padChr, padLen, maxLen, chr, 10);
			pos = format(output, pos, &flags, val);
			//~ continue;
		}
		else if (chr == 'm') {
			uint32 val = m;
			if (y < 0) {
				val = -val;
				sgnChr = '-';
			}
			FormatFlags flags = FormatFlags(sgnChr, padChr, padLen, maxLen, chr, 10);
			pos = format(output, pos, &flags, val);
			//~ continue;
		}
		else if (chr == 'd') {
			uint32 val = d;
			if (y < 0) {
				val = -val;
				sgnChr = '-';
			}
			FormatFlags flags = FormatFlags(sgnChr, padChr, padLen, maxLen, chr, 10);
			pos = format(output, pos, &flags, val);
			//~ continue;
		}
	}
}
//~ */

void biorithm(gxSurf dst, int daysToShow, double now, Date birth, Biorithm biorithms[]) {

	static void drawGraph(gxSurf dst, Biorithm &br, int daysToShow, double now, Date birth, int labelposY) {
		double lx;
		double ly;
		double days = now - birth.days;
		double precent = 0;

		define precision = 4;
		if (br.period2) {
			double p1 = br.period;
			double p2 = br.period2;
			for (int i = 0; i <= 2. * precision * daysToShow; i += 1) {
				double t = days + (double(i) / precision) - daysToShow;
				double x = Window.resx * (i / (2. * precision * daysToShow));
				double y1 = Window.resy * (1 - sin(t % p1 / p1 * 2 * Math.pi)) / 2;
				double y2 = Window.resy * (1 - sin(t % p2 / p2 * 2 * Math.pi)) / 2;
				double y = (y1 + y2) / 2;

				if (i > 0) {
					drawLine(dst, lx, ly, x, y, br.color);
					if (i == precision * daysToShow) {
						precent = 100 - y * 200. / Window.resy;
					}
				}
				lx = x;
				ly = y;
			}
		}
		else {
			double p1 = br.period;
			for (int i = 0; i <= 2. * precision * daysToShow; i += 1) {
				double t = days + (double(i) / precision) - daysToShow;
				double x = Window.resx * (i / (2. * precision * daysToShow));
				double y = Window.resy * (1 - sin(2 * Math.pi * t / p1)) / 2;
				if (i > 0) {
					drawLine(dst, lx, ly, x, y, br.color);
					if (i == precision * daysToShow) {
						precent = 100 - y * 200. / Window.resy;
					}
				}
				lx = x;
				ly = y;
			}
		}
		if (labelposY >= 0) {
			char text[256] = {0};
			itoa(text, br.name, precent);
			//~ format(text, br.name, )
			drawText(dst, Window.padding, labelposY, string(text), br.color);
		}
	}

	define textSpacing = 16;
	int textPosition = Window.resy - Window.padding - textSpacing * (biorithms.length + 1);

	// clear screen
	fillRect(dst, 0, 0, 32768, 32768, 0x000000);

	// day lines
	for (int i = 1; i <= 2 * daysToShow; i += 1) {
		double time = Window.resx * (i / (2. * daysToShow)) - (now % 1 * (double(Window.resx) / daysToShow / 2));
		drawLine(dst, time, 0, time, Window.resy, 0x282828);
	}// */

	// draw graphs & labels
	for (int i = 0; i < biorithms.length; i += 1) {
		if (biorithms[i].color == 0)
			continue;
		textPosition += textSpacing;
		drawGraph(dst, biorithms[i], daysToShow, now, birth, textPosition);
	}

	// coordinate
	drawLine(dst, 0, Window.resy / 2, Window.resx, Window.resy / 2, 0x989898);
	drawLine(dst, Window.resx / 2, 0, Window.resx / 2, Window.resy, 0x989898);

	uint8 text[128];
	format(text, "Date: %04y.%02m.%02d", Date(int64(now)));
	drawText(dst, Window.padding, Window.padding, emit(string, ref(text)), -1);

	format(text, "Birth: %04y.%02m.%02d", birth);
	drawText(dst, Window.padding, Window.padding + textSpacing, emit(string, ref(text)), -1);
	//~ itoa(emit(string, ref(text)), int32(now));
	//~ drawText(dst, Window.padding, Window.padding + textSpacing, emit(string, ref(text)), -1);

}

void setupBiorithm(int _daysToShow, Date _now, Date _birth) {

	static int64 pos;
	static Date now;
	static Date birth;
	static int daysToShow;
	static bool reDraw = true;

	define inertial_pan = 3000.;
	define inertial_speed = 1.05;

	static int64 inertial_time = 0;
	static double inertial_pan_x = 0;
	static double inertial_pan_y = 0;

	void DrawScreen() {
		if (reDraw) {
			double nowPos = now.days + double(pos * daysToShow) / (Window.resx / 2);
			biorithm(offScreen, daysToShow, nowPos, birth, biorithms);
			reDraw = false;
		}
		static if (inertial_pan) {
			int64 now = timeNow();
			if (inertial_time < now) {
				inertial_pan_x = Math.clamp(inertial_pan_x, -inertial_pan, inertial_pan) / inertial_speed;
				inertial_pan_y = Math.clamp(inertial_pan_y, -inertial_pan, inertial_pan) / inertial_speed;

				if ((Math.abs(inertial_pan_x) > .5) || (Math.abs(inertial_pan_y) > .5)) {
					pos += inertial_pan_x;
					reDraw = true;
				}
				inertial_time = now + (int64(0x100000000) / 100);
			}
			if ((Math.abs(inertial_pan_x) > .5) || (Math.abs(inertial_pan_y) > .5)) {
				Gui.Repaint();
			}
		}
	}

	void mouseHandler(int btn, int x, int y) {
		static int ox = 0;
		static int oy = 0;
		static int ob = 0;

		if (Mouse.dblClick(btn, x, y)) {
			Mouse.dblClick(-1, 0, 0);		// prevent multi clicks
			reDraw = true;
			pos = 0;
		}

		if (btn == 1) {
			pos += ox - x;
			//~ roi.x = Math.clamp(roi.x + ox - x, 0, width(img) - roi.w);
			//~ roi.y = Math.clamp(roi.y + oy - y, 0, height(img) - roi.h);
			reDraw = true;
		}
		static if (inertial_pan) {
			static int64 ot = 0;
			static int32 oox = 0;
			static int32 ooy = 0;
			if (btn == 1 && ob == 0) {	// on press
				ot = timeNow();
				inertial_pan_x = 0;
				inertial_pan_y = 0;
				oox = x;
				ooy = y;
			}
			if (btn == 0 && ob == 1) {	// on relase
				int64 now = timeNow();
				if (clocksPerSec(now - ot) < .5) {
					inertial_time = 0;
					inertial_pan_x = oox - x;
					inertial_pan_y = ooy - y;
					oox = x;
					ooy = y;
				}
			}
		}

		ox = x;
		oy = y;
		ob = btn;
	}

	pos = 0;
	now = _now;
	birth = _birth;
	daysToShow = _daysToShow;
	Gui.setDrawCallback(DrawScreen);
	Gui.setMouseHandler(mouseHandler);
}

//~ Date Now = Date(2012, 11, 10);

Date Now = DateFromTime(time());
define daysToShow = 15;

//~ Now.days = 6103462;		// 16711.09.19

setupBiorithm(daysToShow, Now, Date(1983, 5, 2));
//~ setupBiorithm(daysToShow, Now, Date(1984, 8, 30));
