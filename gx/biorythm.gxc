// biorithm calculator
enum Window {
	draw = RenderMode.swap_buff;
	resx = 320;
	resy = 200;
	padding = 5;
}

struct Biorithm {
	int color;
	int period;
	int period2;
	string label;
}

const Biorithm biorithms[] = {
	Biorithm(0x5050ff, 23,  0, "Physical - Fizikai %d%%"),
	Biorithm(0xff0000, 28,  0, "Emotional - Erzelmi %d%%"),
	Biorithm(0x00ff00, 33,  0, "Intellectual - Szellemi %d%%"),
	Biorithm(0xdadada, 38,  0, "Intuitive - Megerzes %d%%"),
	Biorithm(0x6f6f6f, 23, 33, "Mastery - Iranyitas %d%%"),
	Biorithm(0xfeab00, 23, 28, "Passion - Szenvedely %d%%"),
	Biorithm(0x9466db, 28, 33, "Wisdom - Bolcsesseg %d%%")
};

void drawBiorithm(gxSurf dst, int daysToShow, double now, Date birth, Biorithm biorithms[]) {

	static void drawGraph(gxSurf dst, Biorithm &br, int daysToShow, double now, Date birth, int labelposY) {
		double lx;
		double ly;
		double days = now - birth.days;
		double precent = 0;

		define precision = 4;
		if (br.period2) {
			double p1 = br.period;
			double p2 = br.period2;
			for (int i = 0; i <= 2. * precision * daysToShow; i += 1) {
				double t = days + (double(i) / precision) - daysToShow;
				double x = Window.resx * (i / (2. * precision * daysToShow));
				double y1 = Window.resy * (1 - sin(t % p1 / p1 * 2 * Math.pi)) / 2;
				double y2 = Window.resy * (1 - sin(t % p2 / p2 * 2 * Math.pi)) / 2;
				double y = (y1 + y2) / 2;

				if (i > 0) {
					drawLine(dst, lx, ly, x, y, br.color);
					if (i == precision * daysToShow) {
						precent = 100 - y * 200. / Window.resy;
					}
				}
				lx = x;
				ly = y;
			}
		}
		else {
			double p1 = br.period;
			for (int i = 0; i <= 2. * precision * daysToShow; i += 1) {
				double t = days + (double(i) / precision) - daysToShow;
				double x = Window.resx * (i / (2. * precision * daysToShow));
				double y = Window.resy * (1 - sin(2 * Math.pi * t / p1)) / 2;
				if (i > 0) {
					drawLine(dst, lx, ly, x, y, br.color);
					if (i == precision * daysToShow) {
						precent = 100 - y * 200. / Window.resy;
					}
				}
				lx = x;
				ly = y;
			}
		}
		if (labelposY >= 0) {
			char text[256] = {0};
			format(text, br.label, precent);
			drawText(dst, Window.padding, labelposY, string(text), br.color);
		}
	}

	define textSpacing = 16;
	int textPosition = Window.resy - Window.padding - textSpacing * (biorithms.length + 1);

	// clear screen
	fillRect(dst, 0, 0, 32768, 32768, 0x000000);

	// day lines
	for (int i = 1; i <= 2 * daysToShow; i += 1) {
		double time = Window.resx * (i / (2. * daysToShow)) - (now % 1 * (double(Window.resx) / daysToShow / 2));
		drawLine(dst, time, 0, time, Window.resy, 0x282828);
	}

	// draw graphs & labels
	for (int i = 0; i < biorithms.length; i += 1) {
		if (biorithms[i].color == 0)
			continue;
		textPosition += textSpacing;
		drawGraph(dst, biorithms[i], daysToShow, now, birth, textPosition);
	}

	// coordinate
	drawLine(dst, 0, Window.resy / 2, Window.resx, Window.resy / 2, 0x989898);
	drawLine(dst, Window.resx / 2, 0, Window.resx / 2, Window.resy, 0x989898);

	char text[128];
	format(text, "Date: %04y.%02m.%02d", Date(int64(now)));
	drawText(dst, Window.padding, Window.padding, string(text), -1);

	format(text, "Birth: %04y.%02m.%02d", birth);
	drawText(dst, Window.padding, Window.padding + textSpacing, string(text), -1);
}

void setupBiorithm(int _daysToShow, Date _now, Date _birth) {
	static int64 pos;
	static Date now;
	static Date birth;
	static int daysToShow;
	static bool reDraw = true;

	define inertial_pan = 30.;
	define inertial_speed = 1.01;
	static int64 inertial_time = 0;
	static double inertial_pan_x = 0;
	static double inertial_pan_y = 0;

	void onDrawScreen() {
		if (reDraw) {
			double nowPos = now.days + double(pos * daysToShow) / (Window.resx / 2);
			drawBiorithm(offScreen, daysToShow, nowPos, birth, biorithms);
			reDraw = false;
		}
		static if (inertial_pan) {
			int64 now = millis();
			if (inertial_time < now) {
				inertial_pan_x = Math.clamp(inertial_pan_x, -inertial_pan, inertial_pan) / inertial_speed;
				inertial_pan_y = Math.clamp(inertial_pan_y, -inertial_pan, inertial_pan) / inertial_speed;

				if ((Math.abs(inertial_pan_x) > 0) || (Math.abs(inertial_pan_y) > 0)) {
					pos += inertial_pan_x / 4.;
					reDraw = true;
				}
				inertial_time = now;
			}
			if ((Math.abs(inertial_pan_x) > .5) || (Math.abs(inertial_pan_y) > .5)) {
				Gui.Repaint();
			}
		}
	}

	void onMouseAction(int btn, int x, int y) {
		static int ox = 0;
		static int oy = 0;
		static int ob = 0;

		if (Mouse.dblClick(btn, x, y)) {
			Mouse.dblClick(-1, 0, 0);		// prevent multi clicks
			reDraw = true;
			pos = 0;
		}

		if (btn == 1) {
			pos += ox - x;
			//~ roi.x = Math.clamp(roi.x + ox - x, 0, width(img) - roi.w);
			//~ roi.y = Math.clamp(roi.y + oy - y, 0, height(img) - roi.h);
			reDraw = true;
		}
		static if (inertial_pan) {
			static int64 ot = 0;
			static int32 oox = 0;
			static int32 ooy = 0;
			if (btn == 1 && ob == 0) {	// on press
				ot = millis();
				inertial_pan_x = 0;
				inertial_pan_y = 0;
				oox = x;
				ooy = y;
			}
			if (btn == 0 && ob == 1) {	// on relase
				int64 now = millis();
				if (now - ot < 500) {
					inertial_time = 0;
					inertial_pan_x = oox - x;
					inertial_pan_y = ooy - y;
					oox = x;
					ooy = y;
				}
			}
		}

		ox = x;
		oy = y;
		ob = btn;
	}

	// set callbacks and initialize static variables
	Gui.setDrawCallback(onDrawScreen);
	Gui.setMouseHandler(onMouseAction);
	daysToShow = _daysToShow;
	birth = _birth;
	now = _now;
	pos = 0;
}

//~ Date Now = Date(2012, 11, 10);
Date Now = DateFromTime(time());
define daysToShow = 15;

//~ setupBiorithm(daysToShow, Now, Date(1984, 8, 30));
setupBiorithm(daysToShow, Now, Date(1983, 5,  2));

println(millis());
