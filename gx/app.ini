[help]
key('*') : default object size
key('+') : increase object size
key('-') : decrease object size
key('O') : move camera to (0, 0, 0);

key('w', 'W') : move camera forward
key('s', 'S') : move camera back
key('a', 'A') : move camera left
key('d', 'D') : move camera right
key(' ', 'c') : move camera up / down

key('\t') : next draw mode (none, plot, wire, fill)
key('/', '?') : next/prev cull mode

key('`') : toggle show info
key('L') : toggle show Lights
key('b') : toggle show bounding box
key('n') : toggle show normals

key('t') : toggle use texture
key('l') : toggle use Lights

key('Z') : toggle display Zbuff

key('N') : toggle save mesh normals
key('T') : toggle save mesh texture

key('~') : deselect all
key('0' - '9') : select Light
key('.') : select next vertex
key('>') : select prev vertex

key(Ctrl + 'p') : save image as "mesh.bmp"
key(Ctrl + 's') : save mesh as "mesh.obj"
key(Ctrl + '\n') : reload ini (this file)

[main]

screen.font = media/fonts/antique.fnt
screen.width = 512
screen.height = 512

#~ frustum.far = 100
#~ frustum.near = .25
#~ frustum.fovy = 2.5
frustum.far = 100
frustum.near = 1
frustum.fovy = 30

#~ screen.aspect=3/4

#~ speed = .1

# standard library script
script.stdlib = ../stdlib.cvx
script.gfxlib = media/scripts/gfxlib.cvx
#~ script.logfile = out/errors.txt
script.dumpfile = out/dump.txt

# if program argumen is of extension:
open.jpg = media/scripts/imageView.cvx
open.png = media/scripts/imageView.cvx
open.bmp = media/scripts/imageView.cvx

open.obj = media/scripts/modelView.cvx
open.3ds = media/scripts/modelView.cvx

#~ epsilon = 1e-13

[object]
#~ if no argument is given, this mesh will be loaded
#~ object can be a section containing script code or a file

#~ material = mtl.Metal Red
material = mtl.Dash
#~ texture = media/images/Earth.jpg
texture = media/images/download.jpg

#~ object = media/meshes/teapot.obj
#~ object = media/meshes/dolphins.obj
object = obj.tear drop
#~ object = obj.apple2

light.obj = obj.Sphere
#~ light.dir.obj = obj.lightDir
#~ light.spot.obj = obj.lightSpot

object.size = 1.
normal.size = .2
lights.size = .1
#~ object = media/meshes/ut2k4/scorpion.obj
#~ texture = media/meshes/ut2k4/scorpion.jpg

[.object]

#~ object = media/meshes/ut2k4/scorpion.obj
#~ texture = media/meshes/ut2k4/scorpion.jpg
#material = media/meshes/ut2k4/scorpion.mtl

#~ object = media/meshes/ut2k4/raptor.obj
#~ texture = media/meshes/ut2k4/raptor.jpg

#~ object = media/meshes/ut2k4/manta.obj
#~ texture = media/meshes/ut2k4/manta.jpg

#~ object = media/meshes/ut2k4/levin.obj
#~ texture = media/meshes/ut2k4/levin.jpg

#~ object = media/meshes/ut2k4/hell.obj
#~ texture = media/meshes/ut2k4/hell.jpg

#~ object = media/meshes/ut2k4/FlackCannon.obj
#~ texture = media/meshes/ut2k4/FlackCannon.png


[= Lights ---------------------------------------------------------------------]
[light]
#~ there are 4 preconfigured from maximum of 32 lights
#~ evry light section turns on a light

#~ directional := dot(dir, dir) != 0;
#~ spot := directional && spot.Exp != 0;
#~ point := !directional
off
Ka = .1
Kd = .4
Ks = .4
#~ , 1, 1

#~ pos = 0 0 1
#~ dir = 0 1 0
attn = .5, 0, 0, 0
#~ spot = 23

[light]
[light]
[light]

[= Materials ------------------------------------------------------------------]
[mtl.Steel]
Ka = 0.725490, 0.725490, 0.725490
Kd = 0.725490, 0.725490, 0.725490
Ks = 0.898039, 0.898039, 0.898039
KS = 16

[mtl.Dash]
Ka = 0.588235, 0.588235, 0.588235
Kd = 0.588235, 0.588235, 0.588235
Ks = 0.898039, 0.898039, 0.898039
KS = 64

[mtl.Metal Red]
Ka = 0.486275, 0.058824, 0.000000
Kd = 0.486275, 0.058824, 0.000000
Ks = 0.898039, 0.898039, 0.898039
KS = 64

[mtl.Red]
Ka = 1, 0, 0
Kd = 1, .3, .3
Ks = 1, .2, .2
KS = 64

[= Parametric functions -------------------------------------------------------]
[obj.Sphere]
const smin = -pi / 2;
const smax = +pi / 2;
const tmax = 2 * pi;
x = cos(s) * cos(t);
y = cos(s) * sin(t);
z = -sin(s);

[obj.Light.Spot]
const c = 0;
const smin = -pi;
const smax = +pi;
const tmin = -pi / 2;
const tmax = +pi / 2;
x = (c - cos(t)) * cos(s);
y = (c - cos(t)) * sin(s);
z = sin(t) + cos(t);

[obj.limpet torus]
#~ const division = 512;
const smax = 2 * pi;
const tmax = 2 * pi;
const sqrt2 = 1.4142135623730950488016887;
x = cos(s) / (sqrt2 + sin(t));
y = sin(s) / (sqrt2 + sin(t));
z = -1. / (sqrt2 + cos(t));

[obj.elliptic torus]
const c = 1.5;
const smin = -pi;
const smax = +pi;
const tmin = -pi;
const tmax = +pi;
x = (-c + cos(t)) * cos(s);
y = (-c + cos(t)) * sin(s);
z = -sin(t) + cos(t);

[obj.tear drop]
#~ const division = 2000;
const smax = pi;
const tmax = 2 * pi;
x = .5 * (1 - cos(s)) * sin(s) * cos(t);
y = .5 * (1 - cos(s)) * sin(s) * sin(t);
z = cos(s);

[obj.wave]
#~ const division = 256;
const H = 20.;
const h = 10.;
const smin = -H;
const smax = +H;
const tmin = -H;
const tmax = +H;
double sst = sqrt(s*s + t*t);
x = s / H;
y = t / H;
z = h / H * sin(sst) / sst;

[obj.tours]
const R = 4;
const r = 1;

const smax = 2 * pi;
const tmax = 2 * pi;

x = (R + r * sin(s)) * cos(t);
y = (R + r * sin(s)) * sin(t);
z = r * cos(s);

[obj.3d supershape]
#~ const division = 256;
const m = 5;
const a = 1;
const b = 1;
const n1 = .1;
const n2 = 1.7;
const n3 = 1.7;

const smin = -pi;
const smax = +pi;
const tmin = -pi / 2;
const tmax = +pi / 2;

define r(double O) = pow(pow(abs(cos(m * O / 4.) / a), n2) + pow(abs(sin(m * O / 4.) / b), n3), 1. / n1);
double r1 = r(s);
double r2 = r(t);

x = r1 * cos(s) * r2 * cos(t);
y = r1 * sin(s) * r2 * cos(t);
z = r2 * sin(t);

[obj.apple2]
#~ const division = 128;
const tmin = -pi;
const tmax = +pi;
const smax = 2 * pi;

x = cos(s) * (4 + 3.8 * cos(t));
y = sin(s) * (4 + 3.8 * cos(t));
z = (cos(t) + sin(t) - 1) * (1 + sin(t)) * log(1 - pi * t / 10) + 7.5 * sin(t);

#~ 0 <= s <= 2 pi, -pi <= v <= pi

[obj.apple]
const division = 128;
const tmin = -pi;
const tmax = +pi;
const smax = 2 * pi;

const R1 = 4;
const R2 = 3.8;

#declare Fx = function(u,v){cos(u)*(R1 + R2*cos(v)) + pow((v/pi),100)}
#declare Fy = function(u,v){sin(u)*(R1 + R2*cos(v)) + 0.25*cos(5*u)}
#declare Fz = function(u,v){-2.3*ln(1 - v*0.3157)  + 6*sin(v) +2*cos(v)}
x = cos(s) * (R1 + R2 * cos(t)) + pow((t / pi), 100);
y = sin(s) * (R1 + R2 * cos(t)) + .25 * cos(5 * s);
z = -2.3 * log(1 - t * 0.3157) + 6 * sin(t) + 2 * cos(t);

[obj.Shell]
const sdiv = 128;
const tdiv = 32;
const N = 5;
const H = 3;
const tmin = -pi;
const tmax = +pi;
const smax = 2 * pi;

double W = s / (2 * pi);
x = W * cos(N * s) * (1 + cos(t));
y = W * sin(N * s) * (1 + cos(t));
z = W * sin(t) + H * (W * W);

[obj.what]
#~ const division = 128;
#~ x = s; y = t;
z = pow(s-t, 2) / 2;

[obj.hearth]
#-pi <= theta <= pi
const tmin = -pi;
const tmax = +pi;

#-0.98 <= z <= 0.98,
#~ const smin = -0.98;
#~ const smax = +0.98;
const smin = -1;
const smax = +1;

double r = 4 * sqrt(1 - s * s) * pow(sin(abs(t)), abs(t));
x = r * sin(t);
y = r * cos(t);
z = s;

