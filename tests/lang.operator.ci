
inline a = 96.3;
inline b = 42.14;
int32 shift = 2;

int8 i8A = a;
int8 i8B = b;
int8 i8Pls = +i8B;
int8 i8Neg = -i8B;
int8 i8Cmt = ~i8B;
int8 i8Add = i8A + i8B;
int8 i8Sub = i8A - i8B;
int8 i8Mul = i8A * i8B;
int8 i8Div = i8A / i8B;
int8 i8Mod = i8A % i8B;
int8 i8And = i8A & i8B;
int8 i8Ior = i8A | i8B;
int8 i8Xor = i8A ^ i8B;
int8 i8Shl = i8A << shift;
int8 i8Shr = i8A >> shift;
bool i8Not = !i8B;
bool i8Ceq = i8A == i8B;
bool i8Cne = i8A != i8B;
bool i8Clt = i8A <  i8B;
bool i8Cle = i8A <= i8B;
bool i8Cgt = i8A >  i8B;
bool i8Cge = i8A >= i8B;

uint8 u8A = a;
uint8 u8B = b;
uint8 u8Pls = +u8B;
uint8 u8Neg = -u8B;
uint8 u8Cmt = ~u8B;
uint8 u8Add = u8A + u8B;
uint8 u8Sub = u8A - u8B;
uint8 u8Mul = u8A * u8B;
uint8 u8Div = u8A / u8B;
uint8 u8Mod = u8A % u8B;
uint8 u8And = u8A & u8B;
uint8 u8Ior = u8A | u8B;
uint8 u8Xor = u8A ^ u8B;
uint8 u8Shl = u8A << shift;
uint8 u8Shr = u8A >> shift;
bool u8Not = !u8B;
bool u8Ceq = u8A == u8B;
bool u8Cne = u8A != u8B;
bool u8Clt = u8A <  u8B;
bool u8Cle = u8A <= u8B;
bool u8Cgt = u8A >  u8B;
bool u8Cge = u8A >= u8B;

int16 i16A = a;
int16 i16B = b;
int16 i16Pls = +i16B;
int16 i16Neg = -i16B;
int16 i16Cmt = ~i16B;
int16 i16Add = i16A + i16B;
int16 i16Sub = i16A - i16B;
int16 i16Mul = i16A * i16B;
int16 i16Div = i16A / i16B;
int16 i16Mod = i16A % i16B;
int16 i16And = i16A & i16B;
int16 i16Ior = i16A | i16B;
int16 i16Xor = i16A ^ i16B;
int16 i16Shl = i16A << shift;
int16 i16Shr = i16A >> shift;
bool i16Not = !i16B;
bool i16Ceq = i16A == i16B;
bool i16Cne = i16A != i16B;
bool i16Clt = i16A <  i16B;
bool i16Cle = i16A <= i16B;
bool i16Cgt = i16A >  i16B;
bool i16Cge = i16A >= i16B;

uint16 u16A = a;
uint16 u16B = b;
uint16 u16Pls = +u16B;
uint16 u16Neg = -u16B;
uint16 u16Cmt = ~u16B;
uint16 u16Add = u16A + u16B;
uint16 u16Sub = u16A - u16B;
uint16 u16Mul = u16A * u16B;
uint16 u16Div = u16A / u16B;
uint16 u16Mod = u16A % u16B;
uint16 u16And = u16A & u16B;
uint16 u16Ior = u16A | u16B;
uint16 u16Xor = u16A ^ u16B;
uint16 u16Shl = u16A << shift;
uint16 u16Shr = u16A >> shift;
bool u16Not = !u16B;
bool u16Ceq = u16A == u16B;
bool u16Cne = u16A != u16B;
bool u16Clt = u16A <  u16B;
bool u16Cle = u16A <= u16B;
bool u16Cgt = u16A >  u16B;
bool u16Cge = u16A >= u16B;

int32 i32A = a;
int32 i32B = b;
int32 i32Pls = +i32B;
int32 i32Neg = -i32B;
int32 i32Cmt = ~i32B;
int32 i32Add = i32A + i32B;
int32 i32Sub = i32A - i32B;
int32 i32Mul = i32A * i32B;
int32 i32Div = i32A / i32B;
int32 i32Mod = i32A % i32B;
int32 i32And = i32A & i32B;
int32 i32Ior = i32A | i32B;
int32 i32Xor = i32A ^ i32B;
int32 i32Shl = i32A << shift;
int32 i32Shr = i32A >> shift;
bool i32Not = !i32B;
bool i32Ceq = i32A == i32B;
bool i32Cne = i32A != i32B;
bool i32Clt = i32A <  i32B;
bool i32Cle = i32A <= i32B;
bool i32Cgt = i32A >  i32B;
bool i32Cge = i32A >= i32B;

uint32 u32A = a;
uint32 u32B = b;
uint32 u32Pls = +u32B;
uint32 u32Neg = -u32B;
uint32 u32Cmt = ~u32B;
uint32 u32Add = u32A + u32B;
uint32 u32Sub = u32A - u32B;
uint32 u32Mul = u32A * u32B;
uint32 u32Div = u32A / u32B;
uint32 u32Mod = u32A % u32B;
uint32 u32And = u32A & u32B;
uint32 u32Ior = u32A | u32B;
uint32 u32Xor = u32A ^ u32B;
uint32 u32Shl = u32A << shift;
uint32 u32Shr = u32A >> shift;
bool u32Not = !u32B;
bool u32Ceq = u32A == u32B;
bool u32Cne = u32A != u32B;
bool u32Clt = u32A <  u32B;
bool u32Cle = u32A <= u32B;
bool u32Cgt = u32A >  u32B;
bool u32Cge = u32A >= u32B;

int64 i64A = a;
int64 i64B = b;
int64 i64Pls = +i64B;
int64 i64Neg = -i64B;
int64 i64Cmt = ~i64B;
int64 i64Add = i64A + i64B;
int64 i64Sub = i64A - i64B;
int64 i64Mul = i64A * i64B;
int64 i64Div = i64A / i64B;
int64 i64Mod = i64A % i64B;
int64 i64And = i64A & i64B;
int64 i64Ior = i64A | i64B;
int64 i64Xor = i64A ^ i64B;
int64 i64Shl = i64A << shift;
int64 i64Shr = i64A >> shift;
bool i64Not = !i64B;
bool i64Ceq = i64A == i64B;
bool i64Cne = i64A != i64B;
bool i64Clt = i64A <  i64B;
bool i64Cle = i64A <= i64B;
bool i64Cgt = i64A >  i64B;
bool i64Cge = i64A >= i64B;

uint64 u64A = a;
uint64 u64B = b;
uint64 u64Pls = +u64B;
uint64 u64Neg = -u64B;
uint64 u64Cmt = ~u64B;
uint64 u64Add = u64A + u64B;
uint64 u64Sub = u64A - u64B;
uint64 u64Mul = u64A * u64B;
uint64 u64Div = u64A / u64B;
uint64 u64Mod = u64A % u64B;
uint64 u64And = u64A & u64B;
uint64 u64Ior = u64A | u64B;
uint64 u64Xor = u64A ^ u64B;
uint64 u64Shl = u64A << shift;
uint64 u64Shr = u64A >> shift;
bool u64Not = !u64B;
bool u64Ceq = u64A == u64B;
bool u64Cne = u64A != u64B;
bool u64Clt = u64A <  u64B;
bool u64Cle = u64A <= u64B;
bool u64Cgt = u64A >  u64B;
bool u64Cge = u64A >= u64B;

float32 f32A = a;
float32 f32B = b;
float32 f32Pls = +f32B;
float32 f32Neg = -f32B;
float32 f32Add = f32A + f32B;
float32 f32Sub = f32A - f32B;
float32 f32Mul = f32A * f32B;
float32 f32Div = f32A / f32B;
float32 f32Mod = f32A % f32B;
bool f32Not = !f32B;
bool f32Ceq = f32A == f32B;
bool f32Cne = f32A != f32B;
bool f32Clt = f32A <  f32B;
bool f32Cle = f32A <= f32B;
bool f32Cgt = f32A >  f32B;
bool f32Cge = f32A >= f32B;

float64 f64A = a;
float64 f64B = b;
float64 f64Pls = +f64B;
float64 f64Neg = -f64B;
float64 f64Add = f64A + f64B;
float64 f64Sub = f64A - f64B;
float64 f64Mul = f64A * f64B;
float64 f64Div = f64A / f64B;
float64 f64Mod = f64A % f64B;
bool f64Not = !f64B;
bool f64Ceq = f64A == f64B;
bool f64Cne = f64A != f64B;
bool f64Clt = f64A <  f64B;
bool f64Cle = f64A <= f64B;
bool f64Cgt = f64A >  f64B;
bool f64Cge = f64A >= f64B;

