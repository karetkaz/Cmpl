// Assign variable to reference, pointer and variant.
integer value = 33;
integer valueRef& = value;
pointer valuePtr = value;
variant valueVar = value;

integer copyVal = value;
integer copyRef& = valueRef;
pointer copyPtr = valuePtr;
variant copyVar = valueVar;
integer fromRef = valueRef;
integer fromPtr& = valuePtr;
integer fromVar& = valueVar;

integer nullRef& = null;
pointer nullPtr = null;
variant nullVar = null;
pointer typePtr = integer;
variant typeVar = integer;

// Assign typenames to pointer
pointer ptrVoid = void;
pointer ptrBool = bool;
pointer ptrChar = char;
pointer ptrInt8 = int8;
pointer ptrInt16 = int16;
pointer ptrInt32 = int32;
pointer ptrInt64 = int64;
pointer ptrUint8 = uint8;
pointer ptrUint16 = uint16;
pointer ptrUint32 = uint32;
pointer ptrUint64 = uint64;
pointer ptrFloat32 = float32;
pointer ptrFloat64 = float64;
pointer ptrTypename = typename;
pointer ptrFunction = function;
pointer ptrPointer = pointer;
pointer ptrVariant = variant;
pointer ptrObject = object;

// Assign typenames to variant
variant varVoid = void;
variant varBool = bool;
variant varChar = char;
variant varInt8 = int8;
variant varInt16 = int16;
variant varInt32 = int32;
variant varInt64 = int64;
variant varUint8 = uint8;
variant varUint16 = uint16;
variant varUint32 = uint32;
variant varUint64 = uint64;
variant varFloat32 = float32;
variant varFloat64 = float64;
variant varTypename = typename;
variant varFunction = function;
variant varPointer = pointer;
variant varVariant = variant;
variant varObject = object;

// Assign pointer to variant: add pointer as type and copy the reference
variant copyPtrFloat64 = ptrFloat64;

// Assign variant to pointer: discards typename and copy reference
pointer copyVarFloat64 = varFloat64;

/* TODO: not working yet
valueRef = value;
value = valueRef;
//value = valueRef = 12;
// */
