/**
 * Timespan is just a duration
 * for example: 33 seconds
 */
struct Duration {
	const int64 value = 0;
	// fixme: inline precision = Timeunit.Millis;
	static const Timeunit precision = Timeunit.Millis;

	static int64 value(Duration duration, Timeunit precision) {
		return convert(duration.value, Duration.precision, precision);
	}

	static Duration add(Duration lhs, Duration rhs) {
		return { value: lhs.value + rhs.value };
	}
}

Duration Duration(int64 value, Timeunit precision) {
	return { value: convert(value, precision, Duration.precision) };
}

/* TODO: inline initialization, operator overloading
inline Duration(int64 value, Timeunit precision) = {
	value: convert(value, precision, Duration.precision);
}

inline +(Duration lhs, Duration rhs) = Duration {
	value: lhs.value + rhs.value;
}

inline -(Duration lhs, Duration rhs) = Duration {
	value: lhs.value - rhs.value;
}

struct Duration {
	static Duration setField(Duration this, int64 value, Timeunit unit) { ... }
	static Duration setValue(Duration this, int64 value, Timeunit unit) { ... }
	static Duration floor(Duration this, Timeunit unit) { ... }
	static Duration ceil(Duration this, Timeunit unit) { ... }
	static Duration distribute(Duration this, Timeunit unit, uint64 duration) { ... }
	static Duration distribute(Duration this, Timeunit unit, int start, int end) { ... }
}
*/
