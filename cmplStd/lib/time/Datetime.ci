static if (typename(Timeunit) == null) {
inline "Timeunit.ci";
}
static if (typename(Timestamp) == null) {
inline "Timespan.ci";
}
static if (typename(Timestamp) == null) {
inline "Timestamp.ci";
}
static if (typename(Timezone) == null) {
inline "Timezone.ci";
}

enum Month: uint8 {
	January: 1;
	February;
	March;
	April;
	May;
	June;
	July;
	August;
	September;
	October;
	November;
	December;
}
// FIXME: implement enum indexing
inline Month(int index) = Month(emit(int32(index + Month.January)));
inline indexOf(Month month) = int32(month - Month.January);

enum Weekday: uint8 {
	Monday: 1;
	Tuesday;
	Wednesday;
	Thursday;
	Friday;
	Saturday;
	Sunday;
}
// FIXME: implement enum indexing
inline Weekday(int index) = Weekday(emit(int32(index + Weekday.Monday)));
inline indexOf(Weekday value) = int32(value - Weekday.Monday);

enum Calendar: uint8 {
	Gregorian;
//	Buddhist;
//	Chinese;
//	Coptic;
//	EthiopicAmeteAlem;
//	EthiopicAmeteMihret;
//	Hebrew;
//	Indian;
//	Islamic;
//	IslamicCivil;
//	IslamicTabular;
//	IslamicUmmAlQura;
//	Iso8601;
//	Japanese;
//	Persian;
//	RepublicOfChina;
}
struct Datetime {
	// Date parts
	const int32 year;			// Year
	const Month month;			// Month of year: 1 ... 12 / [Jan, Feb, Mar, ...]
	const uint8 day;			// Day of month: 1 ... 30
	// Time parts
	const uint8 hour = 0;		// Hour of day: 0 ... 23
	const uint8 minute = 0;		// Minute of hour: 0 ... 59
	const uint8 second = 0;		// Second of minute: 0 ... 59
	const uint16 millis = 0;	// millis of second: 0 ... 999
	// Zone
	const Timezone timezone;	// timezone
//	const bool dayLightSaving;	// day light saving's time
	// Extra
	const uint8 weekOfYear;		// 1 ... 53
//	const uint8 weekOfMonth;	// 1 ... 4
	const uint16 dayOfYear;     // example: 1..365
	const Weekday dayOfWeek;	// Day of week: 1 ... 7 / [Mon, Tue, ...]
	const bool leapYear;		// this is a leap year

	//dayOfWeekInMonth;		// example: 1..4, may be specified as -1

	static const int DaysToMonth365[13] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};
	static const int DaysToMonth366[13] = {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};
	static const int DaysTil1970 = 719162;

	static bool isLeapYear(int year) {
		if (year % 4 != 0) {
			return false;
		}
		if (year % 100 != 0) {
			return true;
		}
		if (year % 400 != 0) {
			return false;
		}
		return true;
	}

	static Datetime add(Datetime cal, int years, int months, int days) {
		int year = cal.year + years;

		int month = indexOf(cal.month) + months;
		if (month >= 12) {
			year += month / 12;
			month %= 12;
		}
		else if (month < 0) {
			year += month / 12 - 1;
			month = 12 - (-month % 12);
		}

		assert(days == 0);

		return {
			year: year;
			month: Month(month % 12);
			day: cal.day;
			hour: cal.hour;
			minute: cal.minute;
			second: cal.second;
			millis: cal.millis;
			timezone: cal.timezone;
			weekOfYear: cal.weekOfYear;
			dayOfYear: cal.dayOfYear;
			dayOfWeek: cal.dayOfWeek;
			leapYear: isLeapYear(year);
		};
	}

	/** Format date to text
	 * @param value date to format
	 * @param output write output to this buffer
	 * @param format format string
	 *  	@null defaults to: "%Y.%m.%d"
	 *      @see: https://man7.org/linux/man-pages/man1/date.1.html
	 */
	static int format(const Datetime value&, char output[], int end, const char format[]) {
		static const char weekDayNames[][] = {
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday",
		};
		static const char monthNames[][] = {
			"January",
			"February",
			"March",
			"April",
			"May",
			"June",
			"July",
			"August",
			"September",
			"October",
			"November",
			"December",
		};

		inline hours24to12(int hour) = hour > 12 ? hour - 12 : hour == 0 ? 12 : hour;

		if (pointer(format) == null) {
			return value.format(output, end, "%Y.%m.%d");
		}

		char chr = 0;
		for (int pos = 0; pos < format.length; pos += 1) {
			if (end >= output.length) {
				output[output.length - 1] = 0;
				return output.length - 1;
			}

			chr = format[pos];
			if (chr != '%') {
				output[end] = chr;
				end += 1;
				continue;
			}

			FormatFlags flags = FormatFlags.read(format, &pos);
			chr = format[pos];

			if (chr == '%') {
				end = append(output, end, "%");
			}
//			else if (chr == 'a') // todo: %a     locale's abbreviated weekday name (e.g., en_US: [Sun, Mon, ..., Sat]; de_DE: [So, Mo, ..., Sa])
			else if (chr == 'A') {
				// fixme: no locale
				// %A     locale's full weekday name (e.g., en_US: [Sunday, ..., Saturday]; de_DE: [Sonntag, ..., Samstag])
				end = append(output, end, weekDayNames[indexOf(value.dayOfWeek)]);
			}
//			else if (chr == 'b') // todo: %b     locale's abbreviated month name (e.g., en_US: [Jan, Feb, ..., Dec]; de_DE: [Jan, Feb, ..., Dez])
			else if (chr == 'B') {
				// fixme: no locale
				// %B     locale's full month name (e.g., en_US: [January, ..., December];de_DE: [Januar, ..., Dezember])
				end = append(output, end, monthNames[indexOf(value.month)]);
			}
//			else if (chr == 'c') // todo: %c     locale's date and time (e.g., Thu Mar  3 23:05:25 2005)
			else if (chr == 'C') {
				// %C     century; like %Y, except omit last two digits (e.g., 20)
				end = append(output, end, value.year / 100, flags.defPad(2, '0'));
			}
			else if (chr == 'd') {
				// %d     day of month (e.g., 01)
				end = append(output, end, value.day, flags.defPad(2, '0'));
			}
			else if (chr == 'D') {
				// %D     date; same as %m/%d/%y
				end = value.format(output, end, "%m/%d/%y");
			}
			else if (chr == 'e') {
				// %e     day of month, space padded; same as %_d
				end = append(output, end, value.day, flags.defPad(2, ' '));
			}
			else if (chr == 'F') {
				// %F     full date; like %+4Y-%m-%d
				end = value.format(output, end, "%04Y-%m-%d");
			}
//			else if (chr == 'g') // todo: %g     last two digits of year of ISO week number (see %G)
//			else if (chr == 'G') // todo: %G     year of ISO week number (see %V); normally useful only with %V
//			else if (chr == 'h') // todo: %h     same as %b
			else if (chr == 'H') {
				// %H     hour (00..23)
				end = append(output, end, value.hour, flags.defPad(2, '0'));
			}
			else if (chr == 'I') {
				// %I     hour (01..12)
				end = append(output, end, hours24to12(value.hour), flags.defPad(2, '0'));
			}
			else if (chr == 'j') {
				// %j     day of year (001..366)
				end = append(output, end, value.dayOfYear, flags.defPad(3, '0'));
			}
			else if (chr == 'k') {
				// %k     hour, space padded ( 0..23); same as %_H
				end = append(output, end, value.hour, flags.defPad(2, ' '));
			}
			else if (chr == 'l') {
				// %l     hour, space padded ( 1..12); same as %_I
				end = append(output, end, hours24to12(value.hour), flags.defPad(2, ' '));
			}
			else if (chr == 'm') {
				// %m     month (01..12)
				end = append(output, end, indexOf(value.month) + 1, flags.defPad(2, '0'));
			}
			else if (chr == 'M') {
				// %M     minute (00..59)
				end = append(output, end, value.minute, flags.defPad(2, '0'));
			}
			else if (chr == 'n') {
				// %n     a newline
				end = append(output, end, "\n");
			}
			else if (chr == 'N') {
				// fixme: precision
				// %N     nanoseconds (000000000..999999999)
				end = append(output, end, value.millis * 1000000, flags.defPad(9, '0'));
			}
			else if (chr == 'p') {
				// fixme: no locale
				// %p     locale's equivalent of either AM or PM; blank if not known
				end = append(output, end, value.hour < 12 ? "AM" : "PM");
			}
			else if (chr == 'P') {
				// fixme: no locale
				// %P     like %p, but lower case
				end = append(output, end, value.hour < 12 ? "am" : "pm");
			}
//			else if (chr == 'q') // todo: %q     quarter of year (1..4)
//			else if (chr == 'r') // todo: %r     locale's 12-hour clock time (e.g., 11:11:04 PM)
			else if (chr == 'R') {
				// %R     24-hour hour and minute; same as %H:%M
				end = value.format(output, end, "%H:%M");
			}
//			else if (chr == 's') // todo: %s     seconds since 1970-01-01 00:00:00 UTC {end = append(output, end, Timestamp(value).value(Timeunit.Seconds), flags)}
			else if (chr == 'S') {
				// %S     second (00..60)
				end = append(output, end, value.second, flags.defPad(2, '0'));
			}
			else if (chr == 't') {
				// %t     a tab
				end = append(output, end, "\t");
			}
			else if (chr == 'T') {
				// %T     time; same as %H:%M:%S
				end = value.format(output, end, "%H:%M:%S");
			}
			else if (chr == 'u') {
				// %u     day of week (1..7); 1 is Monday
				end = append(output, end, indexOf(value.dayOfWeek) + 1, flags);
			}
//			else if (chr == 'U') // todo: %U     week number of year, with Sunday as first day of week (00..53)
//			else if (chr == 'V') // todo: %V     ISO week number, with Monday as first day of week (01..53)
//			else if (chr == 'w') // todo: %w     day of week (0..6); 0 is Sunday
			else if (chr == 'W') {
				// %W     week number of year, with Monday as first day of week (00..53)
				end = append(output, end, value.weekOfYear, flags.defPad(2, '0'));
			}
//			else if (chr == 'x') // todo: %x     locale's date representation (e.g., 12/31/99)
//			else if (chr == 'X') // todo: %X     locale's time representation (e.g., 23:13:48)
			else if (chr == 'y') {
				// %y     last two digits of year (00..99)
				end = append(output, end, value.year % 100, flags.defPad(2, '0'));
			}
			else if (chr == 'Y') {
				// %Y     year
				end = append(output, end, value.year, flags);
			}
//			else if (chr == 'z') // todo: %z     +hhmm numeric time zone (e.g., -0400)
//			else if (chr == '?') // todo: %:z    +hh:mm numeric time zone (e.g., -04:00)
//			else if (chr == '?') // todo: %::z   +hh:mm:ss numeric time zone (e.g., -04:00:00)
//			else if (chr == '?') // todo: %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)
//			else if (chr == 'Z') // todo: %Z     alphabetic time zone abbreviation (e.g., EDT)
			else {
				abort("unimplemented or invalid format character", chr);
			}
		}

		if (end >= output.length) {
			end = output.length - 1;
		}
		output[end] = 0;
		return end;
	}

	static int format(const Datetime value&, char output[], const char format[]) {
		return format(value, output, 0, format);
	}
}

Datetime Datetime(Calendar calendar, Timezone timezone, Timestamp timestamp) {
	assert(calendar == Calendar.Gregorian);
	enum: int {
		// Number of days in a non-leap year
		DaysPerYear: 365;

		// Number of days in a leap year
		DaysPerLeapYear: 366;

		// Number of days in 4 years
		DaysPer4Years: DaysPerYear * 4 + 1;
		// Number of days in 100 years
		DaysPer100Years: DaysPer4Years * 25 - 1;
		// Number of days in 400 years
		DaysPer400Years: DaysPer100Years * 4 + 1;
	}

	Duration offset = timezone.offset(timestamp);
	timestamp = timestamp.add(offset.value, Duration.precision);
	int n = Datetime.DaysTil1970 + timestamp.value(Timeunit.Days);

	// n = number of days since 1/1/0001
	int dayOfWeek = n % 7;

	// y400 = number of whole 400-year periods since 1/1/0001
	int y400 = n / DaysPer400Years;
	// n = day number within 400-year period
	n -= y400 * DaysPer400Years;

	// y100 = number of whole 100-year periods within 400-year period
	int y100 = n / DaysPer100Years;

	// Last 100-year period has an extra day, so decrement result if 4
	if (y100 == 4) {
		y100 = 3;
	}
	// n = day number within 100-year period
	n -= y100 * DaysPer100Years;

	// y4 = number of whole 4-year periods within 100-year period
	int y4 = n / DaysPer4Years;
	// n = day number within 4-year period
	n -= y4 * DaysPer4Years;

	// y1 = number of whole years within 4-year period
	int y1 = n / DaysPerYear;
	// Last year has an extra day, so decrement result if 4
	if (y1 == 4) {
		y1 = 3;
	}

	// If year was requested, compute and return it
	int year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;

	// n = day number within year
	n -= y1 * DaysPerYear;

	// All months have less than 32 days, so n >> 5 is a good conservative
	// estimate for the month
	int m = n >> 5 + 1;
	const int DaysToMonth[*] = Datetime.isLeapYear(year) ? Datetime.DaysToMonth366 : Datetime.DaysToMonth365;

	// m = 1-based month number
	for (;n >= DaysToMonth[m];) {
		m += 1;
	}

	return {
		// date
		year: year;
		month: Month(m - 1);
		day: n - DaysToMonth[m - 1] + 1;

		// time
		hour: timestamp.value(Timeunit.Hours) % 24;
		minute: timestamp.value(Timeunit.Minutes) % 60;
		second: timestamp.value(Timeunit.Seconds) % 60;
		millis: timestamp.value(Timeunit.Millis) % 1000;

		// zone
		timezone: timezone;

		// extra
		dayOfYear: n + 1;
		dayOfWeek: Weekday(dayOfWeek);
		weekOfYear: (n - dayOfWeek + indexOf(Weekday.Thursday)) / 7 + 1;
		leapYear: DaysToMonth == Datetime.DaysToMonth366;
	};
}
inline Datetime(Timestamp time) = Datetime(Calendar.Gregorian, Timezone.utc(), time);

Datetime Datetime(int year, int month, int day, int hour, int minute, int second, int millis, Timezone zone) {
	return {
		year: year;
		month: Month(month - 1);
		day: day;
		hour: hour;
		minute: minute;
		second: second;
		millis: millis;
		timezone: zone;
		weekOfYear: 0;
		dayOfYear: 0;
		dayOfWeek: Weekday.Monday;
		leapYear: false;
	};
}
Datetime Datetime(int year, int month, int day, int hour, int minute, int second, int millis) {
	return Datetime(year, month, day, hour, minute, second, millis, Timezone.utc());
}
Datetime Datetime(int year, int month, int day, int hour, int minute, int second, Timezone zone) {
	return Datetime(year, month, day, hour, minute, second, 0, zone);
}
Datetime Datetime(int year, int month, int day, Timezone zone) {
	return Datetime(year, month, day, 0, 0, 0, 0, zone);
}

Datetime Datetime(int year, int month, int day) {
	return Datetime(year, month, day, 0, 0, 0, 0, Timezone.utc());
}

Timestamp Timestamp(Datetime value) {
	int year = value.year;
	if (year < 0 || year > 9999) {
		trace("invalid year", year);
		return Timestamp(1D << 63, Timestamp.precision);
	}

	int month = value.month;
	if (month < Month.January || month > Month.December) {
		trace("invalid month", month);
		month = Math.clamp(month, int32(Month.January), int32(Month.December));
	}

	const int DaysToMonth[*] = Datetime.isLeapYear(year) ? Datetime.DaysToMonth366 : Datetime.DaysToMonth365;

	int day = value.day;
	int daysInYear = DaysToMonth[month - 1];
	int daysInMonth = DaysToMonth[month] - daysInYear;
	if (day < 1 || day > daysInMonth) {
		trace("invalid day of month", day);
		day = Math.clamp(day, 1, daysInMonth);
	}

	int y = year - 1;
	int64 d = y * 365 + y / 4 - y / 100 + y / 400 + daysInYear + day - 1 - Datetime.DaysTil1970;
	int64 t = (((d * 24 + value.hour) * 60 + value.minute) * 60 + value.second) * 1000 + value.millis;
	return Timestamp(t, Timeunit.Millis);
}

Datetime addDays(Datetime datetime, int value) {
	return Datetime(Timestamp(datetime).add(value, Timeunit.Days));
}

/* resources:
https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Globalization/GregorianCalendar.cs
https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/TimeZone.cs
https://github.com/unicode-org/icu/blob/main/icu4j/main/classes/core/src/com/ibm/icu/util/Calendar.java
https://github.com/JodaOrg/joda-time/blob/master/src/main/java/org/joda/time/DateTime.java
todo: https://github.com/HowardHinnant/date
https://zetcode.com/articles/cdatetime/
*/
