// InputOutput

inline character = uint32;

struct Closeable: object {
	// abstract method
	void close(Closeable this);

	static void skipClose(Closeable closeable) {
	}

	static void safeClose(Closeable closeable) {
		if (closeable.close != null) {
			closeable.close(closeable);
		}
	}
}

// destroy a closeable invoking the abstract close method
inline close(Closeable instance) = Closeable.safeClose(instance);
inline void(Closeable instance) = Closeable.safeClose(instance);

// ByteReader ~= java:InputStream
struct ByteReader: Closeable {

	// abstract method
	int read(ByteReader this, byte bytes[]);

	static int read(ByteReader this) {
		byte bytes[1] = {};
		int result = this.read(bytes);
		if (result > 0) {
			return bytes[0];
		}
		return result;
	}

	/* TODO: subclasses
		CopyReader
		FileReader
		PipedReader
		SocketReader
		MemoryReader
	*/
}

// ByteWriter ~= java:OutputStream
struct ByteWriter: Closeable {
	// abstract method
	void write(ByteWriter this, byte bytes[]);

	// abstract method
	void flush(ByteWriter this);

	static void write(ByteWriter this, byte bytes[], int count) {
		assert(count <= bytes.length);
		byte slice[] = emit(int(count), pointer(bytes));
		return this.write(this, slice);
	}

	/*TODO:static*/ void write(ByteWriter this, byte oneByte) {
		byte bytes[1] = { oneByte };
		return this.write(this, bytes);
	}

	/* TODO: uncomment
	static void write(ByteWriter this, void write(ByteWriter writer)) {
		return write(this);
	}

	struct Writeable: object {
		// abstract method
		void write(Writeable this, ByteWriter writer);
	}

	static void write(ByteWriter this, Writeable value) {
		return this.write(this, value.write);
	}// */

	static int write(ByteWriter this, ByteReader reader) {
		byte buffer[1024] = {};
		int result = 0;
		for ( ; ; ) {
			int read = reader.read(buffer);
			if (read <= 0) {
				// TODO: break;
				return result;
			}
			this.write(buffer, read);
			result += read;
		}
		return result;
	}

	/* TODO: subclasses
		FileWriter
		PipedWriter
		SocketWriter
		MemoryWriter
	*/
}

// TextReader := Decoder & Parser(java:Reader + Scanner?Parser?)
struct TextReader: Closeable {
	const ByteReader reader;

	// abstract method
	int read(TextReader this, character chars[]);

	/*TODO:static*/ character read(TextReader this) {
		character chars[1] = {};
		int result = this.read(chars);
		if (result > 0) {
			return chars[0];
		}
		return result;
	}

	void close(TextReader this) {
		this.reader.close();
	}

	// TODO: string readNext(TextReader this, regex matcher) { /*...*/ }
	// TODO: string readWord(TextReader this) { return this.readNext(/\w+/); }
	// TODO: string readLine(TextReader this) { return this.readNext(/.*$/); }
	// TODO: string readAll(TextReader this) { return this.readMatch(/.*/); }
	// TODO: double readNumber(TextReader this, Locale locale) { /*...*/ }

	/* TODO: subclasses
		Latin1
		Ascii
		Utf7
		Utf8
	*/
}

// TextWriter := Encoder & Printer (java:Writer + PrintStream)
struct TextWriter: Closeable {
	struct Writeable: object {
		// abstract method
		void write(Writeable this, TextWriter writer);
	}

	const ByteWriter writer;

	// abstract method
	void write(TextWriter this, character chars[]);

	static void write(TextWriter this, character chars[], int count) {
		assert(count <= chars.length);
		character slice[] = emit(int(count), pointer(chars));
		return this.write(slice);
	}

	static void write(TextWriter this, character oneChar) {
		character chars[1] = { oneChar };
		return this.write(chars);
	}

	/*static void write(TextWriter this, void write(TextWriter writer)) {
		return write(this);
	}

	static void write(TextWriter this, Writeable value) {
		return write(this, value.write);
	}*/

	/**
	 * Convert from one encoding to another.
	 * @returns converted character count.
	 *
	 * example: convert utf-8 encoded file to ascii
	 * TextWriter output = AsciiWriter("out.txt");
	 * TextReader input = Utf8Reader("in.txt");
	 * output.write(input);
	 */
	static int write(TextWriter this, TextReader reader) {
		character buffer[1024] = {};
		int result = 0;
		for ( ; ; ) {
			int read = reader.read(buffer);
			if (read <= 0) {
				return result;
			}
			this.write(buffer, read);
			result += read;
		}
		return result;
	}

	void flush(TextWriter this) {
		this.writer.flush(this.writer);
	}

	void close(TextWriter this) {
		this.writer.safeClose();
	}

	// TODO: void write(TextWriter this, Locale locale, bool value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, char value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, int32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, int64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, uint32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, uint64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, float32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, float64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, string value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, object value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, variant value) { /*...*/ }

	/* TODO: subclasses
		Latin1
		Ascii
		Utf7
		Utf8
	*/
}

// copy byte-stream
struct CopyReader: ByteReader {
	const ByteReader source;
	const ByteWriter clone;

	int read(CopyReader this, byte bytes[]) {
		int result = this.source.read(bytes);
		if (result > 0) {
			this.clone.write(bytes, result);
		}
		return result;
	}

	void close(CopyReader this) {
		this.source.close();
		this.clone.close();
	}
}

// Base64
struct Base64Encoder: ByteWriter {
	static byte lookup[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	const ByteWriter writer;

	const int wrap = 80;
	int size = 0;

	// todo: this should be a bigger buffer
	int bitsEncoded = 0;
	int charEncoded = 0;

	static void flushBuffer(Base64Encoder this) {
		if (this.bitsEncoded == 4) {
			ByteWriter writer = this.writer;
			inline charEncoded = this.charEncoded;
			writer.write(lookup[(charEncoded << 2) & 0x3f]);
			writer.write(byte('='));
			this.bitsEncoded = 0;
		}
		else if (this.bitsEncoded == 2) {
			ByteWriter writer = this.writer;
			inline charEncoded = this.charEncoded;
			writer.write(lookup[(charEncoded << 4) & 0x3f]);
			writer.write(byte('='));
			writer.write(byte('='));
			this.bitsEncoded = 0;
		}
	}

	void write(Base64Encoder this, byte data[]) {
		ByteWriter writer = this.writer;
		inline bitsEncoded = this.bitsEncoded;
		inline charEncoded = this.charEncoded;
		inline charWritten = this.size;
		for (int i = 0; i < data.length; i += 1) {
			bitsEncoded += 2;
			charEncoded <<= 8;
			charEncoded |= data[i] & 0xff;
			writer.write(lookup[(charEncoded >> bitsEncoded) & 0x3f]);
			if (this.wrap > 0 && ((charWritten += 1) % this.wrap == 0)) {
				writer.write(byte('\n'));
			}

			if (bitsEncoded >= 6) {
				bitsEncoded -= 6;
				writer.write(lookup[(charEncoded >> bitsEncoded) & 0x3f]);
				if (this.wrap > 0 && ((charWritten += 1) % this.wrap == 0)) {
					writer.write(byte('\n'));
				}
			}
		}
	}

	void flush(Base64Encoder this) {
		this.flushBuffer();
		this.writer.flush();
	}

	void close(Base64Encoder this) {
		this.flushBuffer();
		this.writer.safeClose();
		assert(this.bitsEncoded == 0, "unprocessed bits remaining.", this.bitsEncoded);
	}
}
struct Base64Decoder: ByteWriter {
	static int lookup[256] = {};
	const ByteWriter writer;
	int bitsDecoded = 0;
	int charDecoded = 0;

	void write(Base64Decoder this, byte data[]) {
		static bool initialized = false;
		if (!initialized) {
			for (int i = 0; i < lookup.length; i += 1) {
				lookup[i] = -1;
			}
			for (int i = 0; i < Base64Encoder.lookup.length; i += 1) {
				lookup[Base64Encoder.lookup[i]] = i;
			}
			initialized = true;
		}

		ByteWriter writer = this.writer;
		inline bitsDecoded = this.bitsDecoded;
		inline charDecoded = this.charDecoded;
		for (int i = 0; i < data.length; i += 1) {
			byte chr = data[i];
			bool skipChar = chr == '\n';
			if (chr == '\r') {
				skipChar = true;
			}
			else if (chr == '=') {
				skipChar = true;
				bitsDecoded -= 2;
			}
			if (!skipChar) {
				bitsDecoded += 6;
				charDecoded <<= 6;
				charDecoded |= lookup[chr] & 0x3f;
				if (bitsDecoded >= 8) {
					bitsDecoded -= 8;
					writer.write(byte(charDecoded >> bitsDecoded));
				}
			}
		}
	}

	void flush(Base64Decoder this) {
		this.writer.flush(this.writer);
	}
	void close(Base64Decoder this) {
		this.writer.safeClose();
		assert(this.bitsDecoded == 0, "unprocessed bits remaining.", this.bitsDecoded);
	}
}

// Ascii TODO: untested
struct AsciiReader: TextReader {
	// convert bytes to chars
	int read(AsciiReader this, character chars[]) {
		ByteReader reader = this.reader;
		for (int i = 0; i < chars.length; i += 1) {
			int value = reader.read();
			if (value < 0) {
				// end of stream
				return i;
			}
			chars[i] = value;
		}
		return chars.length;
	}
}
struct AsciiWriter: TextWriter {
	// convert characters to bytes(can cause data loss)
	void write(TextWriter this, character chars[]) {
		ByteWriter writer = this.writer;
		for (int i = 0; i < chars.length; i += 1) {
			writer.write(byte(chars[i]));
		}
	}
}

// Utf-8 TODO: untested
struct Utf8Reader: TextReader {
	// convert utf-8 bytes to characters
	int read(Utf8Reader this, character chars[]) {
		ByteReader reader = this.reader;
		for (int i = 0; i < chars.length; i += 1) {
			int value = reader.read();
			if (value < 0) {
				// end of stream
				return i;
			}

			if ((value & 0x80) == 0) {
				// value = value;
			}
			else if ((value & 0xe0) == 0xc0) {
				int val1 = reader.read() & 0x3f;
				value = (value & 31) << 6 | val1;
			}
			else if ((value & 0xf0) == 0xe0) {
				int val1 = reader.read() & 0x3f;
				int val2 = reader.read() & 0x3f;
				value = (value & 15) << 12 | val1 << 6| val2;
			}
			else if ((value & 0xf8) == 0xf0) {
				int val1 = reader.read() & 0x3f;
				int val2 = reader.read() & 0x3f;
				int val3 = reader.read() & 0x3f;
				value = (value & 7) << 18 | val1 << 12 | val2 << 6 | val3;
			}
			chars[i] = value;
		}
		return chars.length;
	}
}
struct Utf8Writer: TextWriter {
	// convert characters to utf-8 bytes
	void write(TextWriter this, character chars[]) {
		ByteWriter writer = this.writer;
		byte bytes[4] = {};
		for (int i = 0; i < chars.length; i += 1) {
			character chr = chars[i];

			if (chr < 0x80) {
				bytes[0] = chr;
				writer.write(bytes, 1);
			}
			else if (chr < 0x800) {
				bytes[0] = (chr & 0x7c0) >> 6 | 0xc0;
				bytes[1] = chr & 0x3f | 0x80;
				writer.write(bytes, 2);
			}
			else if (chr < 0xe000) {
				bytes[0] = (chr & 0xf000) >> 12 | 0xe0;
				bytes[1] = (chr & 0xfc) >> 6 | 0x80;
				bytes[2] = chr & 0x3f | 0x80;
				writer.write(bytes, 3);
			}
			else {
				bytes[0] = (chr & 0x1c0000) >> 18 | 0xf0;
				bytes[1] = (chr & 0x3f0) >> 12 | 0x80;
				bytes[2] = (chr & 0xfc) >> 6 | 0x80;
				bytes[3] = chr & 0x3f | 0x80;
				writer.write(bytes, 4);
			}
		}
	}
}

// File streams
static if (typename(File) != null) {
struct FileReader: ByteReader {
	const File file;

	int read(FileReader this, uint8 bytes[]) {
		return File.read(this.file, bytes);
	}

	void close(FileReader this) {
		File.close(this.file);
	}
}

struct FileWriter: ByteWriter {
	const File file;

	void write(FileWriter this, byte bytes[]) {
		int wrote = File.write(this.file, bytes);
		assert(wrote == bytes.length);
	}

	void flush(FileWriter this) {
		File.flush(this.file);
	}

	void close(FileWriter this) {
		File.close(this.file);
	}
}
struct BufferedFileWriter: FileWriter {
	byte buffer[1024] = null;
	int bufferSize = 0;

	static void flushBuffer(BufferedFileWriter this) {
		// TODO: use base class to write buffered content
		// FileWriter.write(this, this.buffer, this.bufferSize);
		int wrote = File.write(this.file, this.buffer, this.bufferSize);
		assert(wrote == this.bufferSize);
		this.bufferSize = 0;
	}

	void write(BufferedFileWriter this, byte bytes[]) {
		if (this.bufferSize + bytes.length > this.buffer.length) {
			if (this.bufferSize > 0) {
				this.flushBuffer();
			}
			if (bytes.length > this.buffer.length / 2) {
				// writing more than buffer half size, make the write
				FileWriter.write(this, bytes);
				return;
			}
		}
		// accumulate into buffer
		byte buffer[*] = this.buffer;
		int bufferSize = this.bufferSize;
		for (int i = 0; i < bytes.length; i += 1) {
			buffer[bufferSize + i] = bytes[i];
		}
		this.bufferSize += bytes.length;
	}

	void flush(BufferedFileWriter this) {
		this.flushBuffer();
		FileWriter.flush(this);
	}

	void close(BufferedFileWriter this) {
		this.flushBuffer();
		FileWriter.close(this);
	}
}

FileWriter StdOutWriter() {
	return FileWriter {
		file: File.out;
		close: Closeable.skipClose;
	};
}

FileReader FileReader(const char path[*]) {
	return FileReader {
		file: File.open(path);
	};
}

FileWriter FileWriter(const char path[*], bool buffered, bool append) {
	if (buffered && append) {
		return BufferedFileWriter {
			file: File.append(path);
		};
	}
	if (buffered) {
		return BufferedFileWriter {
			file: File.create(path);
		};
	}
	if (append) {
		return FileWriter {
			file: File.append(path);
		};
	}
	return FileWriter {
		file: File.create(path);
	};
}

/* TODO: uncomment
struct Path {
	bool exists();
	bool isFile();
	bool isDirectory();
	bool isHidden();
	bool isAbsolute();

	Path parent();
	// permissions: canRead,write,execute,...
}

inline FileReader(Path path) = {
	file: File.open(path);
};
inline FileWriter(Path path, bool append) = {
	file: append ? File.append(path) : File.create(path);
};

inline AsciiReader(Path path) = {
	reader: FileReader(path);
};
inline AsciiWriter(Path path, bool append) = {
	writer: FileWriter(path, append);
};

inline Utf8Reader(Path path) = {
	reader: FileReader(path);
};
inline Utf8Writer(Path path, bool append) = {
	writer: FileWriter(path, append);
};
*/
}

// TODO: untested
struct ByteBuffer {
	int position = 0;
	int capacity = 32;
	int length = 0;
	byte buffer[*] = pointer.alloc(null, capacity);

	int read(ByteBuffer this, byte bytes[]) {
		if (this.position >= this.length) {
			return -1;
		}
		for (int i = 0; i < bytes.length; i += 1) {
			if (this.position >= this.length) {
				return i;
			}
			bytes[i] = this.buffer[this.position];
			this.position += 1;
		}
		return bytes.length;
	}

	int read(ByteBuffer this) {
		if (this.position >= this.length) {
			return -1;
		}
		int result = this.buffer[this.position];
		this.position += 1;
		return result;
	}

	void write(ByteBuffer this, byte bytes[]) {
		int size = this.position + bytes.length;
		if (size >= this.capacity) {
			// try to double the current size
			this.capacity *= 2;
			if (size > 2 * this.capacity) {
				// double the calculated size
				this.capacity = size * 2;
			}

			// copy old bytes
			byte new[*] = pointer.alloc(null, this.capacity);
			for (int i = 0; i < this.position; i += 1) {
				new[i] = this.buffer[i];
			}
			pointer.alloc(this.buffer, 0);
			this.buffer = new;
		}

		// copy new bytes
		for (int i = 0; i < bytes.length; i += 1) {
			this.buffer[this.position] = bytes[i];
			this.position += 1;
		}
	}

	void flush(ByteBuffer this) {
		// do nothing
	}

	void close(ByteBuffer this) {
		// release memory
		pointer.alloc(this.buffer, 0);

		this.buffer = null;
		this.position = 0;
		this.capacity = 0;
		this.length = 0;
	}
}
