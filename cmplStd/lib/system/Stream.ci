// InputOutput

struct Closeable: object {
	// abstract method
	void close(Closeable this);

	static void skipClose(Closeable closeable) {
	}

	static void safeClose(Closeable closeable) {
		if (closeable.close != null) {
			closeable.close(closeable);
		}
	}
}

// destroy a closeable invoking the abstract close method
inline close(Closeable instance) = Closeable.safeClose(instance);
inline void(Closeable instance) = Closeable.safeClose(instance);

// ByteReader ~= java:InputStream
struct ByteReader: Closeable {

	// abstract method
	int read(ByteReader this, byte bytes[]);

	static int read(ByteReader this) {
		byte bytes[1] = {};
		int result = this.read(bytes);
		if (result > 0) {
			return bytes[0];
		}
		return result;
	}

	/* TODO: subclasses
		CopyReader
		FileReader
		PipedReader
		SocketReader
		MemoryReader
	*/
}

// ByteWriter ~= java:OutputStream
struct ByteWriter: Closeable {
	// abstract method
	void write(ByteWriter this, byte bytes[]);

	// abstract method
	void flush(ByteWriter this);

	static void write(ByteWriter this, byte bytes[], int count) {
		assert(count <= bytes.length);
		return this.write(this, bytes[... count]);
	}

	/*TODO:static*/ void write(ByteWriter this, byte oneByte) {
		byte bytes[1] = { oneByte };
		return this.write(this, bytes);
	}

	/* TODO: uncomment
	static void write(ByteWriter this, void write(ByteWriter writer)) {
		return write(this);
	}

	struct Writeable: object {
		// abstract method
		void write(Writeable this, ByteWriter writer);
	}

	static void write(ByteWriter this, Writeable value) {
		return this.write(this, value.write);
	}// */

	static int write(ByteWriter this, ByteReader reader) {
		byte buffer[1024] = {};
		int result = 0;
		for ( ; ; ) {
			int read = reader.read(buffer);
			if (read <= 0) {
				// TODO: break;
				return result;
			}
			this.write(buffer, read);
			result += read;
		}
		return result;
	}

	/* TODO: subclasses
		FileWriter
		PipedWriter
		SocketWriter
		MemoryWriter
	*/
}

// TextReader := Decoder & Parser(java:Reader + Scanner?Parser?)
struct TextReader: Closeable {
	inline unicode = uint32;

	const ByteReader reader;

	// abstract method
	int read(TextReader this, unicode chars[]);

	/*TODO:static*/ unicode read(TextReader this) {
		unicode chars[1] = {};
		int result = this.read(chars);
		if (result > 0) {
			return chars[0];
		}
		return result;
	}

	void close(TextReader this) {
		this.reader.close();
	}

	// TODO: string readNext(TextReader this, regex matcher) { /*...*/ }
	// TODO: string readWord(TextReader this) { return this.readNext(/\w+/); }
	// TODO: string readLine(TextReader this) { return this.readNext(/.*$/); }
	// TODO: string readAll(TextReader this) { return this.readMatch(/.*/); }
	// TODO: double readNumber(TextReader this, Locale locale) { /*...*/ }

	/* TODO: subclasses
		Latin1
		Ascii
		Utf7
		Utf8
	*/
}

// TextWriter := Encoder & Printer (java:Writer + PrintStream)
struct TextWriter: Closeable {
	struct Writeable: object {
		// abstract method
		void write(Writeable this, TextWriter writer);
	}

	inline unicode = uint32;

	const ByteWriter writer;

	// abstract method
	void write(TextWriter this, unicode chars[]);

	static void write(TextWriter this, unicode chars[], int count) {
		assert(count <= chars.length);
		return this.write(chars[... count]);
	}

	static void write(TextWriter this, unicode oneChar) {
		unicode chars[1] = { oneChar };
		return this.write(chars);
	}

	/*static void write(TextWriter this, void write(TextWriter writer)) {
		return write(this);
	}

	static void write(TextWriter this, Writeable value) {
		return write(this, value.write);
	}*/

	/**
	 * Convert from one encoding to another.
	 * @returns converted character count.
	 *
	 * example: convert utf-8 encoded file to ascii
	 * TextWriter output = AsciiWriter("out.txt");
	 * TextReader input = Utf8Reader("in.txt");
	 * output.write(input);
	 */
	static int write(TextWriter this, TextReader reader) {
		unicode buffer[1024] = {};
		int result = 0;
		for ( ; ; ) {
			int read = reader.read(buffer);
			if (read <= 0) {
				return result;
			}
			this.write(buffer, read);
			result += read;
		}
		return result;
	}

	void flush(TextWriter this) {
		this.writer.flush(this.writer);
	}

	void close(TextWriter this) {
		this.writer.safeClose();
	}

	// TODO: void write(TextWriter this, Locale locale, bool value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, char value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, int32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, int64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, uint32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, uint64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, float32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, float64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, string value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, object value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, variant value) { /*...*/ }

	/* TODO: subclasses
		Latin1
		Ascii
		Utf7
		Utf8
	*/
}

// copy byte-stream
struct CopyReader: ByteReader {
	const ByteReader source;
	const ByteWriter clone;

	int read(CopyReader this, byte bytes[]) {
		int result = this.source.read(bytes);
		if (result > 0) {
			this.clone.write(bytes, result);
		}
		return result;
	}

	void close(CopyReader this) {
		this.source.close();
		this.clone.close();
	}
}

// File streams
static if (typename(File) != null) {
inline "Stream.file.ci";
}

// TODO: untested
struct ByteBuffer {
	int position = 0;
	int capacity = 32;
	int length = 0;
	byte buffer[*] = pointer.alloc(null, capacity);

	int read(ByteBuffer this, byte bytes[]) {
		if (this.position >= this.length) {
			return -1;
		}
		for (int i = 0; i < bytes.length; i += 1) {
			if (this.position >= this.length) {
				return i;
			}
			bytes[i] = this.buffer[this.position];
			this.position += 1;
		}
		return bytes.length;
	}

	int read(ByteBuffer this) {
		if (this.position >= this.length) {
			return -1;
		}
		int result = this.buffer[this.position];
		this.position += 1;
		return result;
	}

	void write(ByteBuffer this, byte bytes[]) {
		int size = this.position + bytes.length;
		if (size >= this.capacity) {
			// try to double the current size
			this.capacity *= 2;
			if (size > 2 * this.capacity) {
				// double the calculated size
				this.capacity = size * 2;
			}

			// copy old bytes
			byte new[*] = pointer.alloc(null, this.capacity);
			for (int i = 0; i < this.position; i += 1) {
				new[i] = this.buffer[i];
			}
			pointer.alloc(this.buffer, 0);
			this.buffer = new;
		}

		// copy new bytes
		for (int i = 0; i < bytes.length; i += 1) {
			this.buffer[this.position] = bytes[i];
			this.position += 1;
		}
	}

	void flush(ByteBuffer this) {
		// do nothing
	}

	void close(ByteBuffer this) {
		// release memory
		pointer.alloc(this.buffer, 0);

		this.buffer = null;
		this.position = 0;
		this.capacity = 0;
		this.length = 0;
	}
}
