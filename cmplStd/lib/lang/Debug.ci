// debugging related functions

/// report message at `verbose` logging level
inline verbose(const char message[*], const variant details...) = raise(raise.verbose, raise.noTrace, message, ...details);

/// report message at `debug` logging level
inline debug(const char message[*], const variant details...) = raise(raise.debug, raise.noTrace, message, ...details);

/// report message with stacktrace at `debug` logging level
inline trace(const char message[*], const variant details...) = raise(raise.debug, raise.defTrace, message, ...details);

/// report message at `info` logging level
inline info(const char message[*], const variant details...) = raise(raise.info, raise.noTrace, message, ...details);

/// report message at `warn` logging level
inline warn(const char message[*], const variant details...) = raise(raise.warn, raise.noTrace, message, ...details);

/// report message with stacktrace at `error` logging level
inline error(const char message[*], const variant details...) = raise(raise.error, raise.defTrace, message, ...details);

/// report message with stacktrace at `abort` logging level and abort execution
inline abort(const char message[*], const variant details...) = raise(raise.abort, raise.defTrace, message, ...details);
/// report message with stacktrace at `abort` logging level and abort execution
inline abort() = raise(raise.abort, raise.defTrace, "execution aborted!");

/// report message and abort the execution if the assertion condition fails (is false)
inline assert(bool condition, const char message[*], const variant details...) = void(condition ? void(0) : raise(raise.abort, raise.defTrace, message, ...details));
/// report message and abort the execution if the assertion condition fails (is false)
inline assert(bool condition, const variant details...) = void(condition ? void(0) : raise(raise.abort, raise.defTrace, "assertion failed!", ...details));

/// Record used for debugging purposes, containing expected, returned and an array of extra values
struct NotEquals {
	/// Value of the expected result
	const variant expected;

	/// Value of the actual result
	const variant returned;

	/// Extra argument to identify what happened
	const variant extras[];
}

/// Create a not equals record for inspection from expected and returned
NotEquals NotEquals(const variant expected, const variant returned) {
	return {
		expected: expected;
		returned: returned;
		extras: null;
	};
}

/// abort execution displaying the expected and returned values
inline abort(const char message[*], const NotEquals detail&) = raise(raise.abort, raise.defTrace, message, detail);
/// report message and abort the execution if the assertion condition fails (is false)
inline assert(bool condition, const char message[*], const NotEquals detail&) = void(condition ? void(0) : abort(message, detail));

/// abort execution if the returned value is not equal to the expected value
// TODO: make inline
static void assertEq(int expected, int returned, const char message[*]) {
	if (returned == expected) {
		return;
	}
	variant extras[1] = { message };
	NotEquals detail = {
		expected: expected;
		returned: returned;
		extras: extras;
	};
	raise(raise.abort, raise.defTrace, "assertion failed", detail);
}
/// abort execution if the returned value is not equal to the expected value
inline assertEq(int expected, int returned) = assertEq(expected, returned, null);
