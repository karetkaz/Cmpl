/// simple fixed point, `precision` bits used for decimal part, the rest for integer part
struct Fixed {
	int32 value = 0;

	enum: int32 {
		precision: 20; // todo: precision should be class parameter and/or declared as inline

		one: 1 << precision;
		nan: 0x80000000;
		inf: 0x7fffffff;
		half: one / 2;
		mask: one - 1;
		pow2max: (31 - precision) << precision;     // maximum positive value computable by pow2

		mpi_28: 0x3243f6a8;							// 3.141592653589793 : pi
		ln2_28: 0x0b17217f;							// .6931471805599453 : natural logarithm (2)
		lg2_28: 0x04d104d4;							// .3010299956639812 : decimal logarithm (2)
		l2e_28: 0x17154765;							// 1.442695040888963 : logarithm base 2  (e)
		l2t_28: 0x35269e12;							// 3.321928094887362 : logarithm base 2 (10)
		d2r_28: 0x00477d1a;							// pi / 180 : degrees to radians
		r2d_24: 0x394bb834;							// 180 / pi : radians to degrees

		piMul2: mpi_28 >> (28 - precision - 1);		// 2 * pi
		piDiv2: mpi_28 >> (28 - precision + 1);		// pi / 2

		pi: mpi_28 >> (28 - precision);				// 3.141592653589793 : pi
		ln2: ln2_28 >> (28 - precision);			// .6931471805599453 : natural logarithm (2)
		lg2: lg2_28 >> (28 - precision);			// .3010299956639812 : decimal logarithm (2)
		l2e: l2e_28 >> (28 - precision);			// 1.442695040888963 : logarithm base 2  (e)
		l2t: l2t_28 >> (28 - precision);			// 3.321928094887362 : logarithm base 2 (10)
	}

	static if (precision > 26) { precision_must_be_at_most_26_bits }

	static Fixed as(int32 value) { return {value: value}; }

	///@public
	static Fixed neg(Fixed a) { return {value: -a.value}; }

	///@public
	static Fixed add(Fixed a, Fixed b) { return {value: a.value + b.value}; }
	static Fixed add(Fixed a, int32 b) { return {value: a.value + b}; }

	///@public
	static Fixed sub(Fixed a, Fixed b) { return {value: a.value - b.value}; }
	static Fixed sub(Fixed a, int32 b) { return {value: a.value - b}; }

	///@public
	static Fixed mul(Fixed a, Fixed b) { return {value: (int64(a.value) * b.value) >> precision}; }
	static Fixed mul(Fixed a, int32 b) { return {value: a.value * b}; }
	static Fixed mul_28(Fixed a, int32 b) { return {value: int64(a.value) * b >> 28}; }

	///@public
	static Fixed div(Fixed a, Fixed b) {
		if (b.value == 0) {
			if (a.value == 0) {
				return as(nan);
			}
			return as(a.value < 0 ? -inf : inf);
		}
		return {value: (int64(a.value) << precision) / b.value};
	}
	static Fixed div(Fixed a, int32 b) { return {value: a.value / b}; }

	///@public
	static Fixed mod(Fixed a, Fixed b) { return {value: a.value % b.value}; }

	///@public
	static Fixed inv(Fixed x) {
		if (x.value == 0) {
			return {value: inf};
		}
		int64 value = (int64(one) << precision) / x.value;
		if (value >> 31 != value >> 63) {
			return {value: value < 0 ? -inf : inf};
		}
		return {value: value};
	}


	/// Returns the fractional part of the fixed point number
	static Fixed fract(Fixed x) {
		if (x.value < 0) {
			return {value: -(-x.value & mask)};
		}
		return {value: x.value & (nan|mask)};
	}

	///@public
	static Fixed floor(Fixed x) {
		return {value: x.value & ~mask};
	}

	///@public
	static Fixed ceil(Fixed x) {
		return neg(floor(neg(x)));
	}

	///@public
	static Fixed round(Fixed x) {
		return floor(as(x.value + half));
	}

	/// Determines whether the given fixed point value is finite: `!isNan(x) && !isInf(x)`
	static bool isFinite(Fixed x) {
		if (x.value == nan) {
			return false;
		}
		if (x.value == inf) {
			return false;
		}
		if (x.value == -inf) {
			return false;
		}
		return true;
	}

	static bool isNan(Fixed x) {
		return x.value == nan;
	}

	/// Determines whether the given fixed point is less than the other one.
	static int compare(Fixed a, Fixed b) {
		return int(a.value < b.value) - int(a.value > b.value);
	}


	/**	Returns the binary logarithm of the argument `x`.
	 * 	log2(x) = log2((2 ** n) * ((x / 2) ** n)) =
	 * 	= log2(2 ** n) + log2((x / 2) ** n) = n + log2(q)
	 * 	n = most significant bit of x (BSR (bit scan reverse))
	 * 	q = (x / 2) ** n = (x > 1) ? (x >> n) : (x << -n)
	 * 	x > 1 <=> n - precision > 0
	 * 	log2(q) = look up from table
	**/
	static Fixed log2(Fixed x) {
		static const uint32 tbl_log2[257] = {
			// log2(x + 1), x : [0, 1), x = float64.log2(index / 256. + 1) << 30
			0x00000000, 0x005c2711, 0x00b7f285, 0x01136311, 0x016e7968, 0x01c9363b, 0x02239a3a, 0x027da612,
			0x02d75a6e, 0x0330b7f8, 0x0389bf57, 0x03e27130, 0x043ace27, 0x0492d6df, 0x04ea8bf7, 0x0541ee0d,
			0x0598fdbe, 0x05efbba5, 0x0646285b, 0x069c4477, 0x06f21090, 0x07478d38, 0x079cbb04, 0x07f19a83,
			0x08462c46, 0x089a70da, 0x08ee68cb, 0x094214a5, 0x099574f1, 0x09e88a36, 0x0a3b54fc, 0x0a8dd5c8,
			0x0ae00d1c, 0x0b31fb7d, 0x0b83a16a, 0x0bd4ff63, 0x0c2615e8, 0x0c76e574, 0x0cc76e83, 0x0d17b191,
			0x0d67af16, 0x0db7678b, 0x0e06db66, 0x0e560b1e, 0x0ea4f726, 0x0ef39ff1, 0x0f4205f3, 0x0f90299c,
			0x0fde0b5c, 0x102baba2, 0x10790adb, 0x10c62975, 0x111307da, 0x115fa676, 0x11ac05b2, 0x11f825f6,
			0x124407ab, 0x128fab35, 0x12db10fc, 0x13263963, 0x137124ce, 0x13bbd3a0, 0x1406463b, 0x14507cfe,
			0x149a784b, 0x14e43880, 0x152dbdfc, 0x1577091b, 0x15c01a39, 0x1608f1b4, 0x16518fe4, 0x1699f524,
			0x16e221cd, 0x172a1637, 0x1771d2ba, 0x17b957ac, 0x1800a563, 0x1847bc33, 0x188e9c72, 0x18d54673,
			0x191bba89, 0x1961f905, 0x19a80239, 0x19edd675, 0x1a33760a, 0x1a78e146, 0x1abe1879, 0x1b031bef,
			0x1b47ebf7, 0x1b8c88db, 0x1bd0f2e9, 0x1c152a6c, 0x1c592fad, 0x1c9d02f6, 0x1ce0a492, 0x1d2414c8,
			0x1d6753e0, 0x1daa6222, 0x1ded3fd4, 0x1e2fed3d, 0x1e726aa1, 0x1eb4b847, 0x1ef6d673, 0x1f38c567,
			0x1f7a8568, 0x1fbc16b9, 0x1ffd799a, 0x203eae4e, 0x207fb517, 0x20c08e33, 0x210139e4, 0x2141b869,
			0x21820a01, 0x21c22eea, 0x22022762, 0x2241f3a7, 0x228193f5, 0x22c10889, 0x2300519e, 0x233f6f71,
			0x237e623d, 0x23bd2a3b, 0x23fbc7a6, 0x243a3ab7, 0x247883a8, 0x24b6a2b1, 0x24f4980b, 0x253263ec,
			0x2570068e, 0x25ad8026, 0x25ead0eb, 0x2627f914, 0x2664f8d5, 0x26a1d064, 0x26de7ff6, 0x271b07c0,
			0x275767f5, 0x2793a0c9, 0x27cfb26f, 0x280b9d1a, 0x284760fd, 0x2882fe49, 0x28be7531, 0x28f9c5e5,
			0x2934f097, 0x296ff577, 0x29aad4b6, 0x29e58e83, 0x2a20230e, 0x2a5a9285, 0x2a94dd19, 0x2acf02f7,
			0x2b09044d, 0x2b42e149, 0x2b7c9a19, 0x2bb62eea, 0x2bef9fe8, 0x2c28ed40, 0x2c62171e, 0x2c9b1dae,
			0x2cd4011c, 0x2d0cc192, 0x2d455f3c, 0x2d7dda44, 0x2db632d4, 0x2dee6917, 0x2e267d36, 0x2e5e6f5a,
			0x2e963fac, 0x2ecdee56, 0x2f057b7f, 0x2f3ce751, 0x2f7431f2, 0x2fab5b8b, 0x2fe26443, 0x30194c40,
			0x305013ab, 0x3086baa9, 0x30bd4161, 0x30f3a7f8, 0x3129ee96, 0x3160155e, 0x31961c76, 0x31cc0404,
			0x3201cc2c, 0x32377512, 0x326cfedb, 0x32a269ab, 0x32d7b5a5, 0x330ce2ed, 0x3341f1a7, 0x3376e1f5,
			0x33abb3fa, 0x33e067d9, 0x3414fdb4, 0x344975ad, 0x347dcfe7, 0x34b20c82, 0x34e62ba0, 0x351a2d62,
			0x354e11eb, 0x3581d959, 0x35b583ce, 0x35e9116a, 0x361c824d, 0x364fd697, 0x36830e69, 0x36b629e1,
			0x36e9291e, 0x371c0c41, 0x374ed367, 0x37817eaf, 0x37b40e39, 0x37e68222, 0x3818da88, 0x384b178a,
			0x387d3945, 0x38af3fd7, 0x38e12b5d, 0x3912fbf4, 0x3944b1b9, 0x39764cc9, 0x39a7cd41, 0x39d9333d,
			0x3a0a7eda, 0x3a3bb033, 0x3a6cc764, 0x3a9dc48a, 0x3acea7c0, 0x3aff7121, 0x3b3020c8, 0x3b60b6d1,
			0x3b913356, 0x3bc19672, 0x3bf1e041, 0x3c2210db, 0x3c52285c, 0x3c8226dd, 0x3cb20c79, 0x3ce1d948,
			0x3d118d66, 0x3d4128eb, 0x3d70abf1, 0x3da01691, 0x3dcf68e3, 0x3dfea301, 0x3e2dc503, 0x3e5ccf02,
			0x3e8bc117, 0x3eba9b59, 0x3ee95de1, 0x3f1808c7, 0x3f469c22, 0x3f75180b, 0x3fa37c98, 0x3fd1c9e2,
			0x40000000
		};
		// Special cases:
		//  * todo: log2(Inf) = +Inf
		//  * log2(0) = -Inf
		//  * log2(x<0) = NaN
		//  * log2(NaN) = NaN
		if (x.value <= 0) {
			if (x.value == 0) {
				return {value: -inf};
			}
			return {value: nan};
		}

		int32 n = Bits.scanReverse(x.value);
		static if (precision < 8) {/* todo: */ error_not_implemented_yet;}
		uint32 idx = (n > 8 ? x.value >> n - 8 : x.value << 8 - n) & 0xff;
		int32 value = tbl_log2[idx];
		static if (precision > 8) {
			uint32 mix = (n > 16
				? x.value >> n - 16
				: x.value << 16 - n
			) & 0xff;
			value += mix * (tbl_log2[idx + 1] - value) >> 8;
		}
		return {value: (n - precision << precision) + (value >> 30 - precision)};
	}

	/// Returns the natural logarithm of the argument `x`.
	static Fixed log(Fixed x) {
		// Special cases todo:
		//  * log(+Inf) = +Inf
		//  * log(0) = -Inf
		//  * log(x<0) = NaN
		//  * log(NaN) = NaN

		// ln(x) = log2(x) / log2(e) = log2(x) * ln(2);
		x = log2(x);
		if (!isFinite(x)) {
			return x;
		}
		// todo: more precision with division
		return mul_28(x, ln2_28);
	}

	/// Returns the decimal logarithm of the argument `x`.
	static Fixed log10(Fixed x) {
		// Special cases todo:
		//  * log10(+Inf) = +Inf
		//  * log10(0) = -Inf
		//  * log10(x<0) = NaN
		//  * log10(NaN) = NaN

		// log10(x) = log2(x) / log2(10) = log2(x) * log10(2);
		x = log2(x);
		if (!isFinite(x)) {
			return x;
		}
		return mul_28(x, lg2_28);
	}

	/// Returns the logarithm of the argument `x`.
	static Fixed log(Fixed x, Fixed base) {
		// log(x, base) := log2(x) / log2(base);
		x = log2(x);
		if (!isFinite(x)) {
			return x;
		}
		base = log2(base);
		if (!isFinite(base)) {
			return base;
		}
		return div(x, base);
	}


	/**	pow2(x) <=> 2 ** x
	 *	pow2(x) = pow2(n + q) = pow2(n) * pow2(q)
	 *	let n = floor(x);
	 *  let q = fract(x);
	 *  pow2(n) = 2 ** n = 1 << n
	 *	pow2(q) = 1 + look up from table
	 *	pow2(x) = (x >= 0) ? (pow2(q) << n) : (pow2(q) >> -n)
	 *	---------------------------------------------------
	**/
	static Fixed pow2(Fixed x) {
		static const uint32 tbl_pow2[257] = {
			// (2 ** x), x : [0, 1), x = (float64.exp2(i / 256.)) << 30
			0x40000000, 0x402c6be9, 0x4058f6a7, 0x4085a050, 0x40b268f9, 0x40df50b8, 0x410c57a1, 0x41397dcb,
			0x4166c34c, 0x41942838, 0x41c1aca7, 0x41ef50ad, 0x421d1461, 0x424af7d9, 0x4278fb2b, 0x42a71e6c,
			0x42d561b3, 0x4303c517, 0x433248ad, 0x4360ec8c, 0x438fb0cb, 0x43be957f, 0x43ed9abf, 0x441cc0a3,
			0x444c0740, 0x447b6ead, 0x44aaf701, 0x44daa053, 0x450a6aba, 0x453a564d, 0x456a6322, 0x459a9151,
			0x45cae0f1, 0x45fb521a, 0x462be4e2, 0x465c9960, 0x468d6fad, 0x46be67e0, 0x46ef8210, 0x4720be54,
			0x47521cc5, 0x47839d7a, 0x47b5408b, 0x47e70610, 0x4818ee21, 0x484af8d5, 0x487d2645, 0x48af7689,
			0x48e1e9b9, 0x49147fee, 0x4947393e, 0x497a15c4, 0x49ad1597, 0x49e038d0, 0x4a137f87, 0x4a46e9d6,
			0x4a7a77d4, 0x4aae299b, 0x4ae1ff43, 0x4b15f8e5, 0x4b4a169b, 0x4b7e587d, 0x4bb2bea4, 0x4be7492a,
			0x4c1bf828, 0x4c50cbb7, 0x4c85c3f1, 0x4cbae0ee, 0x4cf022c9, 0x4d25899b, 0x4d5b157e, 0x4d90c68b,
			0x4dc69cdc, 0x4dfc988c, 0x4e32b9b4, 0x4e69006d, 0x4e9f6cd3, 0x4ed5feff, 0x4f0cb70c, 0x4f439513,
			0x4f7a9930, 0x4fb1c37c, 0x4fe91412, 0x50208b0d, 0x50582887, 0x508fec9c, 0x50c7d765, 0x50ffe8fe,
			0x51382181, 0x5170810a, 0x51a907b4, 0x51e1b59a, 0x521a8ad7, 0x52538786, 0x528cabc3, 0x52c5f7a9,
			0x52ff6b54, 0x533906e0, 0x5372ca67, 0x53acb607, 0x53e6c9da, 0x542105fd, 0x545b6a8b, 0x5495f7a0,
			0x54d0ad5a, 0x550b8bd3, 0x55469329, 0x5581c377, 0x55bd1cda, 0x55f89f6f, 0x56344b52, 0x5670209f,
			0x56ac1f75, 0x56e847ee, 0x57249a29, 0x57611642, 0x579dbc56, 0x57da8c83, 0x581786e5, 0x5854ab9b,
			0x5891fac0, 0x58cf7474, 0x590d18d3, 0x594ae7fa, 0x5988e209, 0x59c7071c, 0x5a055751, 0x5a43d2c6,
			0x5a827999, 0x5ac14be9, 0x5b0049d4, 0x5b3f7377, 0x5b7ec8f1, 0x5bbe4a61, 0x5bfdf7e5, 0x5c3dd19b,
			0x5c7dd7a3, 0x5cbe0a1b, 0x5cfe6922, 0x5d3ef4d7, 0x5d7fad59, 0x5dc092c6, 0x5e01a53f, 0x5e42e4e2,
			0x5e8451cf, 0x5ec5ec25, 0x5f07b404, 0x5f49a98b, 0x5f8bccdb, 0x5fce1e12, 0x60109d50, 0x60534ab7,
			0x60962665, 0x60d9307a, 0x611c6918, 0x615fd05e, 0x61a3666d, 0x61e72b64, 0x622b1f66, 0x626f4291,
			0x62b39508, 0x62f816eb, 0x633cc85a, 0x6381a978, 0x63c6ba64, 0x640bfb40, 0x64516c2e, 0x64970d4e,
			0x64dcdec3, 0x6522e0ad, 0x6569132f, 0x65af7669, 0x65f60a7f, 0x663ccf91, 0x6683c5c3, 0x66caed35,
			0x6712460a, 0x6759d065, 0x67a18c67, 0x67e97a34, 0x683199ed, 0x6879ebb6, 0x68c26fb1, 0x690b2601,
			0x69540ec8, 0x699d2a2b, 0x69e6784c, 0x6a2ff94f, 0x6a79ad55, 0x6ac39484, 0x6b0daeff, 0x6b57fce8,
			0x6ba27e65, 0x6bed3398, 0x6c381ca6, 0x6c8339b2, 0x6cce8ae1, 0x6d1a1056, 0x6d65ca37, 0x6db1b8a7,
			0x6dfddbcb, 0x6e4a33c8, 0x6e96c0c2, 0x6ee382de, 0x6f307a41, 0x6f7da70f, 0x6fcb096f, 0x7018a185,
			0x70666f76, 0x70b47367, 0x7102ad7f, 0x71511de3, 0x719fc4b9, 0x71eea226, 0x723db650, 0x728d015d,
			0x72dc8373, 0x732c3cb9, 0x737c2d55, 0x73cc556d, 0x741cb528, 0x746d4cac, 0x74be1c20, 0x750f23ab,
			0x75606373, 0x75b1dba1, 0x76038c5b, 0x765575c7, 0x76a7980f, 0x76f9f358, 0x774c87cc, 0x779f5590,
			0x77f25ccd, 0x78459dac, 0x78991853, 0x78ecccec, 0x7940bb9e, 0x7994e491, 0x79e947ef, 0x7a3de5df,
			0x7a92be8a, 0x7ae7d219, 0x7b3d20b6, 0x7b92aa88, 0x7be86fb9, 0x7c3e7072, 0x7c94acdd, 0x7ceb2523,
			0x7d41d96d, 0x7d98c9e6, 0x7deff6b6, 0x7e476008, 0x7e9f0606, 0x7ef6e8da, 0x7f4f08ae, 0x7fa765ac,
			0x80000000
		};

		// Special cases:
		//  * exp(+Inf) = +Inf
		//  * exp(NaN) = NaN
		//  * exp(-Inf) = 0
		if (x.value > pow2max) {
			return as(inf);
		}
		if (x.value <= -pow2max) {
			if (x.isNan()) {
				return x;
			}
			return as(0);
		}

		uint32 idx = (x.value >> (precision - 8)) & 0xff;
		static if (precision < 8) {/* todo: */ error_not_implemented_yet;}
		uint32 q = tbl_pow2[idx];
		static if (precision > 8) {
			uint32 mix = (precision > 16
				? x.value >> (precision - 16)
				: x.value << (16 - precision)
			) & 0xff;
			q += mix * (tbl_pow2[idx + 1] - q) >> 8;
		}

		int32 n = (x.value >> precision) - (30 - precision);
		return as(n < 0 ? q >> -n : q << n);
	}

	/// Returns the base-e exponential: $ e^x $.
	static Fixed exp(Fixed x) {
		// Special cases todo:
		//  * exp(+Inf) = +Inf
		//  * exp(NaN) = NaN
		//  * exp(-Inf) = 0
		//  * exp(0) = 1

		// e ** x = exp(x) = pow2(x * log2(e))
		return pow2(mul_28(x, l2e_28));
	}

	/// Returns the base 10 exponential: $ 10^x $.
	static Fixed exp10(Fixed x) {
		// Special cases todo:
		//  * exp(+Inf) = +Inf
		//  * exp(NaN) = NaN
		//  * exp(-Inf) = 0
		//  * exp(0) = 1

		// 10 ** x = exp10(x) = pow2(x * log2(10))
		return pow2(mul_28(x, l2t_28));
	}

	/// Returns the square root of the parameter `x`: $\sqrt{x}$.
	static Fixed sqrt(Fixed x) {
		// Special cases todo:
		//  * sqrt(+Inf) = +Inf
		//  * sqrt(±0) = ±0
		//  * sqrt(x < 0) = NaN
		//  * sqrt(NaN) = NaN

		if (x.value <= 0) {
			if (x.value < 0) {
				return as(nan);
			}
			return as(0);
		}

		static if ((precision & 1) != 0) {
			return pow2(div(log2(x), 2));
		}

		// adapted from "Graphics Gems"
		uint32 root = 0;			// Clear root
		uint32 remHi = 0;			// Clear high part of partial remainder
		uint32 remLo = x.value;		// Get argument into low part of partial remainder
		for (uint32 count = 16 + (precision >> 1); count != 0; count -= 1) {
			remHi = (remHi << 2) | (remLo >> 30);		// get 2 bits of arg
			remLo <<= 2;
			root <<= 1;									// Get ready for the next bit in the root
			uint32 testDiv = (root << 1) + 1;			// Test radical
			if (remHi >= testDiv) {
				remHi -= testDiv;
				root += 1;
			}
		}
		return as(root);
	}

	/// Returns `x` raised to the power of `y`: $ x^y $.
	static Fixed pow(Fixed x, Fixed y) {
		if (y.value == 0 || x.value == one) {
			// pow(x, 0) = 1 for any x
			// pow(1, y) = 1 for any y
			return as(one);
		}
		if (y.value == one) {
			// pow(x, 1) = x for any x
			return x;
		}
		if (y.value == half) {
			// pow(x, .5) = sqrt(x)
			return sqrt(x);
		}
		if (x.value == nan || y.value == nan) {
			// pow(NaN, y) = NaN
			// pow(x, NaN) = NaN
			return as(nan);
		}
		if (x.value == 0) {
			// pow(±0, y) = ±Inf for y an odd integer < 0
			// pow(±0, -Inf) = +Inf
			// pow(±0, +Inf) = +0
			// pow(±0, y) = +Inf for finite y < 0 and not an odd integer
			// pow(±0, y) = ±0 for y an odd integer > 0
			// pow(±0, y) = +0 for finite y > 0 and not an odd integer
			if (y.value < 0) {
				return as(inf);
			}
			return as(0);
		}

		// Special cases todo:
		//  * pow(-1, ±Inf) = 1
		//  * pow(x, +Inf) = +Inf for |x| > 1
		//  * pow(x, -Inf) = +0 for |x| > 1
		//  * pow(x, +Inf) = +0 for |x| < 1
		//  * pow(x, -Inf) = +Inf for |x| < 1
		//  * pow(+Inf, y) = +Inf for y > 0
		//  * pow(+Inf, y) = +0 for y < 0
		//  * pow(-Inf, y) = Pow(-0, -y)
		//  * pow(x, y) = NaN for finite x < 0 and finite non-integer y

		if ((y.value & mask) == 0) {
			int32 res = one;
			int64 sqr = x.value;
			int32 pow = (y.value < 0 ? -y.value : y.value) >> precision;
			// todo: overflow check
			for (;pow != 0;) {
				if ((pow & 1) != 0) {
					res = res * sqr >> precision;
				}
				sqr = sqr * sqr >> precision;
				pow >>= 1;
			}
			return y.value < 0 ? inv(as(res)) : as(res);
		}

		return pow2(mul(y, log2(x)));
	}


	inline horner(int32 x, int32 a0, int32 a1) = a0 + int32(a1 * int64(x) >> precision);
	inline horner(int32 x, int32 a0, int32 a1, int32 a2) = horner(x, a0, horner(x, a1, a2));
	inline horner(int32 x, int32 a0, int32 a1, int32 a2, int32 a3) = horner(x, a0, horner(x, a1, a2, a3));
	inline horner(int32 x, int32 a0, int32 a1, int32 a2, int32 a3, int32 a4) = horner(x, a0, horner(x, a1, a2, a3, a4));
	inline horner(int32 x, int32 a0, int32 a1, int32 a2, int32 a3, int32 a4, int32 a5) = horner(x, a0, horner(x, a1, a2, a3, a4, a5));

	/// Returns the sine of the radian argument `x`.
	static Fixed sin(Fixed x) {
		// Special cases todo:
		//  * sin(±0) = ±0
		//  * sin(±Inf) = NaN
		//  * sin(NaN) = NaN

		enum: int32 {
			p0: one * +1. / 1;			// 1/1!
			p1: one * -1. / 6;			// 1/3!
			p2: one * +1. / 120;		// 1/5!
			p3: one * -1. / 5040;		// 1/7!
			p4: one * +1. / 362880;		// 1/9!
			p5: one * -1. / 39916800;	// 1/11!
		}

		x.value %= piMul2;
		if (x.value < 0) {
			x.value += piMul2;
		}

		// x in [0, 2*pi)
		int32 sign = 1;
		if (x.value >= pi) {
			x.value -= pi;
			sign = -1;
		}

		// x in [0, pi)
		if (x.value >= piDiv2) {
			x.value = pi - x.value;
		}

		// x in [0, pi / 2)
		int32 xsq = int64(x.value) * x.value >> precision;
		int32 res = horner(xsq, p0, p1, p2, p3, p4, p5);
		return mul(x, as(sign * res));
	}

	/// Returns the hyperbolic sine of the radian argument `x`.
	static Fixed sinh(Fixed x) {
		// Special cases:
		//  * sinh(±0) = ±0
		//  * sinh(±Inf) = ±Inf
		//  * sinh(NaN) = NaN
		if (x.value == 0) {
			return as(0);
		}
		if (!isFinite(x)) {
			return x;
		}

		// sinh(x) = (exp(x) - exp(-x)) / 2;
		return div(sub(exp(x), exp(neg(x))), 2);
	}

	/*todo:/// Returns the inverse sine of the radian argument `x`.
	static Fixed asin(Fixed x) {
		// Special cases:
		//  * asin(±0) = ±0
		//  * asin(x > 1) = NaN
		//  * asin(x < -1) = NaN

		// asin(x) = atan2(x, sqrt((1 + x) * (1 - x)));
		return atan2(x, sqrt((1 + x) * (1 - x)));
	}*/

	/*todo:/// Returns the inverse hyperbolic sine of the radian argument `x`.
	static Fixed asinh(Fixed x) {
		// Special cases:
		//  * asinh(±0) = ±0
		//  * asinh(±Inf) = ±Inf
		//  * asinh(NaN) = NaN

		// asinh(x) = log(x + sqrt(x * x + 1));
		return log(x + sqrt(x * x + 1));
	}*/


	/// Returns the cosine of the radian argument `x`.
	static Fixed cos(Fixed x) {
		// Special cases todo:
		//  * cos(±Inf) = NaN
		//  * cos(NaN) = NaN

		enum: int32 {
			p0: one * +1. / 1;			// 1/0!
			p1: one * -1. / 2;			// 1/2!
			p2: one * +1. / 24;			// 1/4!
			p3: one * -1. / 720;		// 1/6!
			p4: one * +1. / 40320;		// 1/8!
			p5: one * -1. / 3628800;	// 1/10!
		}

		x.value %= piMul2;
		if (x.value < 0) {
			x.value += piMul2;
		}

		// x in [0, 2*pi)
		if (x.value > pi) {
			x.value = piMul2 - x.value;
		}

		// x in [0, pi)
		int32 sign = 1;
		if (x.value >= piDiv2) {
			x.value -= pi;
			sign = -1;
		}

		// x in [0, pi / 2)
		int32 xsq = int64(x.value) * x.value >> precision;
		int32 res = horner(xsq, p0, p1, p2, p3, p4, p5);
		return as(sign * res);
	}

	/*todo:/// Returns the hyperbolic cosine of the radian argument `x`.
	static Fixed cosh(Fixed x) {
		// Special cases:
		//  * cosh(±0) = 1
		//  * cosh(±Inf) = +Inf
		//  * cosh(NaN) = NaN

		if (x.value == 0) {
			return as(1);
		}

		// cosh(x) = (exp(x) + exp(-x)) / 2;
		return (exp(x) + exp(-x)) / 2;
	}*/

	/*todo:/// Returns the inverse cosine of the radian argument `x`.
	static Fixed acos(Fixed x) {
		// Special cases:
		//  * acos(x > 1) = NaN
		//  * acos(x < -1) = NaN

		// acos(x) = atan2(sqrt((1 + x) * (1 - x)), x);
		return atan2(sqrt((1 + x) * (1 - x)), x);
	}*/

	/*todo:/// Returns the inverse hyperbolic cosine of the radian argument `x`.
	static Fixed acosh(Fixed x) {
		// Special cases:
		//  * acosh(+Inf) = +Inf
		//  * acosh(x < 1) = NaN
		//  * acosh(NaN) = NaN

		// acosh(x) = log(x + sqrt(x * x - 1));
		return log(x + sqrt(x * x - 1));
	}*/


	/// Returns the tangent of the radian argument `x`.
	static Fixed tan(Fixed x) {
		// Special cases todo:
		//  * tan(±0) = ±0
		//  * tan(±Inf) = NaN
		//  * tan(NaN) = NaN
		return div(sin(x), cos(x));
	}

	/*todo:/// Returns the hyperbolic tangent of the radian argument `x`.
	static Fixed tanh(Fixed x) {
		// Special cases:
		//  * tanh(±0) = ±0
		//  * tanh(±Inf) = ±1
		//  * tanh(NaN) = NaN

		// tanh(x) = sinh(x) / cosh(x)
		//         = (exp(x) - exp(-x)) / (exp(x) + exp(-x))
		//         = (exp(2 * x) - 1) / (exp(2 * x) + 1)
		//         = (1 - exp(-2*x)) / (exp(-2*x) - 1 + 2)
		//         ...
		//         = 1 - 2 / (exp(2 * x) + 1)
		x = exp(mul(x, 2));
		return div(sub(x, one), add(x, one));
	}*/

	/*todo:/// Returns the inverse tangent of the radian argument `x`.
	static Fixed atan(Fixed x) {
		// Special cases:
		//  * atan(±0) = ±0
		//  * atan(±Inf) = ±Pi/2
	}*/

	/*todo:/// Returns the inverse tangent of `y / x`.
	static Fixed atan2(Fixed y, Fixed x) {
		// Special cases (in order):
		//  * atan2(y, NaN) = NaN
		//  * atan2(NaN, x) = NaN
		//  * atan2(+0, x>=0) = +0
		//  * atan2(-0, x>=0) = -0
		//  * atan2(+0, x<=-0) = +Pi
		//  * atan2(-0, x<=-0) = -Pi
		//  * atan2(y>0, 0) = +Pi/2
		//  * atan2(y<0, 0) = -Pi/2
		//  * atan2(+Inf, +Inf) = +Pi/4
		//  * atan2(-Inf, +Inf) = -Pi/4
		//  * atan2(+Inf, -Inf) = 3Pi/4
		//  * atan2(-Inf, -Inf) = -3Pi/4
		//  * atan2(y, +Inf) = 0
		//  * atan2(y>0, -Inf) = +Pi
		//  * atan2(y<0, -Inf) = -Pi
		//  * atan2(+Inf, x) = +Pi/2
		//  * atan2(-Inf, x) = -Pi/2
	}*/

	/*todo:/// Returns the inverse hyperbolic tangent of the radian argument `x`.
	static Fixed atanh(Fixed x) {
		// Special cases:
		//  * atanh(1) = +Inf
		//  * atanh(±0) = ±0
		//  * atanh(-1) = -Inf
		//  * atanh(x > 1) = NaN
		//  * atanh(x < -1) = NaN
		//  * atanh(NaN) = NaN
		//  ? atanh(-x) = -atanh(x)

		// atanh(x) = .5 * log((1 + x) / (1 - x))
		return .5 * log((1 + x) / (1 - x));
	}*/

	/// Returns the cotangent of the radian argument `x`.
	// todo: inline cot(float64 x) = 1 / tan(x);

	/// Returns the hyperbolic cotangent of the radian argument `x`.
	// todo: inline coth(float64 x) = 1 / tanh(x);

	/// Returns the inverse cotangent of the radian argument `x`.
	// todo: inline acot(float64 x) = x == 0 ? pi / 2 : atan(1 / x);

	/// Returns the inverse hyperbolic cotangent of the radian argument `x`.
	// todo: inline acoth(float64 x) = x == 1 ? inf : x == -1 ? -inf : .5 * log((x + 1) / (x - 1));


	/// Returns the secant of the radian argument `x`.
	// todo: inline sec(float64 x) = 1 / cos(x);

	/// Returns the hyperbolic secant of the radian argument `x`.
	// todo: inline sech(float64 x) = 1 / cosh(x);

	/// Returns the inverse secant of the radian argument `x`.
	// todo: inline asec(float64 x) = x == 0 ? inf : acos(1 / x);

	/// Returns the inverse hyperbolic secant of the radian argument `x`.
	// todo: inline asech(float64 x) = x == 0 ? inf : x == 1 ? 0 : log((sqrt(1 - x * x) + 1) / x);


	/// Returns the cosecant of the radian argument `x`.
	// todo: inline csc(float64 x) = 1 / sin(x);

	/// Returns the hyperbolic cosecant of the radian argument `x`.
	// todo: inline csch(float64 x) = 1 / sinh(x);

	/// Returns the inverse cosecant of the radian argument `x`.
	// todo: inline acsc(float64 x) = x == 0 ? inf : asin(1 / x);

	/// Returns the inverse hyperbolic cosecant of the radian argument `x`.
	// todo: inline acsch(float64 x) = x == 0 ? inf : x < 0 ? log((1 - sqrt(1 + x * x)) / x) : log((1 + sqrt(1 + x * x)) / x);


	/// Converts the input to degrees from radians: $radians * 180 / pi$
	static Fixed degrees(Fixed radians) {
		return as(radians.value * int64(r2d_24) >> 24);
	}

	/// Converts the input to radians from degrees: $degrees * pi / 180$
	static Fixed radians(Fixed degrees) {
		return mul_28(degrees, d2r_28);
	}
}

///@public
inline Fixed(int32 value) = Fixed.as(value << Fixed.precision);

///@public
inline int32(const Fixed value&) = value.value >> Fixed.precision;

///@public
//inline Fixed(float64 value) = Fixed.as(value * (1 << Fixed.precision));
Fixed Fixed(float64 value) {
	Fixed result = Fixed.as(value * (1 << Fixed.precision));
	if (result.value == Fixed.nan) {
		if (value != value) {
			result.value = Fixed.nan;
		}
		else if (value > 0) {
			result.value = Fixed.inf;
		}
		else if (value < 0) {
			result.value = -Fixed.inf;
		}
	}
	return result;
}

///@public
//inline float64(const Fixed value&) = value.value / float64(1 << Fixed.precision);
float64 float64(Fixed x) {
	if (x.value == Fixed.nan) {
		return Math.nan;
	}
	if (x.value == Fixed.inf) {
		return Math.inf;
	}
	if (x.value == -Fixed.inf) {
		return -Math.inf;
	}

	return x.value / float64(1 << Fixed.precision);
}
