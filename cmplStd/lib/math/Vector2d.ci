/// A 2d vector (2x float64)
struct vec2d: 0 {
	/// Access the components as an array
	float64 data[2];
	struct {
		/// X component of the vector
		float64 x;
		/// Y component of the vector
		float64 y;
	}
}

/// Initialize with given x, y components
vec2d vec2d(float64 x, float64 y) {
	return {
		x: x;
		y: y;
	};
}

/// Component wise add the two vectors.
inline add(vec2d a, vec2d b) = vec2d(emit(struct(a), struct(b), add.p2d));

/// Component wise subtract the two vectors.
inline sub(vec2d a, vec2d b) = vec2d(emit(struct(a), struct(b), sub.p2d));

/// Component wise multiply the two vectors.
inline mul(vec2d a, vec2d b) = vec2d(emit(struct(a), struct(b), mul.p2d));

/// Component wise divide the two vectors.
inline div(vec2d a, vec2d b) = vec2d(emit(struct(a), struct(b), div.p2d));

/// Component wise select the minimum from the two vectors.
inline min(vec2d a, vec2d b) = vec2d(emit(struct(a), struct(b), min.p2d));

/// Component wise select the maximum from the two vectors.
inline max(vec2d a, vec2d b) = vec2d(emit(struct(a), struct(b), max.p2d));

/// Compare the two vectors for equality.
inline ceq(vec2d a, vec2d b) = vec2d(emit(struct(a), struct(b), ceq.p2d));

/// Dot product of thw two vectors
inline dot(const vec2d a&, const vec2d b&) = a.x * b.x + a.y * b.y;
