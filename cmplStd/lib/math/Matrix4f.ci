/// A 4x4 matrix
struct mat4f: 0 {
	/// Access elements as an array: m[1][0]
	float32 m[4][4];

	/// Access elements as a flatten array: data[4] => m[1][0]
	float32 data[16];

	/// Access elements as an array of vectors: v[1].x => m[1][0]
	vec4f v[4];

	struct {
		/// The first row as a vector
		vec4f x;
		/// The second row as a vector
		vec4f y;
		/// The third row as a vector
		vec4f z;
		/// The fourth row as a vector
		vec4f w;
	}
	struct {
		/// The first element of the first row
		float32 xx;
		/// The second element of the first row
		float32 xy;
		/// The third element of the first row
		float32 xz;
		/// The fourth element of the first row
		float32 xw;

		/// The first element of the second row
		float32 yx;
		/// The second element of the second row
		float32 yy;
		/// The third element of the second row
		float32 yz;
		/// The fourth element of the second row
		float32 yw;

		/// The first element of the third row
		float32 zx;
		/// The second element of the third row
		float32 zy;
		/// The third element of the third row
		float32 zz;
		/// The fourth element of the third row
		float32 zw;

		/// The first element of the fourth row
		float32 wx;
		/// The second element of the fourth row
		float32 wy;
		/// The third element of the fourth row
		float32 wz;
		/// The fourth element of the fourth row
		float32 ww;
	}
}

/// Initialize all elements with the given values
mat4f mat4f(float32 xx, float32 xy, float32 xz, float32 xw,
			float32 yx, float32 yy, float32 yz, float32 yw,
			float32 zx, float32 zy, float32 zz, float32 zw,
			float32 wx, float32 wy, float32 wz, float32 ww) {
	return {
		xx: xx; xy: xy; xz: xz; xw: xw;
		yx: yx; yy: yy; yz: yz; yw: yw;
		zx: zx; zy: zy; zz: zz; zw: zw;
		wx: wx; wy: wy; wz: wz; ww: ww;
	};
}

/// Initialize matrix with row vectors
mat4f mat4f(const vec4f x&, const vec4f y&, const vec4f z&, const vec4f w&) {
	return { x: x, y: y, z: z, w: w };
}

/// Multiply with vector: dot product of the first 3 elements
inline dp3(const mat4f mat&, const vec4f vec&) = vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1f);
/// Multiply with vector: homogeneous dot product
inline dph(const mat4f mat&, const vec4f vec&) = vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec));
/// Multiply with vector: full dot product
inline dp4(const mat4f mat&, const vec4f vec&) = vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec));

/// Transpose the matrix
mat4f transpose(const mat4f mat) {
	return {
		xx: mat.xx; xy: mat.yx; xz: mat.zx; xw: mat.wx;
		yx: mat.xy; yy: mat.yy; yz: mat.zy; yw: mat.wy;
		zx: mat.xz; zy: mat.yz; zz: mat.zz; zw: mat.wz;
		wx: mat.xw; wy: mat.yw; wz: mat.zw; ww: mat.ww;
	};
}

/// Multiply two matrices (rows * cols)
mat4f mul(const mat4f lhs&, const mat4f rhs&) {
	mat4f transposed = transpose(rhs);
	return {
		x: dp4(transposed, lhs.x);
		y: dp4(transposed, lhs.y);
		z: dp4(transposed, lhs.z);
		w: dp4(transposed, lhs.w);
	};
}

/// Build a rotation matrix
// adapted from: https://sites.google.com/site/glennmurray/Home/rotation-matrices-and-formulas
mat4f rotation(const vec4f center&, const vec4f direction&, float32 angle) {
	float32 len = direction.length();
	if (len < 1e-9) {
		trace("invalid direction of rotation", direction);
		return {
			x: vec4f(0, 0, 0, 0);
			y: vec4f(0, 0, 0, 0);
			z: vec4f(0, 0, 0, 0);
			w: vec4f(0, 0, 0, 0);
		};
	}
	float32 x = direction.x / len;
	float32 y = direction.y / len;
	float32 z = direction.z / len;
	float32 cx = center.x;
	float32 cy = center.y;
	float32 cz = center.z;
	float32 xx = x * x;
	float32 xy = x * y;
	float32 xz = x * z;
	float32 yy = y * y;
	float32 yz = y * z;
	float32 zz = z * z;

	float32 s = Math.sin(angle);
	float32 c = Math.cos(angle);
	float32 k = 1 - c;

	return {
		xx: xx + (yy + zz) * c;
		xy: xy * k - z * s;
		xz: xz * k + y * s;
		xw: (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s;

		yx: xy * k + z * s;
		yy: yy + (xx + zz) * c;
		yz: yz * k - x * s;
		yw: (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s;

		zx: xz * k - y * s;
		zy: yz * k + x * s;
		zz: zz + (xx + yy) * c;
		zw: (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s;

		w: vec4f(0, 0, 0, 1);
	};
}

/// Build a rotation matrix
mat4f rotation(const vec4f direction&, float angle) {
	float32 xx = direction.x * direction.x;
	float32 yy = direction.y * direction.y;
	float32 zz = direction.z * direction.z;
	float32 xy = direction.x * direction.y;
	float32 xz = direction.x * direction.z;
	float32 yz = direction.y * direction.z;
	float32 s = Math.sin(angle);
	float32 c = Math.cos(angle);
	float32 k = 1 - c;
	vec4f tmp = mul(direction, s);

	return {
		xx: k * xx + c;
		xy: k * xy - tmp.z;
		xz: k * xz + tmp.y;
		xw: 0;

		yx: k * xy + tmp.z;
		yy: k * yy + c;
		yz: k * yz - tmp.x;
		yw: 0;

		zx: k * xz - tmp.y;
		zy: k * yz + tmp.x;
		zz: k * zz + c;
		zw: 0;

		w: vec4f(0, 0, 0, 1);
	};
}

/// Build a translation matrix
mat4f translation(const vec4f direction&, float32 amount) {
	return {
		xx: 1; xy: 0; xz: 0; xw: direction.x * amount;
		yx: 0; yy: 1; yz: 0; yw: direction.y * amount;
		zx: 0; zy: 0; zz: 1; zw: direction.z * amount;
		wx: 0; wy: 0; wz: 0; ww: 1;
	};
}

/// Build a scaling matrix
mat4f scale(const vec4f direction&, float32 amount) {
	inline rcp(float32 val) = (val < 0 ? -val : val) < 1e-30 ? 0 : 1 / val;
	return {
		xx: rcp(direction.x * amount); xy: 0; xz: 0; xw: 0;
		yx: 0; yy: rcp(direction.y * amount); yz: 0; yw: 0;
		zx: 0; zy: 0; zz: rcp(direction.z * amount); zw: 0;
		wx: 0; wy: 0; wz: 0; ww: 1;
	};
}

/// Build the inverse of the matrix
// adapted from: https://github.com/glslify/glsl-inverse/blob/master/index.glsl
mat4f inverse(const mat4f mat&) {
	float32 a00 = mat.xx;
	float32 a01 = mat.xy;
	float32 a02 = mat.xz;
	float32 a03 = mat.xw;

	float32 a10 = mat.yx;
	float32 a11 = mat.yy;
	float32 a12 = mat.yz;
	float32 a13 = mat.yw;

	float32 a20 = mat.zx;
	float32 a21 = mat.zy;
	float32 a22 = mat.zz;
	float32 a23 = mat.zw;

	float32 a30 = mat.wx;
	float32 a31 = mat.wy;
	float32 a32 = mat.wz;
	float32 a33 = mat.ww;

	float32 b00 = a00 * a11 - a01 * a10;
	float32 b01 = a00 * a12 - a02 * a10;
	float32 b02 = a00 * a13 - a03 * a10;
	float32 b03 = a01 * a12 - a02 * a11;
	float32 b04 = a01 * a13 - a03 * a11;
	float32 b05 = a02 * a13 - a03 * a12;
	float32 b06 = a20 * a31 - a21 * a30;
	float32 b07 = a20 * a32 - a22 * a30;
	float32 b08 = a20 * a33 - a23 * a30;
	float32 b09 = a21 * a32 - a22 * a31;
	float32 b10 = a21 * a33 - a23 * a31;
	float32 b11 = a22 * a33 - a23 * a32;

	float32 det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	return {
		xx: (a11 * b11 - a12 * b10 + a13 * b09) / det;
		xy: (a02 * b10 - a01 * b11 - a03 * b09) / det;
		xz: (a31 * b05 - a32 * b04 + a33 * b03) / det;
		xw: (a22 * b04 - a21 * b05 - a23 * b03) / det;
		yx: (a12 * b08 - a10 * b11 - a13 * b07) / det;
		yy: (a00 * b11 - a02 * b08 + a03 * b07) / det;
		yz: (a32 * b02 - a30 * b05 - a33 * b01) / det;
		yw: (a20 * b05 - a22 * b02 + a23 * b01) / det;
		zx: (a10 * b10 - a11 * b08 + a13 * b06) / det;
		zy: (a01 * b08 - a00 * b10 - a03 * b06) / det;
		zz: (a30 * b04 - a31 * b02 + a33 * b00) / det;
		zw: (a21 * b02 - a20 * b04 - a23 * b00) / det;
		wx: (a11 * b07 - a10 * b09 - a12 * b06) / det;
		wy: (a00 * b09 - a01 * b07 + a02 * b06) / det;
		wz: (a31 * b01 - a30 * b03 - a32 * b00) / det;
		ww: (a20 * b03 - a21 * b01 + a22 * b00) / det;
	};
}
