/// Utility functions manipulating binary representations
static struct Bits {
	/// convert unsigned to signed integer
	inline signed(uint8 value) = int8(value);

	/// convert unsigned to signed integer
	inline signed(uint16 value) = int16(value);

	/// convert unsigned to signed integer
	inline signed(uint32 value) = int32(value);

	/// convert unsigned to signed integer
	inline signed(uint64 value) = int64(value);

	/// convert signed to unsigned integer
	inline unsigned(int8 value) = uint8(value);

	/// convert signed to unsigned integer
	inline unsigned(int16 value) = uint16(value);

	/// convert signed to unsigned integer
	inline unsigned(int32 value) = uint32(value);

	/// convert signed to unsigned integer
	inline unsigned(int64 value) = uint64(value);

	/// return the 32 bit floating point value as an integer
	inline fromFloat32(float32 value) = uint32(emit(float32(value)));
	/// return the 64 bit floating point value as an integer
	inline fromFloat64(float64 value) = uint64(emit(float64(value)));

	/// return the 32 bit integer as a floating point value
	inline asFloat32(uint32 value) = float32(emit(uint32(value)));
	/// return the 64 bit integer as a floating point value
	inline asFloat64(uint64 value) = float64(emit(uint64(value)));
	/// return the two 32 bit integers merged as a floating point value
	inline asFloat64(uint32 hi, uint32 lo) = float64(emit(uint64(uint64(hi) << 32 | lo)));

	///@public
	int32 zxt32(int32 value, int32 offs, int32 count) {
		static if (preferNativeCalls && typename(uint32.zxt) != null) {
			// use the native method if available
			return uint32.zxt(value, offs, count);
		}

		return uint32(value << (32 - (offs + count))) >> (32 - count);
	}

	///@public
	int32 sxt32(int32 value, int32 offs, int32 count) {
		static if (preferNativeCalls && typename(uint32.sxt) != null) {
			// use the native method if available
			return uint32.sxt(value, offs, count);
		}

		return int32(value << (32 - (offs + count))) >> (32 - count);
	}

	///@public
	int64 zxt64(int64 value, int32 offs, int32 count) {
		static if (preferNativeCalls && typename(uint64.zxt) != null) {
			// use the native method if available
			return uint64.zxt(value, offs, count);
		}

		return uint64(value << (64 - (offs + count))) >> (64 - count);
	}

	///@public
	int64 sxt64(int64 value, int32 offs, int32 count) {
		static if (preferNativeCalls && typename(uint64.sxt) != null) {
			// use the native method if available
			return uint64.sxt(value, offs, count);
		}

		return int64(value << (64 - (offs + count))) >> (64 - count);
	}

	/// convert a 64 bit value between Little endian and Big endian
	uint64 swapBytes(uint64 x) {
		x = (x & 0x00000000ffffffff) << 32 | (x & 0xffffffff00000000) >> 32;
		x = (x & 0x0000ffff0000ffff) << 16 | (x & 0xffff0000ffff0000) >> 16;
		x = (x & 0x00ff00ff00ff00ff) << 8  | (x & 0xff00ff00ff00ff00) >> 8;
		return x;
	}

	/// convert a 32 bit value between Little endian and Big endian
	uint32 swapBytes(uint32 x) {
		x = (x & 0x0000ffff) << 16 | (x & 0xffff0000) >> 16;
		x = (x & 0x00ff00ff) << 8  | (x & 0xff00ff00) >> 8;
		return x;
	}

	/// convert a 16 bit value between Little endian and Big endian
	uint16 swapBytes(uint16 x) {
		return (x & 0x00ff) << 8 | (x & 0xff00) >> 8;
	}

	/// convert a 64 bit value between Little endian and Big endian
	inline swapBytes(int64 x) = int64(swapBytes(uint64(x)));

	/// convert a 32 bit value between Little endian and Big endian
	inline swapBytes(int32 x) = int32(swapBytes(uint32(x)));

	/// convert a 16 bit value between Little endian and Big endian
	inline swapBytes(int16 x) = int16(swapBytes(uint16(x)));


	/// find the index of the most significant(highest) bit
	int scanReverse(uint64 x) {
		static if (preferNativeCalls && typename(uint64.bsr) != null) {
			// use the native method if available
			return uint64.bsr(x);
		}
		if (x == 0) {
			return -1;
		}

		int result = 0;
		if (x & 0xffffffff00000000) {
			result += 32;
			x >>= 32;
		}
		if (x & 0xffff0000) {
			result += 16;
			x >>= 16;
		}
		if (x & 0xff00) {
			result += 8;
			x >>= 8;
		}
		if (x & 0xf0) {
			result += 4;
			x >>= 4;
		}
		if (x & 0xc) {
			result += 2;
			x >>= 2;
		}
		if (x & 0x2) {
			result += 1;
		}
		return result;
	}

	/// find the index of the most significant(highest) bit
	inline scanReverse(int64 x) = scanReverse(uint64(x));

	/// find the index of the most significant(highest) bit
	int scanReverse(uint32 x) {
		static if (preferNativeCalls && typename(uint32.bsr) != null) {
			// use the native method if available
			return uint32.bsr(x);
		}
		if (x == 0) {
			return -1;
		}

		int result = 0;
		if (x & 0xffff0000) {
			result += 16;
			x >>= 16;
		}
		if (x & 0xff00) {
			result += 8;
			x >>= 8;
		}
		if (x & 0xf0) {
			result += 4;
			x >>= 4;
		}
		if (x & 0xc) {
			result += 2;
			x >>= 2;
		}
		if (x & 0x2) {
			result += 1;
		}
		return result;
	}

	/// find the index of the most significant(highest) bit
	inline scanReverse(int32 x) = scanReverse(uint32(x));

	/// find the index of the most significant(highest) bit
	int scanReverse(uint16 x) {
		if (x == 0) {
			return -1;
		}

		int result = 0;
		if (x & 0xff00) {
			result += 8;
			x >>= 8;
		}
		if (x & 0xf0) {
			result += 4;
			x >>= 4;
		}
		if (x & 0xc) {
			result += 2;
			x >>= 2;
		}
		if (x & 0x2) {
			result += 1;
		}
		return result;
	}

	/// find the index of the most significant(highest) bit
	inline scanReverse(int16 x) = scanReverse(uint16(x));

	/// find the index of the most significant(highest) bit
	int scanReverse(uint8 x) {
		if (x == 0) {
			return -1;
		}

		int result = 0;
		if (x & 0xf0) {
			result += 4;
			x >>= 4;
		}
		if (x & 0xc) {
			result += 2;
			x >>= 2;
		}
		if (x & 0x2) {
			result += 1;
		}
		return result;
	}

	/// find the index of the most significant(highest) bit
	inline scanReverse(int8 x) = scanReverse(uint8(x));


	/// find the index of the least significant(lowest) bit
	int scanForward(uint64 x) {
		static if (preferNativeCalls && typename(uint64.bsf) != null) {
			// use the native method if available
			return uint64.bsf(x);
		}

		if (x == 0) {
			return -1;
		}

		int result = 0;
		if ((x & 0xffffffff) == 0) {
			result += 32;
			x >>= 32;
		}
		if ((x & 0xffff) == 0) {
			result += 16;
			x >>= 16;
		}
		if ((x & 0xff) == 0) {
			result += 8;
			x >>= 8;
		}
		if ((x & 0xf) == 0) {
			result += 4;
			x >>= 4;
		}
		if ((x & 0x3) == 0) {
			result += 2;
			x >>= 2;
		}
		if ((x & 0x1) == 0) {
			result += 1;
		}
		return result;
	}

	/// find the index of the least significant(lowest) bit
	inline scanForward(int64 x) = scanForward(uint64(x));

	/// find the index of the least significant(lowest) bit
	int scanForward(uint32 x) {
		static if (preferNativeCalls && typename(uint32.bsf) != null) {
			// use the native method if available
			return uint32.bsf(x);
		}

		if (x == 0) {
			return -1;
		}

		int result = 0;
		if ((x & 0xffff) == 0) {
			result += 16;
			x >>= 16;
		}
		if ((x & 0xff) == 0) {
			result += 8;
			x >>= 8;
		}
		if ((x & 0xf) == 0) {
			result += 4;
			x >>= 4;
		}
		if ((x & 0x3) == 0) {
			result += 2;
			x >>= 2;
		}
		if ((x & 0x1) == 0) {
			result += 1;
		}
		return result;
	}

	/// find the index of the least significant(lowest) bit
	inline scanForward(int32 x) = scanForward(uint32(x));

	/// find the index of the least significant(lowest) bit
	int scanForward(uint16 x) {
		if (x == 0) {
			return -1;
		}

		int result = 0;
		if ((x & 0xff) == 0) {
			result += 8;
			x >>= 8;
		}
		if ((x & 0xf) == 0) {
			result += 4;
			x >>= 4;
		}
		if ((x & 0x3) == 0) {
			result += 2;
			x >>= 2;
		}
		if ((x & 0x1) == 0) {
			result += 1;
		}
		return result;
	}

	/// find the index of the least significant(lowest) bit
	inline scanForward(int16 x) = scanForward(uint16(x));

	/// find the index of the least significant(lowest) bit
	int scanForward(uint8 x) {
		if (x == 0) {
			return -1;
		}

		int result = 0;
		if ((x & 0xf) == 0) {
			result += 4;
			x >>= 4;
		}
		if ((x & 0x3) == 0) {
			result += 2;
			x >>= 2;
		}
		if ((x & 0x1) == 0) {
			result += 1;
		}
		return result;
	}

	/// find the index of the least significant(lowest) bit
	inline scanForward(int8 x) = scanForward(uint8(x));


	/// keep the highest bit set
	uint64 keepMsb(uint64 x) {
		static if (preferNativeCalls && typename(uint64.hib) != null) {
			// use the native method if available
			return uint64.hib(x);
		}

		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		x |= x >> 32;
		return x - (x >> 1);
	}

	/// keep the highest bit set
	inline keepMsb(int64 x) = keepMsb(uint64(x));

	/// keep the highest bit set
	uint32 keepMsb(uint32 x) {
		static if (preferNativeCalls && typename(uint32.hib) != null) {
			// use the native method if available
			return uint32.hib(x);
		}

		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		return x - (x >> 1);
	}

	/// keep the highest bit set
	inline keepMsb(int32 x) = keepMsb(uint32(x));


	/// keep the lowest bit set
	inline keepLsb(uint64 x) = uint64(x & -x);

	/// keep the lowest bit set
	inline keepLsb(int64 x) = keepLsb(uint64(x));

	/// keep the lowest bit set
	inline keepLsb(uint32 x) = uint32(x & -x);

	/// keep the lowest bit set
	inline keepLsb(int32 x) = keepLsb(uint32(x));

	/// keep the lowest bit set
	inline keepLsb(uint16 x) = uint16(x & -x);

	/// keep the lowest bit set
	inline keepLsb(int16 x) = keepLsb(uint16(x));

	/// keep the lowest bit set
	inline keepLsb(uint8 x) = uint8(x & -x);

	/// keep the lowest bit set
	inline keepLsb(int8 x) = keepLsb(uint8(x));


	/// count bits set to one
	int countOnes(uint64 x) {
		static if (preferNativeCalls && typename(uint64.pop) != null) {
			// use the native method if available
			return uint64.pop(x);
		}

		x -= (x >> 1) & 0x5555555555555555;
		x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333);
		x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f;
		x += x >> 8;
		x += x >> 16;
		x += x >> 32;
		return x & 0x3f;
	}

	/// count bits set to one
	inline countOnes(int64 x) = countOnes(uint64(x));

	/// count bits set to one
	int countOnes(uint32 x) {
		static if (preferNativeCalls && typename(uint32.pop) != null) {
			// use the native method if available
			return uint32.pop(x);
		}

		x -= (x >> 1) & 0x55555555;
		x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
		x = (x + (x >> 4)) & 0x0f0f0f0f;
		x += x >> 8;
		x += x >> 16;
		return x & 0x3f;
	}

	/// count bits set to one
	inline countOnes(int32 x) = countOnes(uint32(x));


	/// reverse all the bits
	uint64 swapBits(uint64 x) {
		static if (preferNativeCalls && typename(uint64.swap) != null) {
			// use the native method if available
			return uint64.swap(x);
		}

		x = ((x >> 1) & 0x5555555555555555) | ((x & 0x5555555555555555) << 1);
		x = ((x >> 2) & 0x3333333333333333) | ((x & 0x3333333333333333) << 2);
		x = ((x >> 4) & 0x0f0f0f0f0f0f0f0f) | ((x & 0x0f0f0f0f0f0f0f0f) << 4);
		x = ((x >> 8) & 0x00ff00ff00ff00ff) | ((x & 0x00ff00ff00ff00ff) << 8);
		x = ((x >> 16) & 0x0000ffff0000ffff) | ((x & 0x0000ffff0000ffff) << 16);
		return (x >> 32) | (x << 32);
	}

	/// reverse all the bits
	inline swapBits(int64 x) = swapBits(uint64(x));

	/// reverse all the bits
	uint32 swapBits(uint32 x) {
		static if (preferNativeCalls && typename(uint32.swap) != null) {
			// use the native method if available
			return uint32.swap(x);
		}

		x = ((x >> 1) & 0x55555555) | ((x & 0x55555555) << 1);
		x = ((x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);
		x = ((x >> 4) & 0x0f0f0f0f) | ((x & 0x0f0f0f0f) << 4);
		x = ((x >> 8) & 0x00ff00ff) | ((x & 0x00ff00ff) << 8);
		return (x >> 16) | (x << 16);
	}

	/// reverse all the bits
	inline swapBits(int32 x) = swapBits(uint32(x));

	/// reverse all the bits
	uint16 swapBits(uint16 x) {
		x = ((x >> 1) & 0x5555) | ((x & 0x5555) << 1);
		x = ((x >> 2) & 0x3333) | ((x & 0x3333) << 2);
		x = ((x >> 4) & 0x0f0f) | ((x & 0x0f0f) << 4);
		return (x >> 8) | (x << 8);
	}

	/// reverse all the bits
	inline swapBits(int16 x) = swapBits(uint16(x));

	/// reverse all the bits
	uint8 swapBits(uint8 x) {
		x = ((x >> 1) & 0x55) | ((x & 0x55) << 1);
		x = ((x >> 2) & 0x33) | ((x & 0x33) << 2);
		return (x >> 4) | (x << 4);
	}

	/// reverse all the bits
	inline swapBits(int8 x) = swapBits(uint8(x));

	/// branch-less clamp
	// adapted from: androidx.constraintlayout.widget.ConstraintAttribute#clamp
	int32 clamp(int32 value, int32 max) {
		value &= ~(value >> 31);
		value -= max;
		value &= (value >> 31);
		value += max;
		return value;
	}

	/// branch-less clamp
	int32 clamp(int32 value, int32 min, int32 max) {
		return clamp(value - min, max - min) + min;
	}
}
