inline scalar = float64;  // fixme: declare inside Polynomial

///@public
struct Polynomial/*(typename scalar)*/: TextWriter.Writeable {
	scalar coefficients[*];
	int capacity;

	enum: scalar {
		c_zero: 0;
		c_unit: 1;
	}

	///@public
	void write(Polynomial this, TextWriter writer) {
		bool first = true;
		for (int i = this.capacity - 1; i >= 0; i -= 1) {
			if (this.coefficients[i] == c_zero && !(first && i == 0)) {
				continue;
			}

			scalar value = this.coefficients[i];
			if (value < c_zero) {
				value = -value;
				if (!first) {
					// binary operator
					writer.write(" - ");
				}
				else {
					// unary operator
					writer.write("-");
				}
			}
			else if (!first) {
				// binary operator
				writer.write(" + ");
			}

			if (value != c_unit || i == 0) {
				writer.write(value);
			}

			if (i > 0) {
				writer.write("x");
				if (i > 1) {
					writer.write("^");
					writer.write(i);
				}
			}
			first = false;
		}
	}

	///@public
	void destroy(Polynomial this) {
		pointer.alloc(this.coefficients, 0);
	}

	// construct a new instance
	static Polynomial create(int degree, scalar values[]) {
		int capacity = Math.max(0, degree) + 1;
		assert(capacity >= values.length);
		scalar coefficients[*] = pointer.alloc(null, capacity * sizeof(scalar));
		Polynomial result = {
			// fixme: coefficients: pointer.alloc(null, capacity * sizeof(scalar));
			coefficients: coefficients;
			capacity: capacity;
		};

		for (int i = 0; i < values.length; i += 1) {
			result.coefficients[i] = values[i];
		}
		for (int i = values.length; i < capacity; i += 1) {
			result.coefficients[i] = c_zero;
		}
		return result;
	}

	/// Compute the degree of the polynomial
	static int degree(Polynomial this&) {
		for (int i = this.capacity - 1; i > 0; i -= 1) {
			if (this.coefficients[i] != c_zero) {
				return i;
			}
		}
		return 0;
	}

	/// get the nth coefficient of the polynomial
	static scalar get(const Polynomial this&, int index) {
		assert(index >= 0, "negative index", index);
		if (index >= this.capacity) {
			return c_zero;
		}
		return this.coefficients[index];
	}

	/// set the nth coefficient of the polynomial
	static scalar set(Polynomial this&, int index, scalar value) {
		assert(index >= 0, "negative index", index);
		assert(index < this.capacity, "invalid index");
		return this.coefficients[index];
	}

	/// negate the polynomial
	static Polynomial neg(const Polynomial a&) {
		Polynomial result = create(degree(a), null);
		for (int i = 0; i < result.capacity; i += 1) {
			result.coefficients[i] = -a.get(i);
		}
		return result;
	}

	/// add two polynomials
	static Polynomial add(const Polynomial a&, const Polynomial b&) {
		Polynomial result = create(Math.max(degree(a), degree(b)), null);
		for (int i = 0; i < result.capacity; i += 1) {
			result.coefficients[i] = a.get(i) + b.get(i);
		}
		return result;
	}

	/// subtract two polynomials
	static Polynomial sub(const Polynomial a&, const Polynomial b&) {
		Polynomial result = create(Math.max(degree(a), degree(b)), null);
		for (int i = 0; i < result.capacity; i += 1) {
			result.coefficients[i] = a.get(i) - b.get(i);
		}
		return result;
	}

	/// multiply two polynomials
	static Polynomial mul(const Polynomial a&, const Polynomial b&) {
		int degreeA = degree(a);
		int degreeB = degree(b);
		Polynomial result = create(degreeA + degreeB, null);
		for (int i = 0; i <= degreeA; i += 1) {
			for (int j = 0; j <= degreeB; j += 1) {
				result.coefficients[i + j] += a.get(i) * b.get(j);
			}
		}
		return result;
	}

	/// evaluate the polynomial using Horner's method
	static scalar evaluate(const Polynomial this&, scalar value) {
		scalar result = c_zero;
		for (int i = degree(this); i >= 0; i -= 1) {
			result = result * value + this.coefficients[i];
		}
		return result;
	}

	/// Compute the derivative of the polynomial
	static Polynomial derivative(const Polynomial this&) {
		Polynomial result = create(this.degree() - 1, null);
		for (int i = 0; i < result.capacity; i += 1) {
			result.coefficients[i] = (i + 1) * this.coefficients[i + 1];
		}
		return result;
	}

	/// Compute the integral of the polynomial
	static Polynomial integral(const Polynomial this&, scalar c) {
		Polynomial result = create(this.degree() + 1, null);
		result.coefficients[0] = c;
		for (int i = 1; i < result.capacity; i += 1) {
			result.coefficients[i] = this.coefficients[i - 1] / i;
		}
		return result;
	}
}

/// Create a new polynomial by copying the given one.
inline Polynomial(const Polynomial copy&) = Polynomial.create(copy.degree(), copy.coefficients);

/// Create a new polynomial with the given values, coefficients are reversed(lowest index === highest degree)
Polynomial Polynomial(scalar values...) {
	Polynomial result = Polynomial.create(values.length - 1, null);
	for (int i = 0; i < values.length; i += 1) {
		result.coefficients[i] = values[values.length - i - 1];
	}
	return result;
}

/* TODO: implement enums, operator overloading
	enum: Polynomial {
		zero: {
			elements: { c_zero };
			capacity: 1;
		}
	}

inline [](Polynomial &this, int index) = Polynomial.get(this, index);
inline ()(Polynomial &this, scalar x) = Polynomial.evaluate(this, x);

inline -(const Polynomial &a) = Polynomial.neg(a);
inline +(const Polynomial &a, const Polynomial &b) = Polynomial.add(a, b);
inline -(const Polynomial &a, const Polynomial &b) = Polynomial.sub(a, b);
inline *(const Polynomial &a, const Polynomial &b) = Polynomial.mul(a, b);

to check
https://github.com/OpenSourcePhysics/osp/blob/master/src/org/opensourcephysics/numerics/Polynomial.java
https://github.com/umontreal-simul/ssj/blob/master/src/main/java/umontreal/ssj/functions/Polynomial.java
http://home.apache.org/~luc/commons-math-3.6-RC2-site/jacoco/org.apache.commons.math3.analysis.polynomials/PolynomialFunction.java.html
// */
