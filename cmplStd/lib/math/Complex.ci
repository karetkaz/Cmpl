/// Complex number
struct Complex {

	/// The real component of a complex number.
	const float64 re;

	/// The imaginary component of a complex number.
	const float64 im = 0;

	/* TODO: implement enumerations
	enum: Complex {
		zero: { re: 0 };	// 0 + 0i
		unit: { re: 1 };	// 1 + 0i
	}*/
}

/* TODO: implement inline initializer
// constructing a complex number
inline Complex(float64 re) = { re: re };
inline Complex(float64 re, float64 im) = { re: re, im: im };
*/

///@public
Complex Complex(float64 re) {
	return {
		re: re;
	};
}

///@public
Complex Complex(float64 re, float64 im) {
	return {
		re: re;
		im: im;
	};
}

/* TODO: implement operator overloading
inline -(Complex a) = Complex(-a.re, -a.im);

inline +(Complex a, Complex b) = Complex(a.re + b.re, a.im + b.im);
inline +(Complex a, float64 b) = Complex(a.re + b, a.im);
inline +(float64 a, Complex b) = Complex(a + b.re, b.im);

inline -(Complex a, Complex b) = Complex(a.re - b.re, a.im - b.im);
inline -(Complex a, float64 b) = Complex(a.re - b, a.im);
inline -(float64 a, Complex b) = Complex(a - b.re, b.im);

inline *(Complex a, Complex b) = Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);
inline *(Complex a, float64 b) = Complex(a.re * b, a.im * b);
inline *(float64 a, Complex b) = Complex(a * b.re, a * b.im);

inline /(Complex a, Complex b) = div(a, b);
inline /(Complex a, float64 b) = div(a, Complex(b));
inline /(float64 a, Complex b) = div(Complex(a), b);
*/

///@public: Complex(-a.re, -a.im);
inline neg(Complex a) = Complex(emit(struct(a), neg.p2d));

///@public: Complex(a.re + b.re, a.im + b.im);
inline add(Complex a, Complex b) = Complex(emit(struct(a), struct(b), add.p2d));
///@public
inline add(Complex a, float64 b) = Complex(a.re + b, a.im);
///@public
inline add(float64 a, Complex b) = Complex(a + b.re, b.im);

///@public: Complex(a.re - b.re, a.im - b.im);
inline sub(Complex a, Complex b) = Complex(emit(struct(a), struct(b), sub.p2d));
///@public
inline sub(Complex a, float64 b) = Complex(a.re - b, a.im);
///@public
inline sub(float64 a, Complex b) = Complex(a - b.re, b.im);

///@public: Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);
inline mul(Complex a, Complex b) = Complex(emit(
	struct(a), struct(b), swz.x2, mul.p2d, add.f64,
	struct(a), struct(b), mul.p2d, swz.x2, sub.f64
));
///@public
inline mul(Complex a, float64 b) = Complex(a.re * b, a.im * b);
///@public
inline mul(float64 a, Complex b) = Complex(a * b.re, a * b.im);

///@public
Complex div(Complex a, Complex b) {
	// Adapted from Numerical Recipes in C - The Art of Scientific Computing
	// ISBN 0-521-43108-5

	if (Math.abs(b.re) >= Math.abs(b.im)) {
		float64 r = b.im / b.re;
		float64 den = b.re + r * b.im;
		return {
			re: (a.re + r * a.im) / den;
			im: (a.im - r * a.re) / den;
		};
	}
	float64 r = b.re / b.im;
	float64 den = b.im + r * b.re;
	return {
		re: (a.re * r + a.im) / den;
		im: (a.im * r - a.re) / den;
	};
}

///@public
inline div(Complex a, float64 b) = div(a, Complex(b));
///@public
inline div(float64 a, Complex b) = div(Complex(a), b);

///@public
inline abs(Complex a) = float64.sqrt(a.re * a.re + a.im * a.im);
///@public
inline arg(Complex a) = float64.atan2(a.re, a.im);

/// Reciprocal of a complex number (1 / a)
Complex inv(Complex a) {
	float64 d = a.re * a.re + a.im * a.im;
	return {
		re: +a.re / d;
		im: -a.im / d;
	};
}

///@public
inline conj(Complex a) = Complex(a.re, -a.im);

///@public
inline exp(Complex a) = Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im));

///@public
inline log(Complex a) = Complex(float64.log(abs(a)), arg(a));

///@public
Complex pow(Complex a, Complex b) {
	float64 r = abs(a);
	float64 t = arg(a);
	float64 u = b.re * t + b.im * float64.log(r);
	float64 v = float64.pow(r, b.re) * float64.exp(-b.im * t);
	return {
		re: v * float64.cos(u);
		im: v * float64.sin(u);
	};
}
///@public
inline pow(Complex a, float64 b) = pow(a, Complex(b));

///@public
inline sin(Complex a) = Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im));
///@public
inline cos(Complex a) = Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im));

/* TODO: implement operator overloading
inline tan(Complex a) = sin(a) / cos(a);
inline cot(Complex a) = cos(a) / sin(a);

inline sinh(Complex a) = (exp(a) - exp(-a)) / 2;
inline cosh(Complex a) = (exp(a) + exp(-a)) / 2;
inline tanh(Complex a) = (exp(2 * a) - 1) / (exp(2 * a) + 1);
inline coth(Complex a) = (exp(2 * a) + 1) / (exp(2 * a) - 1);
*/

///@public
inline tan(Complex a) = div(sin(a), cos(a));
///@public
inline cot(Complex a) = div(cos(a), sin(a));

///@public
inline sinh(Complex a) = div(sub(exp(a), exp(neg(a))), 2);
///@public
inline cosh(Complex a) = div(add(exp(a), exp(neg(a))), 2);
///@public
inline tanh(Complex a) = div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1));
///@public
inline coth(Complex a) = div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1));

///@public
inline sec(Complex a) = inv(cos(a));
///@public
inline csc(Complex a) = inv(sin(a));
///@public
inline sech(Complex a) = inv(cosh(a));
///@public
inline csch(Complex a) = inv(sinh(a));

///@public
inline toCartesian(Complex x) = Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im));
///@public
inline toPolar(Complex x) = Complex(abs(x), arg(x));
