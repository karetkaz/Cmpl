/// Mathematical utility functions and constants
static struct Math {

	// constants
	enum: float64 {
		pi: 3.14159265358979323846264338327950288419716939937510582097494459;		// A000796
		e: 2.71828182845904523536028747135266249775724709369995957496696763;		// A001113
		ln2: 0.693147180559945309417232121458176568075500134360255254120680009;	// A002162
		log2E: 1. / ln2;
		ln10: 2.30258509299404568401799145468436420760110148862877297603332790;	// A002392
		log10E: 1. / ln10;
		phi: 1.61803398874989484820458683436563811772030917980576286213544862;		// A001622
		sqrt2: 1.41421356237309504880168872420969807856967187537694807317667974;	// A002193
		sqrtE: 1.64872127070012814684865078781416357165377610071014801157507931;	// A019774
		sqrtPi: 1.77245385090551602729816748334114518279754945612238712821380779;	// A002161
		sqrtPhi: 1.27201964951406896425242246173749149171560804184009624861664038;	// A139339
		nan: 0 / 0.;
		inf: 1 / 0.;
		smallestNormal: 2.2250738585072014e-308; // 2**-1022
	}

	/// Determines whether the given floating point value is not-a-number
	bool isNan(float64 x) { return x != x; }

	/// Determines whether the given floating point value is not-a-number
	// inline isNan(float32 x) = x != x;

	/// Determines whether the given floating point value is ±infinity
	bool isInf(float64 x) { return x != 0 && x == 2 * x; }
	/// Determines whether the given floating point value is ±infinity
	// inline isInf(float32 x) = x != 0 && x == 2 * x;

	/// Determines whether the given floating point value is finite: `!isNan(x) && !isInf(x)`
	bool isFinite(float64 x) { return x - x == 0; }

	/// Determines whether the given floating point value is finite: `!isNan(x) && !isInf(x)`
	// inline isFinite(float32 x) = x - x == 0;

	// internal method to check if a number is infinity or not
	bool isInf(float64 x, int sign) {
		if (x.isFinite()) {
			return false;
		}
		if (sign == 0) {
			return true;
		}
		return sign < 0 ? x < 0 : x > 0;
	}


	/// Computes the largest integer value not greater than the input
	float64 floor(float64 x) {
		float64 mod = x % 1;
		if (mod < 0) {
			mod += 1;
		}
		return x - mod;
	}

	/// Computes the largest integer value not greater than the input
	float32 floor(float32 x) {
		float32 mod = x % 1;
		if (mod < 0) {
			mod += 1;
		}
		return x - mod;
	}

	/// Computes the smallest integer not less than the input
	inline ceil(float64 x) = -floor(-x);

	/// Computes the smallest integer not less than the input
	inline ceil(float32 x) = -floor(-x);

	/// Computes the nearest integer to the input
	inline round(float64 x) = floor(x + .5);

	/// Computes the nearest integer to the input
	inline round(float32 x) = floor(x + .5f);


	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(int32 x) = int(x > 0) - int(x < 0);

	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(int64 x) = int(x > 0) - int(x < 0);

	/// Returns the signum of the input (`0` if zero, `1` if positive)
	inline sign(uint32 x) = int(x > 0);

	/// Returns the signum of the input (`0` if zero, `1` if positive)
	inline sign(uint64 x) = int(x > 0);

	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(float32 x) = int(x > 0) - int(x < 0);

	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(float64 x) = int(x > 0) - int(x < 0);


	/// Returns the positive modulus of the input
	float32 absMod(float32 val, float32 mod) {
		if ((val %= mod) < 0) {
			return val + mod;
		}
		return val;
	}

	/// Returns the positive modulus of the input
	float64 absMod(float64 val, float64 mod) {
		if ((val %= mod) < 0) {
			return val + mod;
		}
		return val;
	}

	/// Returns the absolute value of the input
	inline abs(int32 x) = x < 0 ? -x : x;

	/// Returns the absolute value of the input
	inline abs(int64 x) = x < 0 ? -x : x;

	/// Returns the absolute value of the input
	inline abs(uint32 x) = x;

	/// Returns the absolute value of the input
	inline abs(uint64 x) = x;

	/// Returns the absolute value of the input
	inline abs(float32 x) = x < 0 ? -x : x;

	/// Returns the absolute value of the input
	inline abs(float64 x) = x < 0 ? -x : x;


	/// Returns the smaller value from the input values
	inline min(int32 a, int32 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(int64 a, int64 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(uint32 a, uint32 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(uint64 a, uint64 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(float32 a, float32 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(float64 a, float64 b) = a < b ? a : b;

	/// Returns the greater value from the input values
	inline max(int32 a, int32 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(int64 a, int64 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(uint32 a, uint32 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(uint64 a, uint64 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(float32 a, float32 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(float64 a, float64 b) = a > b ? a : b;


	/// Returns the `value` clamped between `min` and `max`
	inline clamp(int32 value, int32 min, int32 max) = min(max(value, min), max);

	/// Returns the `value` clamped between `min` and `max`
	inline clamp(int64 value, int64 min, int64 max) = min(max(value, min), max);

	/// Returns the `value` clamped between `min` and `max`
	inline clamp(uint32 value, uint32 min, uint32 max) = min(max(value, min), max);

	/// Returns the `value` clamped between `min` and `max`
	inline clamp(uint64 value, uint64 min, uint64 max) = min(max(value, min), max);

	/// Returns the `value` clamped between `min` and `max`
	inline clamp(float32 value, float32 min, float32 max) = min(max(value, min), max);

	/// Returns the `value` clamped between `min` and `max`
	inline clamp(float64 value, float64 min, float64 max) = min(max(value, min), max);

	/// Returns the linear interpolation between `a` and `b` by `t`
	inline mix(float32 a, float32 b, float32 t) = a + t * (b - a);

	/// Returns the linear interpolation between `a` and `b` by `t`
	inline mix(float64 a, float64 b, float64 t) = a + t * (b - a);

	inline smoothstep(float32 t) = t * t * (3 - 2 * t);

	/// Returns the Hermite interpolation between two values, https://thebookofshaders.com/glossary/?search=smoothstep
	inline smoothstep(float32 min, float32 max, float32 t) = smoothstep(clamp((t - min) / (max - min), 0f, 1f));

	inline smoothstep(float64 t) = t * t * (3 - 2 * t);

	/// Returns the Hermite interpolation between two values, https://thebookofshaders.com/glossary/?search=smoothstep
	inline smoothstep(float64 min, float64 max, float64 t) = smoothstep(clamp((t - min) / (max - min), 0F, 1F));


	/// Returns the smaller value from the input values
	float64 min(float64 values...) {
		if (values.length == 0) {
			return nan;
		}
		float64 result = values[0];
		for (int i = 1; i < values.length; i += 1) {
			if (result > values[i]) {
				result = values[i];
			}
		}
		return result;
	}

	/// Returns the greater value from the input values
	float64 max(float64 values...) {
		if (values.length == 0) {
			return nan;
		}
		float64 result = values[0];
		for (int i = 1; i < values.length; i += 1) {
			if (result < values[i]) {
				result = values[i];
			}
		}
		return result;
	}

	/// Returns the sum of the input values
	float64 sum(float64 values...) {
		float64 result = 0;
		for (int i = 0; i < values.length; i += 1) {
			result += values[i];
		}
		return result;
	}

	/// Returns the mean of the input values
	float64 mean(float64 values...) {
		return sum(...values) / Bits.signed(values.length);
	}

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0) = a0;

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1) = a0 + x * a1;

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1, float64 a2) = a0 + x * eval(x, a1, a2);

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3) = a0 + x * eval(x, a1, a2, a3);

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3, float64 a4) = a0 + x * eval(x, a1, a2, a3, a4);

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3, float64 a4, float64 a5) = a0 + x * eval(x, a1, a2, a3, a4, a5);

	/// Return the polynomial evaluated at x using Horner's algorithm
	float64 eval(float64 x, float64 polynomial...) {
		float64 result = 0;
		for (int i = polynomial.length - 1; i >= 0; i -= 1) {
			result = result * x + polynomial[i];
		}
		return result;
	}

	/// Decompose a value into integer and fractional parts
	float64 modf(float64 x, float64 intPart&) {
		if (x < 1) {
			if (x < 0) {
				float64 result = modf(-x, &intPart);
				intPart = -intPart;
				return -result;
			}
			intPart = 0;
			return x;
		}
		float64 result = x % 1;
		intPart = x - result;
		return result;
	}

	float64 copysign(float64 x, float64 y) {
		uint64 sign = Bits.fromFloat64(y) & (1U << 63);
		uint64 val = Bits.fromFloat64(x) & ~(1U << 63);
		return Bits.asFloat64(sign | val);
	}

	/* Frexp breaks f into a normalized fraction and an integral power of two.
	 *  It returns frac and exp satisfying f == frac × 2**exp,
	 *  with the absolute value of frac in the interval [½, 1).
	 *
	 *  Special cases are:
	 * 	  * Frexp(±0) = ±0, 0
	 * 	  * Frexp(±Inf) = ±Inf, 0
	 * 	  * Frexp(NaN) = NaN, 0
	 *
	 * adapted from: https://github.com/golang/go/blob/master/src/math/frexp.go
	 */
	float64 frexp(float64 f, int exp&) {
		inline mask     = 0x7FFU;
		inline shift    = 64 - 11 - 1;
		inline bias     = 1023;
		inline signMask = 1 << 63;
		inline fracMask = 1 << shift - 1;

		// special cases
		if (f == 0) {
			exp = 0;
			return f;
		}
		if (isInf(f) || isNan(f)) {
			exp = 0;
			return f;
		}

		if (abs(f) < smallestNormal) {
			// normalize
			f *= 1 << 52;
			exp -= 52;
		} else {
			exp = 0;
		}

		uint64 x = Bits.fromFloat64(f);
		exp += int((x >> shift) & mask) - bias + 1;
		x &= ~(mask << shift);
		x |= (-1U + bias) << shift;
		return Bits.asFloat64(x);
	}

	/* Ldexp is the inverse of Frexp.
	 * It returns frac × 2**exp.
	 *
	 * Special cases are:
	 *	 * Ldexp(±0, exp) = ±0
	 *	 * Ldexp(±Inf, exp) = ±Inf
	 *	 * Ldexp(NaN, exp) = NaN
	 *
	 * adapted from: https://github.com/golang/go/blob/master/src/math/ldexp.go
	 */
	float64 ldexp(float64 f, int exp) {
		inline mask     = 0x7FFU;
		inline shift    = 64 - 11 - 1;
		inline bias     = 1023;
		inline signMask = 1 << 63;
		inline fracMask = 1 << shift - 1;

		// special cases
		if (f == 0) {
			// correctly return -0
			return f;
		}
		if (f != f || f - f != 0) {
			// not a number or non finite number
			return f;
		}

		if (abs(f) < smallestNormal) {
			// normalize
			f *= 1 << 52;
			exp -= 52;
		}

		uint64 x = Bits.fromFloat64(f);
		exp += (int(x>>shift) & mask) - bias;

		if (exp < -1075) {
			// trace("underflow", exp);
			return copysign(0., f);
		}
		if (exp > 1023) {
			// trace("overflow", exp);
			return copysign(inf, f);
		}
		float64 m = 1;
		if (exp < -1022) {
			// denormal
			exp += 53;
			m = 1 / float64(1 << 53); // 2**-53
		}
		x &= ~(mask << shift);
		x |= uint64(exp+bias) << shift;
		return m * Bits.asFloat64(x);
	}

	/// Returns the natural logarithm of the argument `x`.
	// adapted from: https://9p.io/sources/plan9/sys/src/libc/port/log.c
	float64 log(float64 x) {
		static if (preferNativeCalls && typename(float64.log) != null) {
			// use the native method if available
			return float64.log(x);
		}

		enum: float64 {
			log2: 0.693147180559945309e0;
			ln10o1: .4342944819032518276511;
			sqrto2: 0.707106781186547524e0;

			p0: -.240139179559210510e2;
			p1: 0.309572928215376501e2;
			p2: -.963769093377840513e1;
			p3: 0.421087371217979714e0;

			q0: -.120069589779605255e2;
			q1: 0.194809660700889731e2;
			q2: -.891110902798312337e1;
		}

		if (x <= 0) {
			if (x == 0) {
				return -inf;
			}
			return nan;
		}

		int exp;
		x = frexp(x, &exp);
		for (;x < 0.5;) {
			x *= 2;
			exp -= 1;
		}
		if (x < sqrto2) {
			x *= 2;
			exp -= 1;
		}

		float64 z = (x-1) / (x+1);
		float64 zsq = z * z;
		float64 p = eval(zsq, p0, p1, p2, p3);
		float64 q = eval(zsq, q0, q1, q2 + zsq);
		return p / q * z + exp * log2;
	}

	/// Returns the natural logarithm of the argument `x`.
	float32 log(float32 x) {
		static if (preferNativeCalls && typename(float32.log) != null) {
			// use the native method if available
			return float32.log(x);
		}

		return float32(log(float64(x)));
	}

	/// Returns the base 2 logarithm of the argument `x`.
	inline log2(float64 x) = log(x) / ln2;

	/// Returns the base 10 logarithm of the argument `x`.
	inline log10(float64 x) = log(x) / ln10;

	/// Returns the logarithm of the specified `base` of the argument `x`.
	inline log(float64 x, float64 base) = log(x) / log(base);


	/// Returns the base-e exponential: $ e^x $.
	// adapted from: https://github.com/jeremybarnes/cephes/blob/master/cmath/exp.c
	float64 exp(float64 x) {
		static if (preferNativeCalls && typename(float64.exp) != null) {
			// use the native method if available
			return float64.exp(x);
		}

		enum: float64 {
			c1: 6.93145751953125E-1;
			c2: 1.42860682030941723212E-6;

			p0: 1.26177193074810590878E-4;
			p1: 3.02994407707441961300E-2;
			p2: 9.99999999999999999910E-1;

			q0: 3.00198505138664455042E-6;
			q1: 2.52448340349684104192E-3;
			q2: 2.27265548208155028766E-1;
			q3: 2.00000000000000000009E0;

			MAXLOG: 7.08396418532264106224E2;     /* log 2**1022 */
			MINLOG: -7.08396418532264106224E2;     /* log 2**-1022 */
			LOG2E:  1.4426950408889634073599;     /* 1/log(2) */
		}

		if (isNan(x)) {
			return x;
		}
		if (x > MAXLOG) {
			return inf;
		}

		if (x < MINLOG) {
			return 0;
		}

		/* Express e**x = e**g 2**n
		 *   = e**g e**( n loge(2) )
		 *   = e**( g + n loge(2) )
		 */
		/* floor() truncates toward -infinity. */
		float64 px = floor(LOG2E * x + .5);
		x -= px * c1;
		x -= px * c2;

		/* rational approximation for exponential of the fractional part:
		 * e**x = 1 + 2x P(x**2) / (Q(x**2) - P(x**2))
		 */
		float64 xx = x * x;
		float64 p = x * eval(xx, p2, p1, p0);
		float64 q = eval(xx, q3, q2, q1, q0);

		/* multiply by power of 2 */
		return ldexp(1 + 2 * p / (q - p), px);
	}

	/// Returns the base-e exponential: $ e^x $.
	float32 exp(float32 x) {
		static if (preferNativeCalls && typename(float32.exp) != null) {
			// use the native method if available
			return float32.exp(x);
		}

		return float32(exp(float64(x)));
	}

	/// Returns the square root of the parameter `x`: $\sqrt{x}$.
	// adapted from go: https://github.com/golang/go/blob/master/src/math/sqrt.go
	float64 sqrt(float64 x) {
		static if (preferNativeCalls && typename(float64.sqrt) != null) {
			// use the native method if available
			return float64.sqrt(x);
		}

		// Special cases are:
		//   * Sqrt(+Inf) = +Inf
		//   * Sqrt(±0) = ±0
		//   * Sqrt(x < 0) = NaN
		//   * Sqrt(NaN) = NaN

		if (x == 0 || isNan(x) || isInf(x, 1)) {
			return x;
		}
		if (x < 0) {
			return nan;
		}

		inline mask     = 0x7FFU;
		inline shift    = 64 - 11 - 1;
		inline bias     = 1023;

		uint64 ix = Bits.fromFloat64(x);
		// normalize x
		int exp = int((ix >> shift) & mask);
		if (exp == 0) { // subnormal x
			for (;(ix & (1U << shift)) == 0;) {
				ix <<= 1;
				exp -= 1;
			}
			exp += 1;
		}
		exp -= bias; // unbias exponent
		ix &= ~(mask << shift);
		ix |= 1U << shift;
		if ((exp & 1) == 1) { // odd exp, double x to make it even
			ix <<= 1;
		}
		exp >>= 1; // exp = exp/2, exponent of square root
		// generate sqrt(x) bit by bit
		ix <<= 1;
		uint64 s = 0;
		uint64 q = 0;               // q = sqrt(x)
		uint64 r = 1U << (shift + 1); // r = moving bit from MSB to LSB
		for (;r != 0;) {
			uint64 t = s + r;
			if (t <= ix) {
				s = t + r;
				ix -= t;
				q += r;
			}
			ix <<= 1;
			r >>= 1;
		}
		// final rounding
		if (ix != 0) { // remainder, result not exact
			q += q & 1; // round according to extra bit
		}
		ix = (q >> 1) + (uint64(exp - 1 + bias) << shift); // significand + biased exponent
		return Bits.asFloat64(ix);
	}

	/// Returns the square root of the parameter `x`: $\sqrt{x}$.
	float32 sqrt(float32 x) {
		static if (preferNativeCalls && typename(float32.sqrt) != null) {
			// use the native method if available
			return float32.sqrt(x);
		}

		return float32(sqrt(float64(x)));
	}

	/// Returns `x` raised to the power of `y`: $ x^y $.
	// adapted from: https://9p.io/sources/plan9/sys/src/libc/port/pow.c
	float64 pow(float64 x, float64 y) {
		static if (preferNativeCalls && typename(float64.pow) != null) {
			// use the native method if available
			return float64.pow(x, y);
		}

		if (y == 0) {
			return 1;
		}

		int flip = 0;
		if (y < 0) {
			y = -y;
			flip = 1;
		}
		float64 ye;
		float64 xy = 1;
		float64 y1 = modf(y, &ye);
		if (y1 != 0.0) {
			if(x <= 0.){
				if (x == 0 && !flip) {
					return 0;
				}
				return nan;
			}
			if (y1 > .5) {
				y1 -= 1;
				ye += 1;
			}
			xy = exp(y1 * log(x));
		}
		if (ye > 0x7FFFFFFF) {	/* should be ~0UL but compiler can't convert double to ulong */
			if (x <= 0){
				if (x == 0 && !flip) {
					return 0;
				}
				return nan;
			}
			if (flip) {
				if (y == .5) {
					return 1 / sqrt(x);
				}
				y = -y;
			}
			else if (y == .5) {
				return sqrt(x);
			}
			return exp(y * log(x));
		}

		int ex;
		x = frexp(x, &ex);
		int ey = 0;
		int64 i = ye;
		if (i) {
			for (;;) {
				if (i & 1) {
					xy *= x;
					ey += ex;
				}
				i >>= 1;
				if (i == 0) {
					break;
				}
				x *= x;
				ex <<= 1;
				if (x < .5) {
					x += x;
					ex -= 1;
				}
			}
		}
		if (flip) {
			xy = 1. / xy;
			ey = -ey;
		}
		return ldexp(xy, ey);
	}

	/// Returns `x` raised to the power of `y`: $ x^y $.
	float32 pow(float32 x, float32 y) {
		static if (preferNativeCalls && typename(float32.pow) != null) {
			// use the native method if available
			return float32.pow(x, y);
		}

		return float32(pow(float64(x), float64(y)));
	}


	// adapted from: https://9p.io/sources/plan9/sys/src/libc/port/sin.c
	float64 sincos(float64 x, int quad) {
		enum: float64 {
			p0: .1357884097877375669092680e8;
			p1: -.4942908100902844161158627e7;
			p2: .4401030535375266501944918e6;
			p3: -.1384727249982452873054457e5;
			p4: .1459688406665768722226959e3;
			q0: .8644558652922534429915149e7;
			q1: .4081792252343299749395779e6;
			q2: .9463096101538208180571257e4;
			q3: .1326534908786136358911494e3;
		}

		if (x < 0) {
			x = -x;
			quad += 2;
		}

		float64 y;
		x *= 2 / pi;	/* underflow? */
		if (x > 32764) {
			float64 e;
			y = modf(x, &e);
			e += quad;

			float64 f;
			modf(0.25 * e, &f);
			quad = e - 4 * f;
		} else {
			int k = x;
			y = x - k;
			quad += k;
			quad &= 3;
		}
		if (quad & 1) {
			y = 1 - y;
		}
		if (quad > 1) {
			y = -y;
		}

		float64 ysq = y * y;
		float64 p = y * eval(ysq, p0, p1, p2, p3, p4);
		float64 q = eval(ysq, q0, q1, q2, q3 + ysq);
		return p / q;
	}

	// adapted from: https://github.com/jeremybarnes/cephes/blob/master/cmath/tan.c
	float64 tancot(float64 x, int flag) {
		enum: float64 {
			dp1: 7.853981554508209228515625E-1;
			dp2: 7.94662735614792836714E-9;
			dp3: 3.06161699786838294307E-17;

			p0: -1.30936939181383777646e4;
			p1: 1.15351664838587416140e6;
			p2: -1.79565251976484877988e7;

			q0: 1.00000000000000000000e0;
			q1: 1.36812963470692954678e4;
			q2: -1.32089234440210967447e6;
			q3: 2.50083801823357915839e7;
			q4: -5.38695755929454629881e7;

			lossth: 1.073741824e9;
		}

		/* make argument positive but save the sign */
		float64 sign = 1;
		if (x < 0) {
			x = -x;
			sign = -1;
		}

		if (x > lossth) {
			//error("total loss of precision");
			return 0;
		}

		/* compute x mod PIO4 */
		float64 y = floor(x / (pi / 4));

		/* strip high bits of integer part */
		float64 z = ldexp(y, -3);
		z = floor(z);        /* integer part of y/8 */
		z = y - ldexp(z, 3);  /* y - 16 * (y/16) */

		/* integer and fractional part modulo one octant */
		int j = z;

		/* map zeros and singularities to origin */
		if (j & 1) {
			j += 1;
			y += 1.0;
		}

		z = ((x - y * dp1) - y * dp2) - y * dp3;

		float64 zz = z * z;
		if (zz > 1.0e-14) {
			y = z + z * (zz * eval(zz, p2, p1, p0) / eval(zz, q4, q3, q2, q1, q0));
		} else {
			y = z;
		}

		if (j & 2) {
			if (flag) {
				y = -y;
			} else {
				y = -1 / y;
			}
		} else {
			if (flag) {
				y = 1 / y;
			}
		}

		return sign * y;
	}

	/// Returns the inverse tangent of the radian argument `x`.
	// adapted from: https://9p.io/sources/plan9/sys/src/libc/port/atan.c
	float64 atan(float64 x) {
		enum: float64 {
			sq2p1: 2.414213562373095048802e0;
			sq2m1: .414213562373095048802e0;

			p4: .161536412982230228262e2;
			p3: .26842548195503973794141e3;
			p2: .11530293515404850115428136e4;
			p1: .178040631643319697105464587e4;
			p0: .89678597403663861959987488e3;

			q4: .5895697050844462222791e2;
			q3: .536265374031215315104235e3;
			q2: .16667838148816337184521798e4;
			q1: .207933497444540981287275926e4;
			q0: .89678597403663861962481162e3;
		}

		// xatan evaluates a series valid in the range [-0.414...,+0.414...]. (tan(pi/8))
		float64 xatan(float64 x) {
			float64 z = x * x;
			float64 p = eval(z, p0, p1, p2, p3, p4);
			float64 q = eval(z, q0, q1, q2, q3, q4 + z);
			return p / q * x;
		}

		// satan reduces its argument (known to be positive) to the range [0,0.414...] and calls xatan.
		float64 satan(float64 x) {
			if (x < sq2m1) {
				return xatan(x);
			}
			if (x > sq2p1) {
				return pi / 2 - xatan(1 / x);
			}
			return pi / 4 + xatan((x - 1) / (x + 1));
		}

		if (x > 0) {
			return satan(x);
		}
		return -satan(-x);
	}

	/// Returns the inverse tangent of y/x.
	// adapted from: https://9p.io/sources/plan9/sys/src/libc/port/atan2.c
	float64 atan2(float64 arg1, float64 arg2) {
		static if (preferNativeCalls && typename(float64.atan2) != null) {
			// use the native method if available
			return float64.atan2(arg1, arg2);
		}

		if (arg1 + arg2 == arg1) {
			if (arg1 >= 0) {
				return pi / 2;
			}
			return -pi / 2;
		}

		arg1 = atan(arg1 / arg2);
		if (arg2 < 0) {
			if (arg1 <= 0) {
				return arg1 + pi;
			}
			return arg1 - pi;
		}
		return arg1;
	}

	/// Returns the inverse tangent of y/x.
	float32 atan2(float32 y, float32 x) {
		static if (preferNativeCalls && typename(float32.atan2) != null) {
			// use the native method if available
			return float32.atan2(y, x);
		}

		return float32(atan2(float64(y), float64(x)));
	}


	/// Returns the sine of the radian argument `x`.
	float64 sin(float64 x) {
		static if (preferNativeCalls && typename(float64.sin) != null) {
			// use the native method if available
			return float64.sin(x);
		}

		return sincos(x, 0);
	}

	/// Returns the sine of the radian argument `x`.
	float32 sin(float32 x) {
		static if (preferNativeCalls && typename(float32.sin) != null) {
			// use the native method if available
			return float32.sin(x);
		}

		return float32(sin(float64(x)));
	}

	/// Returns the hyperbolic sine of the radian argument `x`.
	inline sinh(float64 x) = x == 0 ? 0 : (exp(x) - exp(-x)) / 2;

	/// Returns the inverse sine of the radian argument `x`.
	inline asin(float64 x) = atan2(x, sqrt((1 + x) * (1 - x)));

	/// Returns the inverse hyperbolic sine of the radian argument `x`.
	inline asinh(float64 x) = log(x + sqrt((x * x) + 1));


	/// Returns the cosine of the radian argument `x`.
	float64 cos(float64 x) {
		static if (preferNativeCalls && typename(float64.cos) != null) {
			// use the native method if available
			return float64.cos(x);
		}

		if (x < 0) {
			x = -x;
		}
		return sincos(x, 1);
	}

	/// Returns the sine of the radian argument `x`.
	float32 cos(float32 x) {
		static if (preferNativeCalls && typename(float32.cos) != null) {
			// use the native method if available
			return float32.cos(x);
		}

		return float32(cos(float64(x)));
	}

	/// Returns the hyperbolic cosine of the radian argument `x`.
	inline cosh(float64 x) = x == 0 ? 1 : (exp(x) + exp(-x)) / 2;

	/// Returns the inverse cosine of the radian argument `x`.
	inline acos(float64 x) = atan2(sqrt((1 + x) * (1 - x)), x);

	/// Returns the inverse hyperbolic cosine of the radian argument `x`.
	inline acosh(float64 x) = log(x + sqrt((x - 1) / (x + 1)) * (x + 1));


	/// Returns the tangent of the radian argument `x`.
	float64 tan(float64 x) {
		static if (preferNativeCalls && typename(float64.tan) != null) {
			// use the native method if available
			return float64.tan(x);
		}

		if (x == 0) {
			return x;
		}
		if (x != x) {
			// nan
			return x;
		}
		if (x == 2 * x) {
			// infinity
			return nan;
		}

		return tancot(x, 0);
	}

	/// Returns the tangent of the radian argument `x`.
	float32 tan(float32 x) {
		static if (preferNativeCalls && typename(float32.tan) != null) {
			// use the native method if available
			return float32.tan(x);
		}

		return float32(tan(float64(x)));
	}

	/// Returns the hyperbolic tangent of the radian argument `x`.
	inline tanh(float64 x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x)); // todo: check

	/// Returns the inverse hyperbolic tangent of the radian argument `x`.
	inline atanh(float64 x) = x >= 1 ? inf : x <= -1 ? -inf : .5 * log((1 + x) / (1 - x));


	/// Returns the cotangent of the radian argument `x`.
	float64 cot(float64 x) {
		static if (preferNativeCalls && typename(float64.cot) != null) {
			// use the native method if available
			return float64.cot(x);
		}

		if (x == 0) {
			return inf;
		}
		return tancot(x, 1);
	}

	/// Returns the hyperbolic cotangent of the radian argument `x`.
	inline coth(float64 x) = 1 / tanh(x);

	/// Returns the inverse cotangent of the radian argument `x`.
	inline acot(float64 x) = x == 0 ? pi / 2 : atan(1 / x);

	/// Returns the inverse hyperbolic cotangent of the radian argument `x`.
	inline acoth(float64 x) = x == 1 ? inf : x == -1 ? -inf : .5 * log((x + 1) / (x - 1));


	/// Returns the secant of the radian argument `x`.
	inline sec(float64 x) = 1 / cos(x);

	/// Returns the hyperbolic secant of the radian argument `x`.
	inline sech(float64 x) = 1 / cosh(x);

	/// Returns the inverse secant of the radian argument `x`.
	inline asec(float64 x) = x == 0 ? inf : acos(1 / x);

	/// Returns the inverse hyperbolic secant of the radian argument `x`.
	inline asech(float64 x) = x == 0 ? inf : x == 1 ? 0 : log((sqrt(1 - x * x) + 1) / x);


	/// Returns the cosecant of the radian argument `x`.
	inline csc(float64 x) = 1 / sin(x);

	/// Returns the hyperbolic cosecant of the radian argument `x`.
	inline csch(float64 x) = 1 / sinh(x);

	/// Returns the inverse cosecant of the radian argument `x`.
	inline acsc(float64 x) = x == 0 ? inf : asin(1 / x);

	/// Returns the inverse hyperbolic cosecant of the radian argument `x`.
	inline acsch(float64 x) = x == 0 ? inf : x < 0 ? log((1 - sqrt(1 + x * x)) / x) : log((1 + sqrt(1 + x * x)) / x);


	/// Converts the input to radians from degrees.
	inline radians(float64 degrees) = float64(degrees * pi / 180);

	/// Converts the input to degrees from radians.
	inline degrees(float64 radians) = float64(radians * 180 / pi);

	// inline rand(int min, int max) = System.rand() % (max - min) + min;
	// inline rand(float64 min, float64 max) = (System.rand() / float64(System.rand.max)) * (max - min) + min;
}
