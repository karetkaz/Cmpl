/// Mathematical utility functions and constants
static struct Math {

	// constants
	enum: float64 {
		pi: 3.14159265358979323846264338327950288419716939937510582097494459;		// A000796
		e: 2.71828182845904523536028747135266249775724709369995957496696763;		// A001113
		ln2: 0.693147180559945309417232121458176568075500134360255254120680009;	// A002162
		log2E: 1. / ln2;
		ln10: 2.30258509299404568401799145468436420760110148862877297603332790;	// A002392
		log10E: 1. / ln10;
		phi: 1.61803398874989484820458683436563811772030917980576286213544862;		// A001622
		sqrt2: 1.41421356237309504880168872420969807856967187537694807317667974;	// A002193
		sqrtE: 1.64872127070012814684865078781416357165377610071014801157507931;	// A019774
		sqrtPi: 1.77245385090551602729816748334114518279754945612238712821380779;	// A002161
		sqrtPhi: 1.27201964951406896425242246173749149171560804184009624861664038;	// A139339
		nan: 0 / 0.;
		inf: 1 / 0.;
	}

	/// Decompose a value into integer and fractional parts
	float64 modf(float64 x, float64 intPart&) {
		if (x < 1) {
			if (x < 0) {
				float64 result = -modf(-x, &intPart);
				intPart = -intPart;
				return result;
			}
			intPart = 0;
			return x;
		}
		float64 result = x % 1;
		intPart = x - result;
		return result;
	}

	/** ldexp(float64 x, int exp) = x * 2 ** exp
	 * adapted from: https://git.musl-libc.org/cgit/musl/tree/src/math/scalbn.c
	 */
	float64 ldexp(float64 x, int exp) {
		inline intAsFloat64(int64 value) = float64(emit(int64(value)));
		static const float64 x1p53 = intAsFloat64(0x4340000000000000);		// 0x1p53
		static const float64 x1p1023 = intAsFloat64(0x7fe0000000000000);	// 0x1p1023
		static const float64 x1p_1022 = intAsFloat64(0x0010000000000000);	// 0x1p-1022

		if (exp > 1023) {
			x *= x1p1023;
			exp -= 1023;
			if (exp > 1023) {
				x *= x1p1023;
				exp -= 1023;
				if (exp > 1023) {
					exp = 1023;
				}
			}
		}
		else if (exp < -1022) {
			/* make sure final n < -53 to avoid double rounding in the subnormal range */
			x *= x1p_1022 * x1p53;
			exp += 1022 - 53;
			if (exp < -1022) {
				x *= x1p_1022 * x1p53;
				exp += 1022 - 53;
				if (exp < -1022) {
					exp = -1022;
				}
			}
		}
		return x * intAsFloat64(int64(0x3ff + exp) << 52);
	}

	// inline isNan(float64 x) = x != x;
	// inline isNan(float32 x) = x != x;

	// inline isInf(float64 x) = x != 0 && x == 2 * x;
	// inline isInf(float32 x) = x != 0 && x == 2 * x;

	// inline isFinite(float64 x) = x - x == 0;
	// inline isFinite(float32 x) = x - x == 0;

	/// Computes the largest integer value not greater than the input
	float64 floor(float64 x) {
		float64 mod = x % 1;
		if (mod < 0) {
			mod += 1;
		}
		return x - mod;
	}

	/// Computes the smallest integer not less than the input
	inline ceil(float64 x) = -floor(-x);

	/// Computes the nearest integer to the input
	inline round(float64 x) = floor(x + .5);

	// inline floor(float32 x) = float32(floor(float64(x)));
	// inline ceil(float32 x) = -floor(-x);
	// inline round(float32 x) = floor(x + .5f);

	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(int32 x) = int(x > 0) - int(x < 0);

	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(int64 x) = int(x > 0) - int(x < 0);

	/// Returns the signum of the input (`0` if zero, `1` if positive)
	inline sign(uint32 x) = int(x > 0);

	/// Returns the signum of the input (`0` if zero, `1` if positive)
	inline sign(uint64 x) = int(x > 0);

	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(float32 x) = int(x > 0) - int(x < 0);

	/// Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)
	inline sign(float64 x) = int(x > 0) - int(x < 0);

	/// Returns the positive modulus of the input
	float32 absMod(float32 val, float32 mod) {
		if ((val %= mod) < 0) {
			return val + mod;
		}
		return val;
	}

	/// Returns the positive modulus of the input
	float64 absMod(float64 val, float64 mod) {
		if ((val %= mod) < 0) {
			return val + mod;
		}
		return val;
	}

	/// Returns the absolute value of the input
	inline abs(int32 x) = x < 0 ? -x : x;

	/// Returns the absolute value of the input
	inline abs(int64 x) = x < 0 ? -x : x;

	/// Returns the absolute value of the input
	inline abs(uint32 x) = x;

	/// Returns the absolute value of the input
	inline abs(uint64 x) = x;

	/// Returns the absolute value of the input
	inline abs(float32 x) = x < 0 ? -x : x;

	/// Returns the absolute value of the input
	inline abs(float64 x) = x < 0 ? -x : x;

	/// Returns the smaller value from the input values
	inline min(int32 a, int32 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(int64 a, int64 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(uint32 a, uint32 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(uint64 a, uint64 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(float32 a, float32 b) = a < b ? a : b;

	/// Returns the smaller value from the input values
	inline min(float64 a, float64 b) = a < b ? a : b;

	/// Returns the greater value from the input values
	inline max(int32 a, int32 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(int64 a, int64 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(uint32 a, uint32 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(uint64 a, uint64 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(float32 a, float32 b) = a > b ? a : b;

	/// Returns the greater value from the input values
	inline max(float64 a, float64 b) = a > b ? a : b;

	/// Returns the value of `t` clamped between `a` and `b`
	inline clamp(int32 t, int32 a, int32 b) = t < a ? a : t > b ? b : t;

	/// Returns the value of `t` clamped between `a` and `b`
	inline clamp(int64 t, int64 a, int64 b) = t < a ? a : t > b ? b : t;

	/// Returns the value of `t` clamped between `a` and `b`
	inline clamp(uint32 t, uint32 a, uint32 b) = t < a ? a : t > b ? b : t;

	/// Returns the value of `t` clamped between `a` and `b`
	inline clamp(uint64 t, uint64 a, uint64 b) = t < a ? a : t > b ? b : t;

	/// Returns the value of `t` clamped between `a` and `b`
	float32 clamp(float32 t, float32 a, float32 b) {
		if (t < a) {
			return a;
		}
		if (t > b) {
			return b;
		}
		return t;
	}

	/// Returns the value of `t` clamped between `a` and `b`
	float64 clamp(float64 t, float64 a, float64 b) {
		if (t < a) {
			return a;
		}
		if (t > b) {
			return b;
		}
		return t;
	}

	// inline clamp(int32 t, int32 a, int32 b) = min(max(t, a), b);
	// inline clamp(int32 t, int32 a, int32 b) = t < a ? a : t > b ? b : t;
	// inline clamp(float32 t, float32 a, float32 b) = t < a ? a : t > b ? b : t;
	// inline clamp(float64 t, float64 a, float64 b) = t < a ? a : t > b ? b : t;

	/// Returns the linear interpolation between `a` and `b` by `t`
	inline lerp(float32 t, float32 a, float32 b) = a + t * (b - a);

	/// Returns the linear interpolation between `a` and `b` by `t`
	inline lerp(float64 t, float64 a, float64 b) = a + t * (b - a);

	inline smooth(float32 t) = t * t * (3 - 2 * t);
	inline smooth(float64 t) = t * t * (3 - 2 * t);

	/// Returns smooth interpolation between `a` and `b` by `t`
	inline smooth(float32 t, float32 a, float32 b) = smooth(clamp((t - a) / (b - a), 0f, 1f));

	/// Returns smooth interpolation between `a` and `b` by `t`
	inline smooth(float64 t, float64 a, float64 b) = smooth(clamp((t - a) / (b - a), 0F, 1F));

	/// Returns the smaller value from the input values
	float64 min(float64 values...) {
		if (values.length == 0) {
			return nan;
		}
		float64 result = values[0];
		for (int i = 1; i < values.length; i += 1) {
			if (result > values[i]) {
				result = values[i];
			}
		}
		return result;
	}

	/// Returns the greater value from the input values
	float64 max(float64 values...) {
		if (values.length == 0) {
			return nan;
		}
		float64 result = values[0];
		for (int i = 1; i < values.length; i += 1) {
			if (result < values[i]) {
				result = values[i];
			}
		}
		return result;
	}

	/// Returns the sum of the input values
	float64 sum(float64 values...) {
		float64 result = 0;
		for (int i = 0; i < values.length; i += 1) {
			result += values[i];
		}
		return result;
	}

	/// Returns the mean of the input values
	float64 mean(float64 values...) {
		return sum(...values) / signed(values.length);
	}

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0) = a0;

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1) = a0 + x * a1;

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1, float64 a2) = a0 + x * eval(x, a1, a2);

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3) = a0 + x * eval(x, a1, a2, a3);

	/// Return the polynomial evaluated at x using Horner's algorithm
	inline eval(float64 x, float64 a0, float64 a1, float64 a2, float64 a3, float64 a4) = a0 + x * eval(x, a1, a2, a3, a4);

	/// Return the polynomial evaluated at x using Horner's algorithm
	float64 eval(float64 x, float64 polynomial...) {
		float64 result = 0;
		for (int i = polynomial.length - 1; i >= 0; i -= 1) {
			result = result * x + polynomial[i];
		}
		return result;
	}

	/* calculate sin or cos
	 * adapted from: https://github.com/akavel/gostdc/blob/master/sin.c
	 */
	float64 sinCos(float64 arg, int quad) {
		enum: float64 {
			PIO2: 1.570796326794896619231e0;
			p0: .1357884097877375669092680e8;
			p1: -.4942908100902844161158627e7;
			p2: .4401030535375266501944918e6;
			p3: -.1384727249982452873054457e5;
			p4: .1459688406665768722226959e3;
			q0: .8644558652922534429915149e7;
			q1: .4081792252343299749395779e6;
			q2: .9463096101538208180571257e4;
			q3: .1326534908786136358911494e3;
		}

		float64 x = arg;
		if (x < 0) {
			x = -x;
			quad += 2;
		}

		float64 y;
		x *= 1 / PIO2;	/* underflow? */
		if (x > 32764) {
			float64 e;
			y = modf(x, &e);
			e += quad;

			float64 f;
			modf(0.25 * e, &f);
			quad = e - 4 * f;
		} else {
			int k = x;
			y = x - k;
			quad += k;
			quad &= 3;
		}
		if (quad & 1) {
			y = 1-y;
		}
		if (quad > 1) {
			y = -y;
		}

		float64 ysq = y * y;
		float64 temp1 = ((((p4 * ysq + p3) * ysq + p2) * ysq + p1) * ysq + p0) * y;
		float64 temp2 = ((((ysq + q3) * ysq + q2) * ysq + q1) * ysq + q0);
		return temp1 / temp2;
	}

	/* calculate tan or cot
	 * adapted from: https://github.com/jeremybarnes/cephes/blob/master/cmath/tan.c
	 */
	float64 tanCot(float64 x, int flag) {
		enum: float64 {
			PIO4: 7.85398163397448309616E-1;    // pi / 4
			DP1: 7.853981554508209228515625E-1;
			DP2: 7.94662735614792836714E-9;
			DP3: 3.06161699786838294307E-17;

			P0: -1.30936939181383777646e4;
			P1: 1.15351664838587416140e6;
			P2: -1.79565251976484877988e7;

			Q0: 1.00000000000000000000e0;
			Q1: 1.36812963470692954678e4;
			Q2: -1.32089234440210967447e6;
			Q3: 2.50083801823357915839e7;
			Q4: -5.38695755929454629881e7;
		}

		/* make argument positive but save the sign */
		float64 sign = 1;
		if (x < 0) {
			x = -x;
			sign = -1;
		}

		if (x > 1.073741824e9) {
			error("total loss of precision");
			return 0;
		}

		/* compute x mod PIO4 */
		float64 y = floor(x / PIO4);

		/* strip high bits of integer part */
		float64 z = ldexp(y, -3);
		z = floor(z);        /* integer part of y/8 */
		z = y - ldexp(z, 3);  /* y - 16 * (y/16) */

		/* integer and fractional part modulo one octant */
		int j = z;

		/* map zeros and singularities to origin */
		if (j & 1) {
			j += 1;
			y += 1.0;
		}

		z = ((x - y * DP1) - y * DP2) - y * DP3;

		float64 zz = z * z;
		if (zz > 1.0e-14) {
			y = z + z * (zz * eval(zz, P2, P1, P0) / eval(zz, Q4, Q3, Q2, Q1, Q0));
		} else {
			y = z;
		}

		if (j & 2) {
			if (flag) {
				y = -y;
			} else {
				y = -1 / y;
			}
		} else {
			if (flag) {
				y = 1 / y;
			}
		}

		return sign * y;
	}

	/// Returns the sine of the radian argument `x`.
	float64 sin(float64 x) {
		static if (preferNativeCalls && typename(float64.sin) != null) {
			// use the native method if available
			return float64.sin(x);
		}
		return sinCos(x, 0);
	}

	/// Returns the cosine of the radian argument `x`.
	float64 cos(float64 x) {
		static if (preferNativeCalls && typename(float64.cos) != null) {
			// use the native method if available
			return float64.cos(x);
		}
		return sinCos(abs(x), 1);
	}

	/// Returns the tangent of the radian argument `x`.
	float64 tan(float64 x) {
		static if (preferNativeCalls && typename(float64.tan) != null) {
			// use the native method if available
			return float64.tan(x);
		}

		if (x == 0) {
			return x;
		}
		if (x != x) {
			// nan
			return x;
		}
		if (x == 2 * x) {
			// infinity
			return nan;
		}

		return tanCot(x, 0);
	}

	/// Returns the cotangent of the radian argument `x`.
	float64 cot(float64 x) {
		static if (preferNativeCalls && typename(float64.cot) != null) {
			// use the native method if available
			return float64.cot(x);
		}

		if (x == 0) {
			return inf;
		}
		return tanCot(x, 1);
	}

	/// Returns the hyperbolic sine of the input
	float64 sinh(float64 x) {
		// The coefficients are #2029 from Hart & Cheney. (20.36D)
		enum: float64 {
			P0: -0.6307673640497716991184787251e+6;
			P1: -0.8991272022039509355398013511e+5;
			P2: -0.2894211355989563807284660366e+4;
			P3: -0.2630563213397497062819489e+2;
			Q0: -0.6307673640497716991212077277e+6;
			Q1: 0.1521517378790019070696485176e+5;
			Q2: -0.173678953558233699533450911e+3;
		}

		bool negate = false;
		if (x < 0) {
			x = -x;
			negate = true;
		}

		if (x > 21) {
			return float64.exp(x) / 2;
		}

		float64 result;
		if (x > 0.5) {
			result = (float64.exp(x) - float64.exp(-x)) / 2;
		}
		else {
			float64 sq = x * x;
			result = (((P3 * sq + P2) * sq + P1) * sq + P0) * x;
			result /= ((sq + Q2) * sq + Q1) * sq + Q0;
		}

		if (negate) {
			return -result;
		}
		return result;
	}

	/// Returns the hyperbolic cosine of the input
	float64 cosh(float64 x) {
		if (x < 0) {
			x = -x;
		}
		if (x > 21) {
			return float64.exp(x) / 2;
		}
		return (float64.exp(x) + float64.exp(-x)) / 2;
	}

	/** Returns the arc sine of the input
	 *  Special cases are:
	 *    Asin(±0) = ±0
	 *    Asin(x) = NaN if x < -1 or x > 1
	 */
	float64 asin(float64 x) {
		if (x == 0) {
			// special case
			return x;
		}

		bool negate = false;
		if (x < 0) {
			negate = true;
			x = -x;
		}

		if (x > 1) {
			// special case
			return nan;
		}

		float64 result = float64.sqrt(1 - x * x);
		if (x > 0.7) {
			result = pi / 2 - float64.atan2(result, x);
		}
		else {
			result = float64.atan2(x, result);
		}

		if (negate) {
			return -result;
		}
		return result;
	}

	/** Returns the arc cosine of the input
	 *  Special case is:
	 *    Acos(x) = NaN if x < -1 or x > 1
	 */
	inline acos(float64 x) = (pi / 2 - asin(x));

	/// Converts the input to radians from degrees.
	inline radians(float64 degrees) = float64(degrees * pi / 180);

	/// Converts the input to degrees from radians.
	inline degrees(float64 radians) = float64(radians * 180 / pi);

	// inline rand(int min, int max) = System.rand() % (max - min) + min;
	// inline rand(float64 min, float64 max) = (System.rand() / float64(System.rand.max)) * (max - min) + min;
}

/* TODO: leftovers
//~ float64 abs(float64 x);
//~ float64 sin(float64 x);
//~ float64 cos(float64 x);
//~ float64 tan(float64 x);
float64 log(float64 x);
float64 exp(float64 x);
float64 pow(float64 x, float64 y);
float64 sqrt(float64 x);
float64 atan2(float64 x, float64 y);

add these as inline expressions: https://gist.github.com/Witiko/6462162
//~ Number.prototype.abs = function(){return Math.abs(this);};
//~ Number.prototype.sign = function(){return this == 0 ? 0 : (this > 0 ? 1 : -1);};
//~ Number.prototype.ceil = function(){return Math.ceil(this);};
//~ Number.prototype.floor = function(){return Math.floor(this);};
//~ Number.prototype.round = function(){return Math.round(this);};
//~ Number.prototype.degToRad = function(){return this * Math.PI / 180;};
//~ Number.prototype.radToDeg = function(){return this * 180 / Math.PI;};

//~ Number.prototype.sin = function(){return Math.sin(this);};
//~ Number.prototype.sinh = function(){return (Math.exp(this) - Math.exp(-this)) / 2;};
//~ Number.prototype.asin = function(){return Math.asin(this);};
Number.prototype.asinh = function(){return Math.log(this + Math.sqrt(this * this + 1));};

Number.prototype.sec = function(){return 1 / Math.cos(this);};
Number.prototype.sech = function(){return 2 / (Math.exp(this) + Math.exp(-this));};
Number.prototype.asec = function(){return Math.PI / 2 - Math.asin(1 / this);};
Number.prototype.asech = function(){return Math.log((1 + Math.sqrt(1 - this * this)) / this);};

//~ Number.prototype.cos = function(){return Math.cos(this);};
//~ Number.prototype.cosh = function(){return (Math.exp(this) + Math.exp(-this)) / 2;};
//~ Number.prototype.acos = function(){return Math.acos(this);};
Number.prototype.acosh = function(){return Math.log(this + Math.sqrt(this * this - 1));};

Number.prototype.cot = function(){return 1 / Math.tan(this);};
Number.prototype.coth = function(){return (Math.exp(this) + Math.exp(-this)) / (Math.exp(this) - Math.exp(-this));};
Number.prototype.acot = function(){return Math.PI / 2 - Math.atan(this);};
Number.prototype.acoth = function(){return Math.log((this + 1) / (this - 1)) / 2;};

Number.prototype.cosec = function(){return 1 / Math.sin(this);};
Number.prototype.cosech = function(){return 2 / (Math.exp(this) - Math.exp(-this));};
Number.prototype.acosec = function(){return Math.asin(1 / this);};
Number.prototype.acosech = function(){
	return this < 0
		? Math.log((1 - Math.sqrt(1 + this * this)) / this)
		: Math.log((1 + Math.sqrt(1 + this * this)) / this);
};

//~ Number.prototype.tan = function(){return Math.tan(this);};
Number.prototype.tanh = function(){return (Math.exp(this) - Math.exp(-this)) / (Math.exp(this) + Math.exp(-this));};
Number.prototype.atan = function(){return Math.atan(this);};
Number.prototype.atanh = function(){return Math.log((1 + this) / (1 - this)) / 2;};

Number.prototype.ln = function(){return Math.log(this);};
//~ Number.prototype.log = function(base){return Math.log(this) / Math.log(base);};
Number.prototype.log2 = function(){return Math.log(this) / Math.LN2;};
Number.prototype.log10 = function(){return Math.log(this) / Math.LN10;};
//~ Number.prototype.exp = function(){return Math.exp(this);};

//~ Number.prototype.sqrt = function(){return Math.sqrt(this);};
//~ Number.prototype.pow = function(exponent){return Math.pow(this,exponent);};
//- Number.prototype.mod = function(modulus){return this >= 0 ? this % modulus : (this % modulus + Math.abs(modulus)) % modulus;};
//- Number.prototype.wrap = function(low, high){return low + (this - low).mod(high - low);};

https://github.com/alexhuntley/Plots/blob/main/plots/shaders/fragment.glsl
#define ln(x) log(x)
#define lg(x) log2(x)
#define log_base(b, x) (log(x)/log(b))
#define sec(x) (1.0/cos(x))
#define csc(x) (1.0/sin(x))
#define cosec(x) csc(x)
#define cot(x) (1.0/tan(x))
#define arcsin(x) asin(x)
#define arccos(x) acos(x)
#define arctan(x) atan(x)
#define asec(x) acos(1.0/(x))
#define acsc(x) asin(1.0/(x))
#define acosec(x) acsc(x)
#define acot(x) (atan(1.0/(x)) - ((x) > 0 ? 0.0 : pi))
#define arcsec(x) asec(x)
#define arccsc(x) acsc(x)
#define arccosec(x) acsc(x)
#define arccot(x) acot(x)
#define sech(x) (1.0/cosh(x))
#define csch(x) (1.0/sinh(x))
#define cosech(x) csch(x)
#define coth(x) (1.0/tanh(x))
#define asech(x) acosh(1.0/(x))
#define acsch(x) asinh(1.0/(x))
#define acosech(x) acsch(x)
#define acoth(x) atanh(1.0/(x))
#define sgn(x) sign(x)
#define sinc(x) (sin(x)/(x))
// */
