// The Unicode Character Set (UCS) contains 1,114,112 code points: U+0000â€”U+10FFFF
// todo: move inside class TextReader
inline unicode = uint32;

// TextReader := Decoder & Parser (java:Reader+Scanner?Parser?)
/// TextReader can be used to read decoded text from a stream, including basic parsing
struct TextReader: Closeable {

	///@public
	const ByteReader reader;

	/** This abstract method must be implemented in subclasses containing the proper implementation
	 * the method must return the number of characters decoded from the stream into the `chars` array
	 * in case there is an error -1 should be returned
	 */
	int decode(TextReader this, unicode chars[]);

	// override
	void close(TextReader this) {
		// by default close the stream.
		// override if no need to close it.
		this.reader.close();
	}

	/// Read a single character from the stream, a negative number is returned in case of error
	static int decode(TextReader this) {
		unicode chars[1] = {0};
		if (this.decode(chars) <= 0) {
			return -1;
		}
		return chars[0] & 0x00ffffff;
	}

	// TODO: static string readNext(TextReader this, regex matcher) { /*...*/ }
	// TODO: static string readWord(TextReader this) { return this.readNext(/\w+/); }
	// TODO: static string readLine(TextReader this) { return this.readNext(/.*$/); }
	// TODO: static string readAll(TextReader this) { return this.readMatch(/.*/); }
	// TODO: static double readNumber(TextReader this, Locale locale) { /*...*/ }

	/* TODO: subclasses
		Latin1
		Ascii
		Utf8
	*/
}

// TextWriter := Encoder & Printer (java:Writer+PrintStream)
/// TextWriter can be used to write encoded text to a stream, including basic printing
struct TextWriter: Closeable {
	///@public
	struct Writeable: object {
		// abstract
		void write(Writeable this, TextWriter writer);
	}

	///@public
	const ByteWriter writer;

	/// default formatter
	const FormatFlags format;

	/** This abstract method must be implemented in subclasses containing the proper implementation
	 * the method must encode and write all the characters from the `chars` array
	 */
	void encode(TextWriter this, unicode chars[]);

	// override
	void flush(TextWriter this) {
		this.writer.flush(this.writer);
	}

	// override
	void close(TextWriter this) {
		this.writer.close();
	}

	/// Write an array of raw characters to the stream (no encoding)
	static TextWriter write(TextWriter this, char value[]) {
		this.writer.write(value);
		return this;
	}

	/// Write a single raw character to the stream (no encoding)
	static TextWriter write(TextWriter this, char value) {
		char buffer[1] = { value };
		return this.write(buffer);
	}

	/// Write the value of the boolean parameter: "true" or "false"
	static TextWriter write(TextWriter this, bool value) {
		if (value) {
			return this.write("true");
		}
		return this.write("false");
	}

	/// Write the value of the 32-bit integer parameter
	static TextWriter write(TextWriter this, int32 value, const FormatFlags flags&) {
		char buff[1024]= {};
		int n = buff.append(0, value, flags);
		return write(this, buff[ ... n]);
	}

	/// Write the value of the 64-bit integer parameter
	static TextWriter write(TextWriter this, int64 value, const FormatFlags flags&) {
		char buff[1024]= {};
		int n = buff.append(0, value, flags);
		return write(this, buff[ ... n]);
	}

	/// Write the value of the 32-bit unsigned integer parameter
	static TextWriter write(TextWriter this, uint32 value, const FormatFlags flags&) {
		char buff[1024]= {};
		int n = buff.append(0, value, flags);
		return write(this, buff[ ... n]);
	}

	/// Write the value of the 64-bit unsigned integer parameter
	static TextWriter write(TextWriter this, uint64 value, const FormatFlags flags&) {
		char buff[1024]= {};
		int n = buff.append(0, value, flags);
		return write(this, buff[ ... n]);
	}

	/// Write the value of the 32-bit floating-point parameter
	static TextWriter write(TextWriter this, float32 value, const FormatFlags flags&) {
		char buff[1024]= {};
		int n = buff.append(0, value, flags);
		return write(this, buff[ ... n]);
	}

	/// Write the value of the 64-bit floating-point parameter
	static TextWriter write(TextWriter this, float64 value, const FormatFlags flags&) {
		char buff[1024]= {};
		int n = buff.append(0, value, flags);
		return write(this, buff[ ... n]);
	}

	/// Write the value of the writeable parameter
	static TextWriter write(TextWriter this, Writeable value) {
		value.write(this);
		return this;
	}

	/// Write a newline character
	static TextWriter writeln(TextWriter this) {
		return this.write("\n");
	}

	///@public
	static TextWriter writeln(TextWriter this, TextWriter.Writeable value) { return this.write(value).writeln(); }

	// TODO: static void write(TextWriter this, Locale locale, char value) { /*...*/ }
	// TODO: static void write(TextWriter this, Locale locale, string value) { /*...*/ }
	// TODO: static void write(TextWriter this, Locale locale, object value) { /*...*/ }
	// TODO: static void write(TextWriter this, Locale locale, variant value) { /*...*/ }
	// TODO: static void write(TextWriter this, void write(TextWriter writer)) { /*...*/ }

	/**
	 * Convert from one encoding to another one.
	 * @returns converted character count.
	 *
	 * example: convert utf-8 encoded file to ascii
	 * TextWriter output = AsciiWriter("out.txt");
	 * TextReader input = Utf8Reader("in.txt");
	 * output.write(input);
	 */
	static int write(TextWriter writer, TextReader reader) {
		unicode buffer[1024] = {};
		int result = 0;
		for ( ; ; ) {
			int n = reader.decode(buffer);
			if (n <= 0) {
				return result;
			}
			writer.encode(buffer[...n]);
			result += n;
		}
		return result;
	}

	/* TODO: subclasses
		Latin1
		Ascii
		Utf8
	*/
}
