/// Represents the base class of closeable objects like files, streams, etc
struct Closeable: object {

	/// Release the resources hold by this object.
	void close(Closeable this);
}

/// Extension method to safely call the close method
void close(Closeable closeable) {
	if (closeable.close == null) {
		// close is disabled, stdout?
		return;
	}
	closeable.close(closeable);
}

/// ByteReader can be used to read bytes from a stream (~= java:InputStream)
struct ByteReader: Closeable {

	/** This abstract method must be implemented in subclasses containing the proper implementation
	 * the method must return the number of bytes read from the stream into the `bytes` array
	 * in case there is an error -1 should be returned
	 */
	int read(ByteReader this, byte bytes[]);

	/// Read a single byte from the stream, a negative number is returned in case of error
	static int read(ByteReader this) {
		byte bytes[1] = {0};
		if (this.read(bytes) <= 0) {
			return -1;
		}
		return bytes[0] & 255;
	}

	/* TODO: subclasses
		CopyReader
		FileReader
		PipedReader
		SocketReader
		MemoryReader
	*/
}

/// ByteWriter can be used to write bytes to a stream (~= java:OutputStream)
struct ByteWriter: Closeable {
	/** This abstract method must be implemented in subclasses containing the proper implementation
	 * the method must write all the bytes from the `bytes` array
	 */
	void write(ByteWriter this, byte bytes[]);

	/** This abstract method must be implemented in subclasses containing the proper implementation
	 * if a buffer is used directly or indirectly this method must flush all buffered data to the stream.
	 */
	void flush(ByteWriter this);

	/// Write a single byte to the stream
	static void write(ByteWriter this, byte oneByte) {
		byte bytes[1] = { oneByte };
		return this.write(this, bytes);
	}

	/* TODO: uncomment
	static void write(ByteWriter this, void write(ByteWriter writer)) {
		return write(this);
	}

	struct Writeable: object {
		// abstract
		void write(Writeable this, ByteWriter writer);
	}

	static void write(ByteWriter this, Writeable value) {
		return this.write(this, value.write);
	}// */

	/// Copy all bytes from the reader to the writer
	static int write(ByteWriter this, ByteReader reader) {
		byte buffer[1024] = {};
		int result = 0;
		for ( ; ; ) {
			int read = reader.read(buffer);
			if (read <= 0) {
				return result;
			}
			this.write(this, buffer[...read]);
			result += read;
		}
		return result;
	}

	/* TODO: subclasses
		FileWriter
		PipedWriter
		SocketWriter
		MemoryWriter
	*/
}

// TODO: untested: copy byte-stream
struct CopyReader: ByteReader {
	const ByteReader source;
	const ByteWriter clone;

	// override
	int read(CopyReader this, byte bytes[]) {
		int result = this.source.read(bytes);
		if (result > 0) {
			this.clone.write(bytes[...result]);
		}
		return result;
	}

	// override
	void close(CopyReader this) {
		this.source.close();
		this.clone.close();
	}
}

// TODO: untested
struct ByteBuffer {
	int position = 0;
	int capacity = 32;
	int length = 0;
	byte buffer[*] = pointer.alloc(null, capacity);

	int read(ByteBuffer this, byte bytes[]) {
		if (this.position >= this.length) {
			return -1;
		}
		for (int i = 0; i < bytes.length; i += 1) {
			if (this.position >= this.length) {
				return i;
			}
			bytes[i] = this.buffer[this.position];
			this.position += 1;
		}
		return bytes.length;
	}

	int read(ByteBuffer this) {
		if (this.position >= this.length) {
			return -1;
		}
		int result = this.buffer[this.position];
		this.position += 1;
		return result;
	}

	void write(ByteBuffer this, byte bytes[]) {
		int size = this.position + bytes.length;
		if (size >= this.capacity) {
			// try to double the current size
			this.capacity *= 2;
			if (size > 2 * this.capacity) {
				// double the calculated size
				this.capacity = size * 2;
			}

			// copy old bytes
			byte new[*] = pointer.alloc(null, this.capacity);
			for (int i = 0; i < this.position; i += 1) {
				new[i] = this.buffer[i];
			}
			pointer.alloc(this.buffer, 0);
			this.buffer = new;
		}

		// copy new bytes
		for (int i = 0; i < bytes.length; i += 1) {
			this.buffer[this.position] = bytes[i];
			this.position += 1;
		}
	}

	void flush(ByteBuffer this) {
		// do nothing
	}

	void close(ByteBuffer this) {
		// release memory
		pointer.alloc(this.buffer, 0);

		this.buffer = null;
		this.position = 0;
		this.capacity = 0;
		this.length = 0;
	}
}
