// string related functions

/// Computes the length of the string
int length(const char str[*]) {
	if (str == null) {
		return 0;
	}
	int result = 0;
	for (; str[result]; result += 1) {
	}
	return result;
}

/// Returns the index of the first occurrence of a character in string
int indexOf(const char str[*], char chr) {
	for (int i = 0; str[i]; i += 1) {
		if (str[i] == chr) {
			return i;
		}
	}
	return -1;
}

/// Returns the index of the last occurrence of a character in string
int lastIndexOf(const char str[*], char chr) {
	int result = -1;
	for (int i = 0; str[i]; i += 1) {
		if (str[i] == chr) {
			result = i;
		}
	}
	return result;
}

/// Check if a string begins with a specified string, using a custom comparator
bool startsWith(const char str[*], const char with[*], int cmp(char chr, char with)) {
	for (int i = 0; with[i] != 0; i += 1) {
		if (cmp(str[i], with[i]) != 0) {
			return false;
		}
	}
	return true;
}

/// Check if a string ends in a specified string, using a custom comparator
bool endsWith(const char str[*], const char with[*], int cmp(char chr, char with)) {
	int withLen = length(with);
	int strLen = length(str);
	if (strLen < withLen) {
		return false;
	}
	for (int i = 0; i < withLen; i += 1) {
		if (cmp(str[strLen - withLen + i], with[i]) != 0) {
			return false;
		}
	}
	return true;
}

/// Check if the two strings are equal, less or greater, using a custom comparator
int compare(const char str[*], const char with[*], int cmp(char chr, char with)) {
	int result = 0;
	for (int i = 0; result == 0; i += 1) {
		result = cmp(str[i], with[i]);
		if (str[i] == 0) {
			break;
		}
	}
	return result;
}

/// ignore case character comparator
int ignCaseCmp(char chr, char with) {
	static char ignCase(char chr) {
		if (chr < 'A') {
			return chr;
		}
		if (chr > 'Z') {
			return chr;
		}
		return chr - 'A' + 'a';
	}

	return ignCase(chr) - ignCase(with);
}

/// default character comparator
int caseCmp(char chr, char with) {
	return chr - with;
}

/// convert lower part (4 bits) of the input value to the corresponding lower case hexadecimal character
inline toHex(int value) = int("0123456789abcdef"[value & 0xf]);

/// Check if a string begins with a specified string, using case-sensitive comparison
inline startsWith(const char str[*], const char with[*]) = startsWith(str, with, caseCmp);
/// Check if a string ends in a specified string, using case-sensitive comparison
inline endsWith(const char str[*], const char with[*]) = endsWith(str, with, caseCmp);
/// Check if the two strings are equal, less or greater, using case-sensitive comparison
inline compare(const char str[*], const char with[*]) = compare(str, with, caseCmp);
/// Check if the two strings are equal, using case-sensitive comparison
inline equals(const char str[*], const char with[*]) = compare(str, with, caseCmp) == 0;

/// Check if a string contains the given character
inline contains(const char str[*], char chr) = indexOf(str, chr) >= 0;

/* TODO: implement operator overloading

inline ==(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) == 0;
inline !=(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) != 0;
inline <=(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) <= 0;
inline >=(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) >= 0;
inline <(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) < 0;
inline >(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) > 0;

// */

/// Flags to convert numbers to string
struct FormatFlags {
	/// forced show sign
	const char sign = 0;

	/// precision length
	const int precision = 0;

	/// padding character
	const char padChr = 0;

	/// padding length
	const int padLen = 0;
}

/// Append a string to the output at the given position
int append(char output[], int pos, const char value[*]) {
	if (value == null) {
		return append(output, pos, "NULL");
	}
	for (int i = 0; value[i]; i += 1) {
		if (pos >= output.length) {
			break;
		}
		output[pos] = value[i];
		pos += 1;
	}

	if (pos >= output.length) {
		pos = output.length - 1;
	}
	output[pos] = 0;
	return pos;
}

/// Append a number to the output at the given position
int append(char output[], int pos, int radix, uint64 value, const FormatFlags format&) {
	static const char whiteSpace[] = " \t\n\r";
	static const char radixDigits[] = "0123456789abcdefghijklmnopqrstuvwxyz";

	int len = 0;
	char digits[80] = {};

	assert(radix > 1, "radix is too small", radix);
	assert(radix < radixDigits.length, "radix is too big", radix);

	// print digits in reverse order
	for ( ; value > 0; value /= radix) {
		digits[len += 1] = radixDigits[value % radix];
	}
	if (len == 0) {
		digits[len += 1] = '0';
	}

	int maxLen = format.padLen - len;

	char padChr = format.padChr;
	if (padChr == '\0') {
		padChr = ' ';
	}

	// print sign value
	if (format.sign != 0) {
		maxLen -= 1;
		if (whiteSpace.contains(padChr)) {
			// if padding character is whitespace pad before sign
			for ( ; maxLen > 0; maxLen -= 1) {
				assert(pos < output.length);
				output[pos] = padChr;
				pos += 1;
			}
		}
		assert(pos < output.length);
		output[pos] = format.sign;
		pos += 1;
	}

	// print padding
	for ( ; maxLen > 0; maxLen -= 1) {
		assert(pos < output.length);
		output[pos] = padChr;
		pos += 1;
	}

	// print digits
	for (int i = 0; i < len; i += 1) {
		assert(i < output.length);
		output[pos] = digits[len - i];
		pos += 1;
	}

	if (pos >= output.length) {
		pos = output.length - 1;
	}
	output[pos] = 0;
	return pos;
}

/// Append a number to the output at the given position
inline append(char output[], int pos, uint64 value, const FormatFlags format&) = append(output, pos, 10, uint64(value), format);

/// Append a number to the output at the given position
inline append(char output[], int pos, uint32 value, const FormatFlags format&) = append(output, pos, 10, uint64(value), format);

/// Append a number to the output at the given position
inline append(char output[], int pos, uint16 value, const FormatFlags format&) = append(output, pos, 10, uint64(value), format);

/// Append a number to the output at the given position
inline append(char output[], int pos, uint8 value, const FormatFlags format&) = append(output, pos, 10, uint64(value), format);

/// Append a number to the output at the given position
int append(char output[], int pos, int radix, int64 value, const FormatFlags format&) {
	FormatFlags signedFormat = {
		sign: value < 0 ? '-' : format.sign;
		precision: format.precision;
		padLen: format.padLen;
		padChr: format.padChr;
	};
	if (value < 0) {
		value = -value;
	}
	return append(output, pos, radix, uint64(value), signedFormat);
}

/// Append a number to the output at the given position
inline append(char output[], int pos, int64 value, const FormatFlags format&) = append(output, pos, 10, int64(value), format);

/// Append a number to the output at the given position
inline append(char output[], int pos, int32 value, const FormatFlags format&) = append(output, pos, 10, int64(value), format);

/// Append a number to the output at the given position
inline append(char output[], int pos, int16 value, const FormatFlags format&) = append(output, pos, 10, int64(value), format);

/// Append a number to the output at the given position
inline append(char output[], int pos, int8 value, const FormatFlags format&) = append(output, pos, 10, int64(value), format);

/// Append a number to the output at the given position
int append(char output[], int pos, float64 value, const FormatFlags format&) {
	// TODO: fix precision
	static const FormatFlags formatDec = {};
	FormatFlags formatInt = {
		sign: value < 0 ? '-' : format.sign;
		precision : 10;
		padChr: format.padChr;
		padLen: format.padLen - format.precision - 1;
	};

	int end = Math.min(int(output.length - 1), pos + format.padLen);

	float64 fraction = Math.modf(Math.abs(value), &value);
	pos = output.append(pos, uint64(int64(value)), formatInt);

	static const float64 eps = 1e-5;
	if (fraction < eps && pos >= end) {
		return pos;
	}

	// add fractional part
	pos = output.append(pos, ".");
	int max = Math.min(int(output.length - 1), pos + format.precision);

	if (format.precision == 0) {
		// no precision: use max needed space
		max = output.length - 1;
	}
	for (; (fraction > eps && pos < max) || pos < end;) {
		fraction = Math.modf(fraction * 10, &value);
		pos = output.append(pos, uint64(int64(value)), formatDec);
	}
	return pos;
}

/// Append a number to the output at the given position
inline append(char output[], int pos, float32 value, const FormatFlags format&) = append(output, pos, float64(value), format);

/// Append a number to the output at the given position
int append(char output[], int pos, int value) {
	static const FormatFlags format = {};
	return append(output, pos, value, format);
}

/// Convert a string to a 64 bit floating point value
float64 float64(const char value[]) {
	float64 sign = 1;
	float64 result = 0;
	float64 decimal = 0;

	// TODO: fix precision
	for (int i = 0; i < value.length && value[i] != 0; i += 1) {
		char chr = value[i];
		if (chr >= '0' && chr <= '9') {
			result = result * 10 + (chr - '0');
			decimal *= 10;
		}
		else if (chr == '.') {
			if (decimal != 0) {
				// multiple decimal points
				return Math.nan;
			}
			decimal = 1;
		}
		else if (chr == '-' && i == 0) {
			sign = -1;
		}
		else if (chr == '+' && i == 0) {
			sign = 1;
		}
		else {
			// invalid character
			return Math.nan;
		}
	}

	if (decimal == 0) {
		if (value.length > 0) {
			return sign * result;
		}
	}
	return sign * result / decimal;
}
