// string related functions

/// Computes the length of the string
int length(const char str[*]) {
	if (str == null) {
		return 0;
	}
	int result = 0;
	for (; str[result]; result += 1) {
	}
	return result;
}

/// Returns the index of the first occurrence of a character in string
int indexOf(const char str[*], char chr) {
	for (int i = 0; str[i]; i += 1) {
		if (str[i] == chr) {
			return i;
		}
	}
	return -1;
}

/// Returns the index of the last occurrence of a character in string
int lastIndexOf(const char str[*], char chr) {
	int result = -1;
	for (int i = 0; str[i]; i += 1) {
		if (str[i] == chr) {
			result = i;
		}
	}
	return result;
}

/// Check if a string begins with a specified string, using a custom comparator
bool startsWith(const char str[*], const char with[*], int cmp(char chr, char with)) {
	for (int i = 0; with[i] != 0; i += 1) {
		if (cmp(str[i], with[i]) != 0) {
			return false;
		}
	}
	return true;
}

/// Check if a string ends in a specified string, using a custom comparator
bool endsWith(const char str[*], const char with[*], int cmp(char chr, char with)) {
	int withLen = length(with);
	int strLen = length(str);
	if (strLen < withLen) {
		return false;
	}
	for (int i = 0; i < withLen; i += 1) {
		if (cmp(str[strLen - withLen + i], with[i]) != 0) {
			return false;
		}
	}
	return true;
}

/// Check if the two strings are equal, less or greater, using a custom comparator
int compare(const char str[*], const char with[*], int cmp(char chr, char with)) {
	int result = 0;
	for (int i = 0; result == 0; i += 1) {
		result = cmp(str[i], with[i]);
		if (str[i] == 0) {
			break;
		}
	}
	return result;
}

/// ignore case character comparator
int ignCaseCmp(char chr, char with) {
	static char ignCase(char chr) {
		if (chr < 'A') {
			return chr;
		}
		if (chr > 'Z') {
			return chr;
		}
		return chr - 'A' + 'a';
	}

	return ignCase(chr) - ignCase(with);
}

/// default character comparator
int caseCmp(char chr, char with) {
	return chr - with;
}

/// convert lower part (4 bits) of the input value to the corresponding lower case hexadecimal character
inline toHex(int value) = int("0123456789abcdef"[value & 0xf]);

/// Check if a string begins with a specified string, using case-sensitive comparison
inline startsWith(const char str[*], const char with[*]) = startsWith(str, with, caseCmp);
/// Check if a string ends in a specified string, using case-sensitive comparison
inline endsWith(const char str[*], const char with[*]) = endsWith(str, with, caseCmp);
/// Check if the two strings are equal, less or greater, using case-sensitive comparison
inline compare(const char str[*], const char with[*]) = compare(str, with, caseCmp);
/// Check if the two strings are equal, using case-sensitive comparison
inline equals(const char str[*], const char with[*]) = compare(str, with, caseCmp) == 0;

/// Check if a string contains the given character
inline contains(const char str[*], char chr) = indexOf(str, chr) >= 0;

/* TODO: implement operator overloading
inline ==(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) == 0;
inline !=(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) != 0;
inline <=(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) <= 0;
inline >=(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) >= 0;
inline <(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) < 0;
inline >(const char lhs[*], const char rhs[*]) = compare(lhs, rhs, caseCmp) > 0;
// */

/// Convert a string to a 64 bit floating point value
float64 float64(const char value[]) {
	float64 result = 0;
	static if (preferNativeCalls && typename(float64.parse) != null) {
		// use the native method if available
		int len = float64.parse(value, &result);
		if (len > 0 && len < value.length && value[len] == 0) {
			return result;
		}
		// error("value is not a floating point number");
		return Math.nan;
	}

	float64 sign = 1;
	float64 decimal = 0;

	for (int i = 0; i < value.length && value[i] != 0; i += 1) {
		char chr = value[i];
		if (chr >= '0' && chr <= '9') {
			result = result * 10 + (chr - '0');
			decimal *= 10;
		}
		else if (chr == '.') {
			if (decimal != 0) {
				// multiple decimal points
				return Math.nan;
			}
			decimal = 1;
		}
		else if (chr == '-' && i == 0) {
			sign = -1;
		}
		else if (chr == '+' && i == 0) {
			sign = 1;
		}
		else {
			// invalid character
			return Math.nan;
		}
	}

	if (decimal == 0) {
		if (value.length > 0) {
			return sign * result;
		}
	}
	return sign * result / decimal;
}
