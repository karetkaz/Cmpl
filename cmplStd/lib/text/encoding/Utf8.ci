/// Utf-8 decoder
struct Utf8Reader: TextReader {
	// convert utf-8 bytes to unicode codepoints
	int decode(Utf8Reader this, unicode chars[]) {
		byte buff[1] = {0};
		byte ext[3] = {0};
		ByteReader reader = this.reader;
		for (int i = 0; i < chars.length; i += 1) {
			if (reader.read(buff) <= 0) {
				// end of stream
				return i;
			}

			if ((buff[0] & 0x80) == 0) {
				chars[i] = buff[0];
			}
			else if ((buff[0] & 0xe0) == 0xc0) {
				if (reader.read(ext[...1]) != 1) {
					error("invalid codepoint");
					return i;
				}
				assert((ext[0] & 0b11000000) == 0b10000000, "10xxxxxx");
				chars[i] = (buff[0] & 0x1f) << 6 | (ext[0] & 0x3f);
			}
			else if ((buff[0] & 0xf0) == 0xe0) {
				if (reader.read(ext[...2]) != 2) {
					error("invalid codepoint");
					return i;
				}
				assert((ext[0] & 0b11000000) == 0b10000000, "10xxxxxx");
				assert((ext[1] & 0b11000000) == 0b10000000, "10xxxxxx");
				chars[i] = (buff[0] & 0x0f) << 12 | (ext[0] & 0x3f) << 6 | (ext[1] & 0x3f);
			}
			else if ((buff[0] & 0xf8) == 0xf0) {
				if (reader.read(ext[...3]) != 3) {
					error("invalid codepoint");
					return i;
				}
				assert((ext[0] & 0b11000000) == 0b10000000, "10xxxxxx");
				assert((ext[1] & 0b11000000) == 0b10000000, "10xxxxxx");
				assert((ext[2] & 0b11000000) == 0b10000000, "10xxxxxx");
				chars[i] = (buff[0] & 0x07) << 18 | (ext[0] & 0x3f) << 12 | (ext[1] & 0x3f) << 6 | (ext[2] & 0x3f);
			}
		}
		return chars.length;
	}
}

/// Utf-8 encoder
// adapted from: https://github.com/devatrun/sutfcpplib/blob/main/include/sutfcpplib/utf_codepoint.h#L287
struct Utf8Writer: TextWriter {
	// convert unicode codepoints to utf-8 bytes
	void encode(Utf8Writer this, unicode chars[]) {
		ByteWriter writer = this.writer;
		for (int i = 0; i < chars.length; i += 1) {
			unicode cp = chars[i];

			if (cp < 0x80) {
				byte bytes[1] = {cp};
				writer.write(bytes[...1]);
			}
			else if (cp < 0x800) {
				byte bytes[2] = {
					0b11000000 | (cp >> 6);
					0b10000000 | (cp & 0b00111111);
				};
				writer.write(bytes[...2]);
			}
			else if (cp < 0x10000) {
				byte bytes[3] = {
					0b11100000 | (cp >> 12);
					0b10000000 | ((cp >> 6) & 0b00111111);
					0b10000000 | (cp & 0b00111111);
				};
				writer.write(bytes[...3]);
			}
			else { /*if (cp < 0x110000)*/
				byte bytes[4] = {
					0b11110000 | (cp >> 18);
					0b10000000 | ((cp >> 12) & 0b00111111);
					0b10000000 | ((cp >> 6) & 0b00111111);
					0b10000000 | (cp & 0b00111111);
				};
				writer.write(bytes[...4]);
			}
		}
	}
}
