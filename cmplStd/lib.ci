// standard library extension

// Known boolean values
enum: bool {
	true: 0 == 0;
	false: 0 != 0;
}

inline byte = uint8;
inline float = float32;
inline double = float64;

/// Returns the size of the given type
inline sizeof(typename type) = typename.size(type);

static if (typename(raise) == function) {
// extension methods for debugging
inline "lib/lang/Debug.ci";
}

inline "lib/lang/Pointer.ci";       // pointer extension methods

// Math
inline "lib/math/Bits.ci";
inline "lib/math/Math.ci";
inline "lib/math/Fixed.ci";
inline "lib/math/Complex.ci";
inline "lib/math/Vector4f.ci";
inline "lib/math/Matrix4f.ci";
inline "lib/math/Vector2d.ci";
//todo: inline "lib/math/Decimal.ci"?;
//todo: inline "lib/math/Rational.ci"?;
//todo: inline "lib/math/BigInteger.ci"?;   // TODO: inline Rational -> BigInteger.Rational<BigInteger>
//todo: inline "lib/math/BigDecimal.ci"?;   // TODO: inline Complex -> BigDecimal.Complex<BigDecimal>
//todo: inline "lib/math/Perlin.ci"?;


// Time
inline "lib/time/Timeunit.ci";
inline "lib/time/Duration.ci";
inline "lib/time/Timestamp.ci";
inline "lib/time/Timezone.ci";
inline "lib/time/Datetime.ci";


// Text
inline "lib/text/cstr.ci";
inline "lib/text/Format.ci";
inline "lib/text/stream/ByteStream.ci";
inline "lib/text/stream/TextStream.ci";
inline "lib/text/encoding/binary/Base64.ci";
inline "lib/text/encoding/Ascii.ci";
inline "lib/text/encoding/Utf8.ci";
//todo: inline "lib/text/String.ci";
//todo: inline "lib/text/Collator.ci";
//todo: inline "lib/text/serialization/csv.ci";
//todo: inline "lib/text/serialization/json.ci";
//todo: inline "lib/text/serialization/yaml.ci";
//todo: inline "lib/text/serialization/xml.ci";


// etc
inline "lib/math/Easing.ci";
//inline "lib/math/Perlin.ci";
inline "lib/math/Polynomial.ci"?;
