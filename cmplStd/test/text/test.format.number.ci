/**
 * Format integer to text
 * @param output write output to this buffer
 * @param format format string
 *  	%b format as binary
 *  	%o format as octal
 *  	%d format as decimal
 *  	%x format as hexadecimal
 *  	%i format as custom radix
 *  	null defaults to: "%d"
 * @param value date to format
 */
int format(char output[], const char format[], int64 value) {
	if (pointer(format) == null) {
		return format(output, "%d", value);
	}

	int pos = 0;
	int spos = 0;
	for (char chr; chr = format[spos]; spos += 1) {
		if (chr == '%') {
			FormatFlags flags = FormatFlags.read(format, &spos);
			chr = format[spos];

			if (chr == '%') {
				pos = append(output, pos, "%");
			}
			else if (chr == 'b') {
				pos = append(output, pos, 2, value, flags);
			}
			else if (chr == 'o') {
				pos = append(output, pos, 8, value, flags);
			}
			else if (chr == 'd') {
				pos = append(output, pos, 10, value, flags);
			}
			else if (chr == 'x') {
				pos = append(output, pos, 16, value, flags);
			}
			else if (chr == 'i') {
				assert(flags.precision > 1, "radix must be at least 2");
				pos = append(output, pos, flags.precision, value, flags);
			}
			else {
				abort("invalid format character", chr);
			}
		}
		else if (pos < output.length) {
			output[pos] = chr;
			pos += 1;
		}
	}

	if (pos >= output.length) {
		pos = output.length - 1;
	}
	output[pos] = 0;
	return pos;
}

char buff[512] = {0};
format(buff, "value%%: %d = 0x%08x = 0b%032b = [%.5i]5", 0x20928374);
debug(buff);
assert(equals(buff, "value%: 546472820 = 0x20928374 = 0b00100000100100101000001101110100 = [2104344112240]5"));
