Timestamp start = Timestamp(Datetime(2021, 1, 1));
Timestamp end = Timestamp(Datetime(2022, 2, 1));

for (int y = -10000; y < 10000; y += 1) {
	bool leapYear = (y % 4 == 0) && (y % 100 != 0 || y % 400 == 0);
	assert(leapYear == Datetime.isLeapYear(y), "leap year calculation error", y);
}

for (Timestamp i = start; i.compare(end) < 0; i = i.add(1, Timeunit.Days)) {
	char buff[4096] = {0};
	Datetime(i).format(buff, "[%F]: week: %W");
	debug(buff);
}

for (int i = 0; i < 24; i += 1) {
	char buff[4096] = {0};
	Datetime(2022, 7, 3, i, 12, 22, 0).format(buff, "Hour[%H]: %I %P");
	debug(buff);
}

/* References:
https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Globalization/GregorianCalendar.cs
https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/TimeZone.cs
https://github.com/unicode-org/icu/blob/main/icu4j/main/classes/core/src/com/ibm/icu/util/Calendar.java
https://github.com/JodaOrg/joda-time/blob/master/src/main/java/org/joda/time/DateTime.java
https://github.com/HowardHinnant/date
https://zetcode.com/articles/cdatetime/

https://cs.opensource.google/go/go/+/master:src/time/time.go;l=1440
https://github.com/tkuchiki/go-timezone
https://github.com/srawlins/timezone

todo: add more assertions
*/
