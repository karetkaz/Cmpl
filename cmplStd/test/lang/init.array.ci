// test array initializations
static if (typename(integer) == null) {
inline integer = int32;
}

// uninitialized arrays will raise compilation error
//integer arrayNoInit[7];  // OK: compilation error: uninitialized variable
//integer sliceNoInit[];   // OK: compilation error: uninitialized variable
//integer carrNoInit[*];   // OK: compilation error: uninitialized variable

//
// initialize arrays with literal
//

/** fixed size array initialized with literal will set each element of the array with the given values.
 * arrayInit: int32[7] := {
 * 	arrayInit[0] := 42;
 * 	arrayInit[1] := 43;
 * 	...
 * };
 */
integer arrayInit[7] = {42, 43, 44, 45, 46, 47, 48};
integer arrayInitLess[9] = {42, 43, 44, 45, 46, 47, 48};    // TODO: raise a warning: partial array initialization
//integer arrayInitMore[3] = {42, 43, 44, 45, 46, 47, 48};    // OK: compilation error: too many values

/** dynamic size array initialized with literal will create also a fixed size array,
 * initialize all the values of the fixed size array, and assign it to the slice.
 * sliceInit: int32[] := {
 * 	sliceInit := sliceInit.init;
 * 	sliceInit.init[0] := 1;
 * 	sliceInit.init[1] := 2;
 * 	...
 * };
 */
integer sliceInit[] = {1, 2, 3, 4};

/** unknown size array initialized with literal will create also a fixed size array,
 * initialize all the values of the fixed size array, and assign it to the pointer.
 * carrInit: int32[*] := {
 * 	carrInit := carrInit.init;
 * 	carrInit.init[0] := 1;
 * 	carrInit.init[1] := 2;
 * };
 */
integer carrInit[*] = {1, 2, 3, 4};

//
// initialize arrays with null literal
//

//integer arrayInitNull[7] = null;  // OK: compilation error; TODO: use custom message
integer sliceInitNull[] = null;
integer carrInitNull[*] = null;

//
// initialize arrays with fixed size array
//

//integer arrayInitFixed[7] = arrayInit;  // FIXME: compile time length check; copy elements
integer sliceInitFixed[] = arrayInit;
integer carrInitFixed[*] = arrayInit;

//
// initialize arrays with slice
//

//integer arrayInitSlice[7] = sliceInit;  // OK: TODO: runtime length check; copy elements
integer sliceInitSlice[] = sliceInit;
integer carrInitSlice[*] = sliceInit;

//
// initialize arrays with pointer
//

//integer arrayInitPtr[7] = carrInit;  // OK: compilation error; TODO: custom message: missing length
//integer sliceInitPtr[] = carrInit;  // OK: compilation error: can not emit length of array
integer carrInitPtr[*] = carrInit;

// initialize character arrays with string literals
char strFixed[7] = {'s', 't', 'r', 'i', 'n', 'g', 0};// = "string";  // FIXME: copy elements + compile time length check;
//char strFixedInitMore[2] = "string";  // compilation error: TODO: custom message: data does not fit
//char strFixedInitLess[9] = "string";  // TODO: same as arrayInitLess
debug("string as variant", strFixed);

char strSlice[] = "string";
debug("string as variant", strSlice);

char strArray[*] = "string";
debug("string as variant", strArray);


//int err_arrayInitString[32] = "string";  // compilation error: TODO: custom message: invalid assignment
//int err_sliceInitString[] = "string";  // FIXME: this should not compile: invalid assignment
//int err_carrInitString[*] = "string";  // ok: compilation error: invalid initialization

assert(sliceInitNull.length == 0);
assert(arrayInit[0] == 42);

int lenSlice(const integer values[]) { return values.length; }
integer nthFixed(int idx, const integer values[7]) { return values[idx]; }
integer nthArray(int idx, const integer values[*]) { return values[idx]; }
integer nthSlice(int idx, const integer values[]) { return values[idx]; }

assertEq(7, arrayInit.length);
assertEq(arrayInit.length, sliceInitFixed.length);
assertEq(sliceInit.length, sliceInitSlice.length);

assertEq(0, lenSlice(null));
assertEq(0, lenSlice(sliceInitNull));
assertEq(arrayInit.length, lenSlice(arrayInit));
assertEq(arrayInit.length, lenSlice(sliceInitFixed));
assertEq(sliceInit.length, lenSlice(sliceInitSlice));

for (int i = 0; i < arrayInit.length; i += 1) {
	integer expected = 42 + i;
	assert(expected == arrayInit[i]);
	assert(expected == carrInitFixed[i]);
	assert(expected == sliceInitFixed[i]);

	assert(expected == nthFixed(i, arrayInit));
	assert(expected == nthFixed(i, carrInitFixed));
	assert(expected == nthFixed(i, sliceInitFixed));

	assert(expected == nthArray(i, arrayInit));
	assert(expected == nthArray(i, carrInitFixed));
	assert(expected == nthArray(i, sliceInitFixed));

	assert(expected == nthSlice(i, arrayInit));
	//assert(expected == nthSlice(i, carrInitFixed));	// compilation error: can not emit length of array
	assert(expected == nthSlice(i, sliceInitFixed));
}

/* TODO: Dynamically allocate the array on the heap, and initialize all its elements
int a[n] = {*: 4};
=> {
	a = {size: n, data: malloc(n * sizeof(int));}
	static for (int i = 0; i < a.length; ++i) {
		a[i] = 4;
	}
}*/


/* TODO: Initialize all elements of an array with a default value
int a[100] = {*: 4};
=> {
	static for (int i = 0; i < a.length; ++i) {
		a[i] = 4;
	}
}*/

/* TODO: Initialize the first elements with the given values and the rest with a default value
int a[100] = {1, 2, 3, *: 64};
=> {
	a[0] = 1;
	a[1] = 2;
	a[2] = 3;
	static for (int i = 3; i < a.length; ++i) {
		a[i] = 64;
	}
}*/

/* TODO: Initialize all elements of an array with a default value, then override some of them
char xmlEscape[*][255] = {
	*: null;
	'"': "&quot;";
	'\'': "&apos;";
	'<': "&lt;";
	'>': "&gt;";
	'&': "&amp;";
};
=> {
	for (int i = 0; i < xmlEscape.length; ++i) {
		xmlEscape[i] = null;
	}
	xmlEscape['"'] = "&quot;";
	xmlEscape['\''] = "&apos;";
	xmlEscape['<'] = "&lt;";
	xmlEscape['>'] = "&gt;";
	xmlEscape['&'] = "&amp;";
}*/

/* TODO: Initialize all elements of an array with a generator value
int a[100] = {*: mul(*, 2)};
=> {
	static for (int i = 0; i < a.length; ++i) {
		a[i] = mul(i, 2);
	}
}*/

