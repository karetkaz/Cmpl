/// test and documentation of member initializations
struct RecordMemberTest {

	struct Inner {
		int member;
		const int constant;
	}

	// if initializer is omitted, initialize with `default type initializer`.
	int member;

	// constant fields must be initialized on instance creation, because they can not be changed.
	const int constant;

	// if initializer is omitted, initialize with `default field initializer`
	int memberInit = 2;

	// if initializer is omitted, initialize with `default field initializer`
	const int constantInit = 3;

	// field must be initialized because there is no `default type initializer`.
	Inner memberRec;

	// all members of constant fields must be initialized on instance creation, because they can not be changed.
	const Inner constantRec;

	// if initializer is omitted, initialize with `default field initializer`.
	// FIXME: Inner memberRecInit = {member: 4, constant: 5};

	// if initializer is omitted, initialize with `default field initializer`.
	// FIXME: const Inner constantRecInit = {member: 6, constant: 7};

	// global variable initialized with `default type initializer`
	static int global;

	// global variable initialized with initializer.
	static int globalInit = 1;

	// global constants must be initialized when declared, because they can not be changed.
	static const int globalConstant = 2;

	// must be initialized because there is no `default type initializer`.
	static Inner globalRec = {constant: 4};

	// global variable initialized with initializer.
	static Inner globalRecInit = {member: 4, constant: 5};

	// global constants must be initialized when declared, because they can not be changed.
	static const Inner globalConstantRec = {member: 6, constant: 7};
}

RecordMemberTest recordMemberTest = {
	member: 10;
	constant: 11;
	memberInit: 12;
	constantInit: 13;

	memberRec: {
		member: 14;
		constant: 15;
	};
	// constant member mut be initialized with all fields set
	constantRec: {
		member: 16;
		constant: 17;
	};

	/* static fields can not be initialized
	global: 29;
	globalInit: 39;
	globalConstant: 49;
	// */
};

/* assign new values after initialization
recordMemberTest.member = 74;
recordMemberTest.memberInit = 75;
// accessing static members using instance variable
recordMemberTest.global = 76;
recordMemberTest.globalInit = 79;
/* constant variables can not be assigned
recordMemberTest.constant = 79;
recordMemberTest.constantInit = 80;
recordMemberTest.globalConstant = 81;
// */

/* TODO
// allow initialization with a previously declared value

struct Switch: View {
	int value = 0;
	const int resetValue = value;
	...
}

// */