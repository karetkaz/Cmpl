/**
 * static, virtual and abstract methods
 */
struct RecordMethodTest {

	/**
	 * static method is like a `global function` hidden in a record
	 * @see lang/function.ci
	 */
	static void staticMethod(RecordMethodTest this, int x) {
		trace("staticMethod", x);
	}

	/**
	 * static forward method is like a `forward function reference` hidden in a record
	 * @see lang/function.ci
	 */
	static void forwardMethod(RecordMethodTest this, int x);

	/**
	 * abstract methods must be overridden when inheriting or instantiating
	 * the compiler sees it as a `constant function reference` without `default type initializer`
	 * @see lang/member.ci
	 */
	void abstractMethod(RecordMethodTest this, int x);

	/**
	 * virtual method (use to delegate)
	 * the compiler sees it as a `constant function reference` with `default field initializer`
	 * @see lang/member.ci
	 */
	void delegateMethod(RecordMethodTest this, int x) = forwardMethod;

	/**
	 * virtual methods can be overridden when inheriting or instantiating
	 * the compiler will generate a static function and an instance member initialized with the static method
	 *   * static void virtualMethod(...) { ... }
	 *   * void virtualMethod(...) = [static] virtualMethod;
	 */
	void virtualMethod(RecordMethodTest this, int x) {
		trace("virtualMethod", x);
	}

	/**
	 * static forward method implementation
	 */
	static void forwardMethod(RecordMethodTest this, int x) {
		trace("forwardMethod", x);
	}

//	void abstractMethod(RecordMethodTest this, int x) {}        // FIXME: make abstract method virtual?
//	void delegateMethod(RecordMethodTest this, int x) {}        // Error: redefinition of method
//	void virtualMethod(RecordMethodTest this, int x) {}         // Error: redefinition of method
//	void staticMethod(RecordMethodTest this, int x) {}          // Error: redefinition of method
}

void globalFunction(RecordMethodTest this, int x) {
	trace("globalFunction", x);
}

/** create an instance of the type */
RecordMethodTest recordMethodTest = {
	// abstract method must be overridden
	abstractMethod: globalFunction;                             // ok: global function
//	abstractMethod: RecordMethodTest.staticMethod;              // ok: static method
//	abstractMethod: RecordMethodTest.virtualMethod;             // ok: using the generated static method
//	abstractMethod: RecordMethodTest.delegateMethod;            // Error: delegate method is an instance member

	// virtual method can be overridden
//	virtualMethod: globalFunction;                              // Override virtual method
//	delegateMethod: globalFunction;                             // Override delegate method
};


/*
 * extension function is not yet defined, lookup the best match defined in the type.
 */
recordMethodTest.staticMethod(1);                               // => RecordMethodTest.staticMethod(recordMethodTest, 1);
recordMethodTest.virtualMethod(1);                              // => recordMethodTest.virtualMethod(recordMethodTest, 1);

/**
 * extension function is defined, it has the highest priority.
 */
void staticMethod(RecordMethodTest this, int x) {
	debug("extension.staticMethod");
	if (this != null) {
		RecordMethodTest.staticMethod(this, x);
	}
}
void virtualMethod(RecordMethodTest this, int x) {
	debug("extension.virtualMethod");
	if (this != null) {
		this.virtualMethod(this, x);
	}
}

recordMethodTest.staticMethod(2);                               // => staticMethod(recordMethodTest, 1);
recordMethodTest.virtualMethod(2);                              // => virtualMethod(recordMethodTest, 1);

// invoke the original methods, by explicitly passing all the arguments
RecordMethodTest.staticMethod(recordMethodTest, 3);             // invoke the static method implemented in the type
RecordMethodTest.virtualMethod(recordMethodTest, 3);            // invoke the static method of the type
recordMethodTest.virtualMethod(recordMethodTest, 3);            // invoke the virtual method of the instance
