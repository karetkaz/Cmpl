#!cmpl -profile/g

inline times2exec = 100000;

Complex a = Complex(3., 4.);
Complex b = Complex(2., 5.);
Complex res = mul(a, b);

Complex mul_sisd(Complex a, Complex b) {
	return {
		re: a.re * b.re - a.im * b.im;
		im: a.re * b.im + a.im * b.re;
	};
}
Complex mul_simd(Complex a, Complex b) {
	return Complex(emit(
		struct(a), struct(b), swz.x2, mul.p2d, add.f64,
		struct(a), struct(b), mul.p2d, swz.x2, sub.f64
	));
}
Complex mul_ref_sisd(const Complex a&, const Complex b&) {
	return {
		re: a.re * b.re - a.im * b.im;
		im: a.re * b.im + a.im * b.re;
	};
}
Complex mul_ref_simd(const Complex a&, const Complex b&) {
	return Complex(emit(
		struct(a), struct(b), swz.x2, mul.p2d, add.f64,
		struct(a), struct(b), mul.p2d, swz.x2, sub.f64
	));
}

inline assert_equals(Complex expected, Complex returned) = assert(expected.re == returned.re && expected.im == returned.im);

for (int i = 0; i < times2exec; i += 1) {
	assert_equals(res, mul_simd(a, b));
	assert_equals(res, mul_sisd(a, b));
	assert_equals(res, mul_ref_simd(a, b));
	assert_equals(res, mul_ref_sisd(a, b));
}

/*
---------- Profile functions: 7/106, coverage: 6.60%, failures: 0
./simd.complex.mul.ci:9:[.03fe90, .03feab): hits(100000), time(992.879 ms): mul_sisd(a: Complex, b: Complex): Complex
./simd.complex.mul.ci:15:[.03feb0, .03fec3): hits(100000), time(772.167 ms): mul_simd(a: Complex, b: Complex): Complex
./simd.complex.mul.ci:21:[.03fec8, .03fefb): hits(100000), time(1580.575 ms): mul_ref_sisd(a: Complex, b: Complex): Complex
./simd.complex.mul.ci:27:[.03ff00, .03ff17): hits(100000), time(970.768 ms): mul_ref_simd(a: Complex, b: Complex): Complex

---------- Globals:
./simd.complex.mul.ci:5: a: Complex({
        re: float64(3.000000),
        im: float64(4.000000)
})
./simd.complex.mul.ci:6: b: Complex({
        re: float64(2.000000),
        im: float64(5.000000)
})
./simd.complex.mul.ci:7: res: Complex({
        re: float64(-14.000000),
        im: float64(23.000000)
})
*/
