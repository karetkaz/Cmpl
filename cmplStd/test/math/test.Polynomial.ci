static TextWriter out = AsciiWriter {
	writer: FileWriter {
		file: File.log;
		close: null;
	};
	format: {};
};

//Polynomial a = Polynomial(1);                     // fixme: single parameter
//Polynomial a = Polynomial(10, 3, 6, 2, 4, 9, 0, 4);
Polynomial a = Polynomial(1, 0, 3, 1);
Polynomial b = Polynomial(1, 2, 0);
out.write("a: ").writeln(a);
out.write("b: ").writeln(b);
out.write("-a: ").writeln(Polynomial.neg(a));        // fixme: a.neg()
out.write("-b: ").writeln(Polynomial.neg(b));        // fixme: b.neg()
out.write("a + b: ").writeln(Polynomial.add(a, b));  // fixme: a.add(b)
out.write("a - b: ").writeln(Polynomial.sub(a, b));  // fixme: a.sub(b)
out.write("a * b: ").writeln(Polynomial.mul(a, b));  // fixme: a.mul(b)
out.write("a(2): ").write(a.evaluate(2), out.format).writeln();
out.write("a': ").writeln(a.derivative());
out.write("int(a): ").writeln(a.integral(10));

for (int i = 0; i < 10; i += 1) {
	out.write("a[").write(i, out.format).write("] = ").write(a.get(i), out.format).writeln();
//	a.set(i, a.get(i));  // long form: Polynomial.set(a, i, Polynomial.get(a, i));
}

/* TODO: implement enums, operator overloading
	enum: Polynomial {
		zero: {
			elements: { c_zero };
			capacity: 1;
		}
	}

inline [](Polynomial &this, int index) = Polynomial.get(this, index);
inline ()(Polynomial &this, scalar x) = Polynomial.evaluate(this, x);

inline -(const Polynomial &a) = Polynomial.neg(a);
inline +(const Polynomial &a, const Polynomial &b) = Polynomial.add(a, b);
inline -(const Polynomial &a, const Polynomial &b) = Polynomial.sub(a, b);
inline *(const Polynomial &a, const Polynomial &b) = Polynomial.mul(a, b);
*/

/* References:
https://github.com/OpenSourcePhysics/osp/blob/master/src/org/opensourcephysics/numerics/Polynomial.java
https://github.com/umontreal-simul/ssj/blob/master/src/main/java/umontreal/ssj/functions/Polynomial.java
http://home.apache.org/~luc/commons-math-3.6-RC2-site/jacoco/org.apache.commons.math3.analysis.polynomials/PolynomialFunction.java.html
// */
