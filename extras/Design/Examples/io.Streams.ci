// InputOutput

struct Closeable: object {
	// abstract method
	void close(Closeable this);
}

// destroy a closeable invoking the abstract close method
inline void(Closeable instance) = instance.close();

// ByteReader ~= java:InputStream
struct ByteReader: Closeable {

	// abstract method
	int read(ByteReader this, byte bytes[]);

	int read(ByteReader this) {
		byte bytes[1];
		result = this.read(bytes);
		if (result > 0) {
			result = bytes[0];
		}
		return result;
	}

	bool read(ByteReader this, variant value) {
		int size = sizeof(typename(value));
		byte bytes[] = emit(pointer(value), size);
		// TODO: try to read all bytes in a loop
		// TODO: little or big endian?
		return this.read(bytes) < size;
	}

	/* TODO: subclasses
		CopyReader
		FileReader
		PipedReader
		SocketReader
		MemoryReader
	*/
}

// ByteWriter ~= java:OutputStream
struct ByteWriter: Closeable {
	struct Writeable: object {
		// abstract method
		void write(Writeable this, ByteWriter writer);
	}

	// abstract method
	void write(ByteWriter this, byte bytes[]);

	// abstract method
	void flush(ByteWriter this);

	void write(ByteWriter this, byte oneByte) {
		byte bytes[1] = { oneByte };
		return this.write(bytes);
	}

	void write(ByteWriter this, void write(ByteWriter writer)) {
		return write(this);
	}

	void write(ByteWriter this, Writeable value) {
		return write(this, value.write);
	}

	void write(ByteWriter this, variant value) {
		int size = sizeof(typename(value));
		byte bytes[] = emit(pointer(value), size);
		// TODO: little or big endian?
		return this.write(bytes);
	}

	/* TODO: subclasses
		FileWriter
		PipedWriter
		SocketWriter
		MemoryWriter
	*/
}

// TextReader := Decoder & Parser
struct TextReader: Closeable {  // java:Reader + Scanner?Parser?
	const ByteReader reader;
	const bool close;

	// abstract method
	int decode(char chars[], ByteReader reader);

	int read(TextReader this, char chars[]) {
		return this.decode(chars, this.reader);
	}

	int read(TextReader this) {
		char chars[1];
		result = this.read(chars);
		if (result > 0) {
			result = chars[0];
		}
		return result;
	}

	void close(TextReader this) {
		if (close) {
			this.reader.close();
		}
	}

	// TODO: string readNext(TextReader this, regex matcher) { /*...*/ }
	// TODO: string readWord(TextReader this) { return this.readNext(/\w+/); }
	// TODO: string readLine(TextReader this) { return this.readNext(/.*$/); }
	// TODO: string readAll(TextReader this) { return this.readMatch(/.*/); }
	// TODO: double readNumber(TextReader this, Locale locale) { /*...*/ }

	/* TODO: subclasses
		Latin1
		Ascii
		Utf7
		Utf8
	*/
}

// TextWriter := Encoder & Printer
struct TextWriter: Closeable {  // java:Writer + PrintStream
	struct Writeable: object {
		// abstract method
		void write(Writeable this, TextWriter writer);
	}

	const ByteWriter writer;
	const bool close;

	// abstract method
	void encode(ByteWriter writer, char chars[]);

	void write(TextWriter this, char chars[]) {
		return this.encode(this.writer, chars);
	}

	void write(TextWriter this, char oneChar) {
		char chars[1] = { oneChar };
		return this.write(chars);
	}

	void write(TextWriter this, void write(TextWriter writer)) {
		return write(this);
	}

	void write(TextWriter this, Writeable value) {
		return write(this, value.write);
	}

	void flush(TextWriter this) {
		this.writer.flush();
	}

	void close(TextWriter this) {
		if (close) {
			this.writer.close();
		}
	}

	/**
	 * Convert from one encoding to another.
	 * @returns converted character count.
	 *
	 * example: convert utf-8 encoded file to ascii
	 * TextWriter output = AsciiWriter("out.txt", false);
	 * TextReader input = Utf8Reader("in.txt");
	 * output.encode(input);
	*/
	static int encode(TextWriter this, TextReader input) {
		int count;
		char buffer[1024];
		for ( ; (count = input.read(buffer)) > 0; ) {
			this.write(buffer[0 .. count]);
			result += count;
		}
		return result;
	}

	// TODO: void write(TextWriter this, Locale locale, bool value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, char value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, int32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, int64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, uint32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, uint64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, float32 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, float64 value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, string value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, object value) { /*...*/ }
	// TODO: void write(TextWriter this, Locale locale, variant value) { /*...*/ }

	/* TODO: subclasses
		Latin1
		Ascii
		Utf7
		Utf8
	*/
}

// copy byte-stream
struct CopyReader: ByteReader {
	const ByteReader source;
	const ByteWriter clone;
	const bool close;

	int read(CopyReader this, byte bytes[]) {
		result = this.source.read(bytes);
		if (result > 0) {
			this.clone.write(bytes[0 ... result]);
		}
		return result;
	}

	void close(CopyReader this) {
		if (close) {
			this.source.close();
			this.copy.close();
		}
	}
}

// Ascii
struct AsciiReader: TextReader {
	// convert bytes to chars
	int decode(char chars[], ByteReader reader) {
		for (result = 0; result < chars.length; result += 1) {
			int value = reader.read();
			if (value < 0) {
				// end of stream
				break;
			}
			chars[i] = value;
		}
		return result;
	}
}
struct AsciiWriter: TextWriter {
	// convert characters to bytes(can cause data loss)
	void encode(ByteWriter writer, char chars[]) {
		for (int i = 0; i < chars.length; i += 1) {
			writer.write(byte(chars[i]));
		}
	}
}

// Utf-8
struct Utf8Reader: TextReader {
	// convert utf-8 bytes to characters
	int decode(char chars[], ByteReader reader) {
		for (result = 0; result < chars.length; result += 1) {
			int value = reader.read();
			if (value < 0) {
				// end of stream
				break;
			}

			if ((value & 0x80) == 0) {
				// value = value;
			}
			else if ((value & 0xe0) == 0xc0) {
				int val1 = this.reader.read() & 0x3f;
				value = (value & 31) << 6 | val1;
			}
			else if ((value & 0xf0) == 0xe0) {
				int val1 = this.reader.read() & 0x3f;
				int val2 = this.reader.read() & 0x3f;
				value = (value & 15) << 12 | val1 << 6| val2;
			}
			else if ((value & 0xf8) == 0xf0) {
				int val1 = this.reader.read() & 0x3f;
				int val2 = this.reader.read() & 0x3f;
				int val3 = this.reader.read() & 0x3f;
				value = (value & 7) << 18 | val1 << 12 | val2 << 6 | val3;
			}
			chars[i] = value;
		}
		return result;
	}
}
struct Utf8Writer: TextWriter {
	// convert characters to utf-8 bytes
	void encode(ByteWriter writer, char chars[]) {
		byte bytes[4] = void;
		for (int i = 0; i < chars.length; i += 1) {
			int chr = chars[i];

			if (chr < 0x80) {
				bytes[0] = chr;
				writer.write(bytes[0, 1]);
			}
			else if (chr < 0x800) {
				bytes[0] = (chr & 0x7c0) >> 6 | 0xc0;
				bytes[1] = chr & 0x3f | 0x80;
				writer.write(bytes[0, 2]);
			}
			else if (chr < 0xe000) {
				bytes[0] = (chr & 0xf000) >> 12 | 0xe0;
				bytes[1] = (chr & 0xfc) >> 6 | 0x80;
				bytes[2] = chr & 0x3f | 0x80;
				writer.write(bytes[0, 3]);
			}
			else {
				bytes[0] = (chr & 0x1c0000) >> 18 | 0xf0;
				bytes[1] = (chr & 0x3f0) >> 12 | 0x80;
				bytes[2] = (chr & 0xfc) >> 6 | 0x80;
				bytes[3] = chr & 0x3f | 0x80;
				writer.write(bytes[0, 4]);
			}
		}
	}
}

// File streams
static if (typename(File) != null) {
/*
struct Path {
	bool exists();
	bool isFile();
	bool isDirectory();
	bool isHidden();
	bool isAbsolute();

	Path parent();
	// permissions: canRead,write,execute,...
}*/

struct FileReader: ByteReader {
	const File file;
	const bool close;

	int read(FileReader this, byte bytes[]) {
		return File.read(this.file, bytes);
	}

	void close(FileReader this) {
		if (close) {
			File.close(this.file);
		}
	}
}
struct FileWriter: ByteWriter {
	const File file;
	const bool close;

	void write(FileWriter this, byte bytes[]) {
		for (int start = 0; start < bytes.length; ) {
			start += File.write(this.file, bytes[start, bytes.length]);
		}
	}

	void flush(FileWriter this) {
		return File.flush(this.file);
	}

	void close(FileWriter this) {
		if (close) {
			File.close(this.file);
		}
	}
}

inline FileReader(Path path) = {
	file: File.open(path);
	close: true;    // close also the file when the reader is closed.
};
inline FileWriter(Path path, bool append) = {
	file: append ? File.append(path) : File.create(path);
	close: true;    // close also the file when the writer is closed.
};

inline AsciiReader(Path path) = {
	reader: FileReader(path);
	close: true;    // close also the file when the reader is closed.
};
inline AsciiWriter(Path path, bool append) = {
	writer: FileWriter(path, append);
	close: true;    // close also the file when the writer is closed.
};

inline Utf8Reader(Path path) = {
	reader: FileReader(path);
	close: true;    // close also the file when the reader is closed.
};
inline Utf8Writer(Path path, bool append) = {
	writer: FileWriter(path, append);
	close: true;    // close also the file when the writer is closed.
};
}

struct ByteBuffer {
	int position = 0;
	int capacity = 32;
	int length = 0;
	byte buffer[*] = pointer.alloc(null, capacity);

	int read(ByteBuffer this, byte bytes[]) {
		if (this.position >= this.length) {
			return -1;
		}
		for (int i = 0; i < bytes.length; i += 1) {
			if (this.position >= this.length) {
				return i;
			}
			bytes[i] = this.buffer[this.position];
			this.position += 1;
		}
		return bytes.length;
	}

	int read(ByteBuffer this) {
		if (this.position >= this.length) {
			return -1;
		}
		int result = this.buffer[this.position];
		this.position += 1;
		return result;
	}

	void write(ByteBuffer this, byte bytes[]) {
		int size = this.position + bytes.length;
		if (size >= this.capacity) {
			// try to double the current size
			this.capacity *= 2;
			if (size > 2 * this.capacity) {
				// double the calculated size
				this.capacity = size * 2;
			}

			byte buffer[*] buffer = this.buffer;
			this.buffer = pointer.alloc(null, this.capacity);

			// copy old bytes
			for (int i = 0; i < this.position; i += 1) {
				this.buffer[i] = buffer[i];
			}
			pointer.alloc(buffer, 0);
		}

		// copy new bytes
		for (int i = 0; i < bytes.length; i += 1) {
			this.buffer[this.position] = bytes[i];
			this.position += 1;
		}
	}

	void flush(ByteBuffer this) {
		// do nothing
	}

	void close(ByteBuffer this) {
		// release memory
		pointer.alloc(this.buffer, 0);
		this.buffer = null;

		this.position = 0;
		this.capacity = 0;
		this.length = 0;
	}
}