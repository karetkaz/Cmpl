// FIXME: define operators in the language, not built in the compiler

// Negate
inline -(int32 a) = int32(emit(int32(a), neg.i32));
inline -(int64 a) = int64(emit(int64(a), neg.i64));
inline -(uint32 a) = uint32(emit(uint32(a), neg.u32));
inline -(uint64 a) = uint64(emit(uint64(a), neg.u64));
inline -(float32 a) = float32(emit(float32(a), neg.f32));
inline -(float64 a) = float64(emit(float64(a), neg.f64));

// Addition
inline +(int32 a, int32 b) = int32(emit(int32(a), int32(b), add.i32));
inline +(int32 a, int64 b) = int64(emit(int64(a), int64(b), add.i64));
inline +(int32 a, uint32 b) = uint32(emit(int32(a), uint32(b), add.u32));
inline +(int32 a, uint64 b) = uint64(emit(int64(a), uint64(b), add.u64));
inline +(int32 a, float32 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(int32 a, float64 b) = float64(emit(float64(a), float64(b), add.f64));

inline +(int64 a, int32 b) = int64(emit(int64(a), int64(b), add.i64));
inline +(int64 a, int64 b) = int64(emit(int64(a), int64(b), add.i64));
inline +(int64 a, uint32 b) = int64(emit(int64(a), uint64(b), add.i64));
inline +(int64 a, uint64 b) = uint64(emit(int64(a), uint64(b), add.u64));
inline +(int64 a, float32 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(int64 a, float64 b) = float64(emit(float64(a), float64(b), add.f64));

inline +(uint32 a, int32 b) = uint32(emit(uint32(a), int32(b), add.u32));
inline +(uint32 a, int64 b) = int64(emit(uint64(a), int64(b), add.i64));
inline +(uint32 a, uint32 b) = uint32(emit(uint32(a), uint32(b), add.u32));
inline +(uint32 a, uint64 b) = uint64(emit(uint64(a), uint64(b), add.u64));
inline +(uint32 a, float32 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(uint32 a, float64 b) = float64(emit(float64(a), float64(b), add.f64));

inline +(uint64 a, int32 b) = uint64(emit(uint64(a), int64(b), add.u64));
inline +(uint64 a, int64 b) = uint64(emit(uint64(a), int64(b), add.u64));
inline +(uint64 a, uint32 b) = uint64(emit(uint64(a), uint64(b), add.u64));
inline +(uint64 a, uint64 b) = uint64(emit(uint64(a), uint64(b), add.u64));
inline +(uint64 a, float32 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(uint64 a, float64 b) = float64(emit(float64(a), float64(b), add.f64));

inline +(float32 a, int32 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(float32 a, int64 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(float32 a, uint32 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(float32 a, uint64 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(float32 a, float32 b) = float32(emit(float32(a), float32(b), add.f32));
inline +(float32 a, float64 b) = float64(emit(float64(a), float64(b), add.f64));

inline +(float64 a, int32 b) = float64(emit(float64(a), float64(b), add.f64));
inline +(float64 a, int64 b) = float64(emit(float64(a), float64(b), add.f64));
inline +(float64 a, uint32 b) = float64(emit(float64(a), float64(b), add.f64));
inline +(float64 a, uint64 b) = float64(emit(float64(a), float64(b), add.f64));
inline +(float64 a, float32 b) = float64(emit(float64(a), float64(b), add.f64));
inline +(float64 a, float64 b) = float64(emit(float64(a), float64(b), add.f64));

// TODO: Sub
// TODO: Mul
// TODO: Div
// TODO: Mod

// TODO: Complement
// TODO: And
// TODO: Or
// TODO: Xor
// TODO: Shl
// TODO: Shr

// TODO: Not
// TODO: Compare
// TODO: Equal
