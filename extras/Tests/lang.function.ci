/* FIXME: function lookup and code generation
void empty() {}

// function with implementation
int funAdd(int x, int y) {
	return x + y;
}

// function invocation
int funAddResult = funAdd(1, 2);

// initialized function reference
int funAddRef(int x, int y) = funAdd;

// function reference invocation
int funAddRefResult = funAddRef(1, 2);

// forward function reference (must be implemented somewhere)
int funMul(int x, int y);

// forward function invocation
int funMulResult = funMul(1, 2);

// initialized function reference
int funMulRef(int x, int y) = funMul;

// function invocation
int funMulRefResult = funMulRef(1, 2);

// forward function implementation
int funMul(int x, int y) {
	return x * y;
}

// forward member function: "abstract"
struct Iterator: object {
	// abstract iterator method
	bool next(Iterator it);
}

struct RangeIterator: Iterator {
	int value = -1;
	const int max;

	// implement abstract method
	bool next(RangeIterator it) {
		if (it.value < it.max) {
			it.value += 1;
			return true;
		}
		return false;
	}
}

RangeIterator it = { max: 30 };
for ( ; it.next(); ) {
	print(it.value);
}
// */
